<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeJam</name>
    </assembly>
    <members>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example>
                <code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example>
                <code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitNotNullAttribute">
            <summary>
            Implicitly apply [NotNull]/[ItemNotNull] annotation to all the of type members and parameters
            in particular scope where this annotation is used (type declaration or whole assembly).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example>
                <code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code>
            </example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example>
                <code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
            <summary>
             Indicates that the method is contained in a type that implements
            <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
            </summary>
            <remarks>
             The method should be non-static and conform to one of the supported signatures:
            <list>
                    <item><c>NotifyChanged(string)</c></item>
                    <item><c>NotifyChanged(params string[])</c></item>
                    <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
                    <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
                    <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
            </remarks>
            <example>
            <code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
            Examples of generated notifications:
            <list>
                    <item><c>NotifyChanged("Property")</c></item>
                    <item><c>NotifyChanged(() =&gt; Property)</c></item>
                    <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
                    <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
                    <item>FDT      ::= FDTRow [;FDTRow]*</item>
                    <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
                    <item>Input    ::= ParameterName: Value [, Input]*</item>
                    <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
                    <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples>
                <list>
                    <item>
                        <code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code>
                    </item>
                    <item>
                        <code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code>
                    </item>
                    <item>
                        <code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code>
                    </item>
                </list>
            </examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example>
                <code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example>
                <code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example>
                <code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example>
                <code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example>
                <code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:JetBrains.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>
            >
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:JetBrains.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example>
                <code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:CodeJam.Algorithms">
            <summary>Miscellaneous algorithms</summary>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
            	j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists
            </summary>
            <typeparam name="TElement">
            The list element type
            <remarks>Should implement IComparable&lt;TValue&gt;</remarks>
            </typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
            	j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists
            </summary>
            <typeparam name="TElement">
            The list element type
            <remarks>Should implement IComparable&lt;TValue&gt;</remarks>
            </typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists
            	j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists
            </summary>
            <typeparam name="TElement">
            The list element type
            <remarks>Should implement IComparable&lt;TValue&gt;</remarks>
            </typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
            	j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="comparer">The function with the Comparer&lt;T&gt;.Compare semantics</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Func{``0,``1,System.Int32})">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
            	j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="comparer">The function with the Comparer&lt;T&gt;.Compare semantics</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists
            	j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <param name="comparer">The function with the Comparer&lt;T&gt;.Compare semantics</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Single},System.Single)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
            	j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Single},System.Single,System.Int32)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
            	j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Single},System.Single,System.Int32,System.Int32)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists
            	j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
            	j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
            	j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.Double},System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists
            	j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
            	j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
            	j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists
            	j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTime},System.DateTime)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
            	j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
            	j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32,System.Int32)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists
            	j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
            	j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists
            	j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.EqualRange(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32,System.Int32)">
            <summary>
            Returns the tuple of [i, j] where
            	i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists
            	j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The tuple of lower bound and upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.Memoize``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
            Caches function value for specific argument.
            </summary>
            <param name="func">Function to memoize.</param>
            <param name="comparer">Argument comparer</param>
            <param name="threadSafe">If true - returns thread safe implementation</param>
            <typeparam name="TArg">Type of argument</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <returns>Memoized function</returns>
        </member>
        <member name="M:CodeJam.Algorithms.Memoize``2(System.Func{``0,``1},System.Boolean)">
            <summary>
            Caches function value for specific argument.
            </summary>
            <param name="func">Function to memoize.</param>
            <param name="threadSafe">If true - returns thread safe implementation</param>
            <typeparam name="TArg">Type of argument</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <returns>Memoized function</returns>
        </member>
        <member name="M:CodeJam.Algorithms.Memoize``3(System.Func{``0,``1,``2},System.Boolean)">
            <summary>
            Caches function value for specific arguments.
            </summary>
            <param name="func">Function to memoize.</param>
            <param name="threadSafe">If true - returns thread safe implementation</param>
            <typeparam name="TArg1">Type of argument 1</typeparam>
            <typeparam name="TArg2">Type of argument 2</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <returns>Memoized function</returns>
        </member>
        <member name="M:CodeJam.Algorithms.Memoize``4(System.Func{``0,``1,``2,``3},System.Boolean)">
            <summary>
            Caches function value for specific arguments.
            </summary>
            <param name="func">Function to memoize.</param>
            <param name="threadSafe">If true - returns thread safe implementation</param>
            <typeparam name="TArg1">Type of argument 1</typeparam>
            <typeparam name="TArg2">Type of argument 2</typeparam>
            <typeparam name="TArg3">Type of argument 3</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <returns>Memoized function</returns>
        </member>
        <member name="M:CodeJam.Algorithms.Memoize``5(System.Func{``0,``1,``2,``3,``4},System.Boolean)">
            <summary>
            Caches function value for specific arguments.
            </summary>
            <param name="func">Function to memoize.</param>
            <param name="threadSafe">If true - returns thread safe implementation</param>
            <typeparam name="TArg1">Type of argument 1</typeparam>
            <typeparam name="TArg2">Type of argument 2</typeparam>
            <typeparam name="TArg3">Type of argument 3</typeparam>
            <typeparam name="TArg4">Type of argument 4</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <returns>Memoized function</returns>
        </member>
        <member name="M:CodeJam.Algorithms.Memoize``6(System.Func{``0,``1,``2,``3,``4,``5},System.Boolean)">
            <summary>
            Caches function value for specific arguments.
            </summary>
            <param name="func">Function to memoize.</param>
            <param name="threadSafe">If true - returns thread safe implementation</param>
            <typeparam name="TArg1">Type of argument 1</typeparam>
            <typeparam name="TArg2">Type of argument 2</typeparam>
            <typeparam name="TArg3">Type of argument 3</typeparam>
            <typeparam name="TArg4">Type of argument 4</typeparam>
            <typeparam name="TArg5">Type of argument 5</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <returns>Memoized function</returns>
        </member>
        <member name="M:CodeJam.Algorithms.Memoize``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.Boolean)">
            <summary>
            Caches function value for specific arguments.
            </summary>
            <param name="func">Function to memoize.</param>
            <param name="threadSafe">If true - returns thread safe implementation</param>
            <typeparam name="TArg1">Type of argument 1</typeparam>
            <typeparam name="TArg2">Type of argument 2</typeparam>
            <typeparam name="TArg3">Type of argument 3</typeparam>
            <typeparam name="TArg4">Type of argument 4</typeparam>
            <typeparam name="TArg5">Type of argument 5</typeparam>
            <typeparam name="TArg6">Type of argument 6</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <returns>Memoized function</returns>
        </member>
        <member name="M:CodeJam.Algorithms.Memoize``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Boolean)">
            <summary>
            Caches function value for specific arguments.
            </summary>
            <param name="func">Function to memoize.</param>
            <param name="threadSafe">If true - returns thread safe implementation</param>
            <typeparam name="TArg1">Type of argument 1</typeparam>
            <typeparam name="TArg2">Type of argument 2</typeparam>
            <typeparam name="TArg3">Type of argument 3</typeparam>
            <typeparam name="TArg4">Type of argument 4</typeparam>
            <typeparam name="TArg5">Type of argument 5</typeparam>
            <typeparam name="TArg6">Type of argument 6</typeparam>
            <typeparam name="TArg7">Type of argument 7</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <returns>Memoized function</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Single},System.Single)">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] > value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value
            or endIndex if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBoundCore(System.Collections.Generic.IList{System.Single},System.Single,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value
            or endIndex if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] > value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value
            or endIndex if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBoundCore(System.Collections.Generic.IList{System.Double},System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value
            or endIndex if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan)">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] > value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value
            or endIndex if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBoundCore(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value
            or endIndex if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTime},System.DateTime)">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] > value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value
            or endIndex if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBoundCore(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value
            or endIndex if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset)">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] > value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value
            or endIndex if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBoundCore(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value
            or endIndex if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Single},System.Single)">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Single},System.Single,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value
            or endIndex if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.Double},System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value
            or endIndex if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan)">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.TimeSpan},System.TimeSpan,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value
            or endIndex if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTime},System.DateTime)">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTime},System.DateTime,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value
            or endIndex if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset)">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value
            or list.Count if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound(System.Collections.Generic.IList{System.DateTimeOffset},System.DateTimeOffset,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value
            or endIndex if no such i exists
            </summary>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1)">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value
            or list.Count if no such i exists
            </summary>
            <typeparam name="TElement">
            The list element type
            <remarks>Should implement IComparable&lt;TValue&gt;</remarks>
            </typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value
            or list.Count if no such i exists
            </summary>
            <typeparam name="TElement">The list element type
            <remarks>Should implement IComparable&lt;TValue&gt;</remarks>
            </typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value
            or endIndex if no such i exists
            </summary>
            <typeparam name="TElement">
            The list element type
            <remarks>Should implement IComparable&lt;TValue&gt;</remarks>
            </typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.PartitionPoint``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Returns the index i in the range [0, list.Count - 1] such that
            	predicate(list[j]) = true for j &lt; i
            	and predicate(list[k]) = false for k >= i
            or list.Count if no such i exists
            <remarks>The list should be partitioned according to the predicate</remarks>
            </summary>
            <typeparam name="T">The list element type</typeparam>
            <param name="list">The sorted list</param>
            <param name="predicate">The predicate</param>
            <returns>The partition point</returns>
        </member>
        <member name="M:CodeJam.Algorithms.PartitionPoint``1(System.Collections.Generic.IList{``0},System.Int32,System.Predicate{``0})">
            <summary>
            Returns the index i in the range [startIndex, list.Count - 1] such that
            	predicate(list[j]) = true for j &lt; i
            	and predicate(list[k]) = false for k >= i
            or list.Count if no such i exists
            <remarks>The list should be partitioned according to the predicate</remarks>
            </summary>
            <typeparam name="T">The list element type</typeparam>
            <param name="list">The sorted list</param>
            <param name="startIndex">The minimum index</param>
            <param name="predicate">The predicate</param>
            <returns>The partition point</returns>
        </member>
        <member name="M:CodeJam.Algorithms.PartitionPoint``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
            Returns the index i in the range [startIndex, endIndex - 1] such that
            	predicate(list[j]) = true for j &lt; i
            	and predicate(list[k]) = false for k >= i
            or endIndex if no such i exists
            <remarks>The list should be partitioned according to the predicate</remarks>
            </summary>
            <typeparam name="T">The list element type</typeparam>
            <param name="list">The sorted list</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <param name="predicate">The predicate</param>
            <returns>The partition point</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value
            or list.Count if no such i exists
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="comparer">The function with the Comparer&lt;T&gt;.Compare semantics</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Func{``0,``1,System.Int32})">
            <summary>
            Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value
            or list.Count if no such i exists
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="comparer">The function with the Comparer&lt;T&gt;.Compare semantics</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.LowerBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value
            or endIndex if no such i exists
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <param name="comparer">The function with the Comparer&lt;T&gt;.Compare semantics</param>
            <returns>The lower bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.ValidateIndicesRange(System.Int32,System.Int32,System.Int32)">
            <summary>Validates a range of indices of a list</summary>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound of the index (not included)</param>
            <param name="count">The number of elements in the list</param>
        </member>
        <member name="M:CodeJam.Algorithms.Swap``1(``0@,``0@)">
            <summary>
            Swaps two objects
            </summary>
            <typeparam name="T">Type of values</typeparam>
            <param name="value1">First value to swap.</param>
            <param name="value2">Second value to swap.</param>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1)">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] > value
            or list.Count if no such i exists
            </summary>
            <typeparam name="TElement">
            The list element type
            <remarks>Should implement IComparable&lt;TValue&gt;</remarks>
            </typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value
            or list.Count if no such i exists
            </summary>
            <typeparam name="TElement">
            The list element type
            <remarks>Should implement IComparable&lt;TValue&gt;</remarks>
            </typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value
            or endIndex if no such i exists
            </summary>
            <typeparam name="TElement">
            The list element type
            <remarks>Should implement IComparable&lt;TValue&gt;</remarks>
            </typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBoundCore``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32)">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value
            or endIndex if no such i exists
            </summary>
            <typeparam name="TElement">
            The list element type
            <remarks>Should implement IComparable&lt;TValue&gt;</remarks>
            </typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Func{``0,``1,System.Int32})">
            <summary>
            Returns the minimum index i in the range [0, list.Count - 1] such that list[i] > value
            or list.Count if no such i exists
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="comparer">The function with the Comparer&lt;T&gt;.Compare semantics</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Func{``0,``1,System.Int32})">
            <summary>
            Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value
            or list.Count if no such i exists
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="comparer">The function with the Comparer&lt;T&gt;.Compare semantics</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBound``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value
            or endIndex if no such i exists
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <param name="comparer">The function with the Comparer&lt;T&gt;.Compare semantics</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="M:CodeJam.Algorithms.UpperBoundCore``2(System.Collections.Generic.IList{``0},``1,System.Int32,System.Int32,System.Func{``0,``1,System.Int32})">
            <summary>
            Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value
            or endIndex if no such i exists
            </summary>
            <typeparam name="TElement">The list element type</typeparam>
            <typeparam name="TValue">The type of the value</typeparam>
            <param name="list">The sorted list</param>
            <param name="value">The value to compare</param>
            <param name="startIndex">The minimum index</param>
            <param name="endIndex">The upper bound for the index (not included)</param>
            <param name="comparer">The function with the Comparer&lt;T&gt;.Compare semantics</param>
            <returns>The upper bound for the value</returns>
        </member>
        <member name="T:CodeJam.HashCode">
            <summary>
            Hash code helper methods.
            </summary>
        </member>
        <member name="M:CodeJam.HashCode.Combine(System.Int32,System.Int32)">
            <summary>
            Combines hash codes.
            </summary>
            <param name="h1">Hash code 1</param>
            <param name="h2">Hash code 2</param>
            <returns>Combined hash code</returns>
        </member>
        <member name="M:CodeJam.HashCode.Combine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines hash codes.
            </summary>
            <param name="h1">Hash code 1</param>
            <param name="h2">Hash code 2</param>
            <param name="h3">Hash code 3</param>
            <returns>Combined hash code</returns>
        </member>
        <member name="M:CodeJam.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines hash codes.
            </summary>
            <param name="h1">Hash code 1</param>
            <param name="h2">Hash code 2</param>
            <param name="h3">Hash code 3</param>
            <param name="h4">Hash code 4</param>
            <returns>Combined hash code</returns>
        </member>
        <member name="M:CodeJam.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines hash codes.
            </summary>
            <param name="h1">Hash code 1</param>
            <param name="h2">Hash code 2</param>
            <param name="h3">Hash code 3</param>
            <param name="h4">Hash code 4</param>
            <param name="h5">Hash code 5</param>
            <returns>Combined hash code</returns>
        </member>
        <member name="M:CodeJam.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines hash codes.
            </summary>
            <param name="h1">Hash code 1</param>
            <param name="h2">Hash code 2</param>
            <param name="h3">Hash code 3</param>
            <param name="h4">Hash code 4</param>
            <param name="h5">Hash code 5</param>
            <param name="h6">Hash code 6</param>
            <returns>Combined hash code</returns>
        </member>
        <member name="M:CodeJam.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines hash codes.
            </summary>
            <param name="h1">Hash code 1</param>
            <param name="h2">Hash code 2</param>
            <param name="h3">Hash code 3</param>
            <param name="h4">Hash code 4</param>
            <param name="h5">Hash code 5</param>
            <param name="h6">Hash code 6</param>
            <param name="h7">Hash code 7</param>
            <returns>Combined hash code</returns>
        </member>
        <member name="M:CodeJam.HashCode.Combine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Combines hash codes.
            </summary>
            <param name="h1">Hash code 1</param>
            <param name="h2">Hash code 2</param>
            <param name="h3">Hash code 3</param>
            <param name="h4">Hash code 4</param>
            <param name="h5">Hash code 5</param>
            <param name="h6">Hash code 6</param>
            <param name="h7">Hash code 7</param>
            <param name="h8">Hash code 8</param>
            <returns>Combined hash code</returns>
        </member>
        <member name="M:CodeJam.HashCode.CombineValues``1(``0[])">
            <summary>
            Combines hash codes.
            </summary>
            <param name="values">The collection to combine hash codes.</param>
            <returns>
            Combined hash code.
            </returns>
        </member>
        <member name="M:CodeJam.HashCode.CombineValues``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Combines hash codes.
            </summary>
            <param name="values">The sequence to combine hash codes.</param>
            <returns>
            Combined hash code.
            </returns>
        </member>
        <member name="T:CodeJam.Arithmetic.Operators`1">
            <summary>
            Callbacks for common arithmetic actions.
            Look at OperatorsPerformanceTest to see why.
            </summary>
            <summary>
            Callbacks for common arithmetic actions.
            Look at OperatorsPerformanceTest to see why.
            </summary>
            <typeparam name="T">The type of the operands.</typeparam>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._unaryMinus">
            <summary>UnaryMinus operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.UnaryMinus">
            <summary>UnaryMinus operator.</summary>
            <value>The UnaryMinus operator.</value>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._areEqual">
            <summary>AreEqual operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.AreEqual">
            <summary>AreEqual operator.</summary>
            <value>The AreEqual operator.</value>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._areNotEqual">
            <summary>AreNotEqual operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.AreNotEqual">
            <summary>AreNotEqual operator.</summary>
            <value>The AreNotEqual operator.</value>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._greaterThan">
            <summary>GreaterThan operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.GreaterThan">
            <summary>GreaterThan operator.</summary>
            <value>The GreaterThan operator.</value>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._greaterThanOrEqual">
            <summary>GreaterThanOrEqual operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.GreaterThanOrEqual">
            <summary>GreaterThanOrEqual operator.</summary>
            <value>The GreaterThanOrEqual operator.</value>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._lessThan">
            <summary>LessThan operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.LessThan">
            <summary>LessThan operator.</summary>
            <value>The LessThan operator.</value>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._lessThanOrEqual">
            <summary>LessThanOrEqual operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.LessThanOrEqual">
            <summary>LessThanOrEqual operator.</summary>
            <value>The LessThanOrEqual operator.</value>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._plus">
            <summary>Plus operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.Plus">
            <summary>Plus operator.</summary>
            <value>The Plus operator.</value>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._minus">
            <summary>Minus operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.Minus">
            <summary>Minus operator.</summary>
            <value>The Minus operator.</value>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._mul">
            <summary>Mul operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.Mul">
            <summary>Mul operator.</summary>
            <value>The Mul operator.</value>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._div">
            <summary>Div operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.Div">
            <summary>Div operator.</summary>
            <value>The Div operator.</value>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._modulo">
            <summary>Modulo operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.Modulo">
            <summary>Modulo operator.</summary>
            <value>The Modulo operator.</value>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._xor">
            <summary>Xor operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.Xor">
            <summary>Xor operator.</summary>
            <value>The Xor operator.</value>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._bitwiseAnd">
            <summary>BitwiseAnd operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.BitwiseAnd">
            <summary>BitwiseAnd operator.</summary>
            <value>The BitwiseAnd operator.</value>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._bitwiseOr">
            <summary>BitwiseOr operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.BitwiseOr">
            <summary>BitwiseOr operator.</summary>
            <value>The BitwiseOr operator.</value>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._leftShift">
            <summary>LeftShift operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.LeftShift">
            <summary>LeftShift operator.</summary>
            <value>The LeftShift operator.</value>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._rightShift">
            <summary>RightShift operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.RightShift">
            <summary>RightShift operator.</summary>
            <value>The RightShift operator.</value>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.Compare">
            <summary>
            Comparison callback
            </summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.HasNegativeInfinity">
            <summary>
            Check for the negative infinity value.
            </summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.NegativeInfinity">
            <summary>
            Negative infinity value
            </summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.HasPositiveInfinity">
            <summary>
            Check for the positive infinity value.
            </summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.PositiveInfinity">
            <summary>
            Positive infinity value
            </summary>
        </member>
        <member name="F:CodeJam.Arithmetic.Operators`1._onesComplement">
            <summary>OnesComplement operator factory.</summary>
        </member>
        <member name="P:CodeJam.Arithmetic.Operators`1.OnesComplement">
            <summary>OnesComplement operator.</summary>
            <value>The OnesComplement operator.</value>
        </member>
        <member name="T:CodeJam.Arithmetic.OperatorsFactory">
            <summary>Helper class to emit operators logic</summary>
        </member>
        <member name="M:CodeJam.Arithmetic.OperatorsFactory.HasNegativeInfinity``1">
            <summary>Determines whether the type has negative infinity value.</summary>
            <typeparam name="T">The type to check.</typeparam>
            <returns><c>true</c> if the type has negative infinity value.</returns>
        </member>
        <member name="M:CodeJam.Arithmetic.OperatorsFactory.GetNegativeInfinity``1">
            <summary>Returns the negative infinity value.</summary>
            <typeparam name="T">The type to get value for.</typeparam>
            <exception cref="T:System.NotSupportedException">Thrown if the type has no corresponding value.</exception>
            <returns>
            The negative infinity value or <seealso cref="T:System.NotSupportedException"/> if the type has no corresponding value.
            </returns>
        </member>
        <member name="M:CodeJam.Arithmetic.OperatorsFactory.HasPositiveInfinity``1">
            <summary>Determines whether the type has positive infinity value.</summary>
            <typeparam name="T">The type to check.</typeparam>
            <returns><c>true</c> if the type has positive infinity value.</returns>
        </member>
        <member name="M:CodeJam.Arithmetic.OperatorsFactory.GetPositiveInfinity``1">
            <summary>Returns the positive infinity value.</summary>
            <typeparam name="T">The type to get value for.</typeparam>
            <exception cref="T:System.NotSupportedException">Thrown if the type has no corresponding value.</exception>
            <returns>
            The positive infinity value or <seealso cref="T:System.NotSupportedException"/> if the type has no corresponding value.
            </returns>
        </member>
        <member name="M:CodeJam.Arithmetic.OperatorsFactory.UnaryOperator``1(System.Linq.Expressions.ExpressionType)">
            <summary>Unary operator factory method.</summary>
            <typeparam name="T">The type of the operand</typeparam>
            <param name="operatorType">Type of the operator.</param>
            <returns>Callback for the operator</returns>
        </member>
        <member name="M:CodeJam.Arithmetic.OperatorsFactory.BinaryOperator``1(System.Linq.Expressions.ExpressionType)">
            <summary>Binary operator factory method.</summary>
            <typeparam name="T">The type of the operands</typeparam>
            <param name="operatorType">Type of the operator.</param>
            <returns>Callback for the operator</returns>
        </member>
        <member name="M:CodeJam.Arithmetic.OperatorsFactory.Comparison``1">
            <summary>Comparison factory method..</summary>
            <typeparam name="T">The type of the operands</typeparam>
            <returns>Callback for the comparison</returns>
            <exception cref="T:System.NotSupportedException">Type does not implement IComparable nor IComparable{T} interface</exception>
        </member>
        <member name="M:CodeJam.Arithmetic.OperatorsFactory.ComparisonOperator``1(System.Linq.Expressions.ExpressionType)">
            <summary>Compare operator factory method..</summary>
            <typeparam name="T">The type of the operands</typeparam>
            <param name="comparisonType">Type of the comparison operator.</param>
            <returns>Callback for the compare operator</returns>
        </member>
        <member name="M:CodeJam.Arithmetic.OperatorsFactory.IsFlagSetOperator``1">
            <summary>Emits code for (value &amp; flag) == flag check.</summary>
            <typeparam name="T">The type of the operands</typeparam>
            <returns>Callback for (value &amp; flag) == flag check</returns>
        </member>
        <member name="M:CodeJam.Arithmetic.OperatorsFactory.IsAnyFlagSetOperator``1">
            <summary>Emits code for (flag == 0) || ((value &amp; flag) != 0) check.</summary>
            <typeparam name="T">The type of the operands</typeparam>
            <returns>Callback for (flag == 0) || ((value &amp; flag) != 0) check</returns>
        </member>
        <member name="M:CodeJam.Arithmetic.OperatorsFactory.SetFlagOperator``1">
            <summary>Emits code for (value | flag) operator.</summary>
            <typeparam name="T">The type of the operands</typeparam>
            <returns>Callback for (value | flag) operator.</returns>
        </member>
        <member name="M:CodeJam.Arithmetic.OperatorsFactory.ClearFlagOperator``1">
            <summary>Emits code for (value &amp; ~flag) operator.</summary>
            <typeparam name="T">The type of the operands</typeparam>
            <returns>Callback for (value &amp; ~flag) operator.</returns>
        </member>
        <member name="T:CodeJam.Code">
            <summary>Assertions class.</summary>
            <summary>Assertions class.</summary>
        </member>
        <member name="M:CodeJam.Code.DisposedIf``1(System.Boolean,``0)">
            <summary>Assertion for object disposal</summary>
            <typeparam name="TDisposable">The type of the disposable.</typeparam>
            <param name="disposed">Dispose condition.</param>
            <param name="thisReference">The this reference.</param>
        </member>
        <member name="M:CodeJam.Code.DisposedIf``1(System.Boolean,``0,System.String)">
            <summary>Assertion for object disposal</summary>
            <typeparam name="TDisposable">The type of the disposable.</typeparam>
            <param name="disposed">Dispose condition.</param>
            <param name="thisReference">The this reference.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CodeJam.Code.DisposedIf``1(System.Boolean,``0,System.String,System.Object[])">
            <summary>Assertion for object disposal</summary>
            <typeparam name="TDisposable">The type of the disposable.</typeparam>
            <param name="disposed">Dispose condition.</param>
            <param name="thisReference">The this reference.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:CodeJam.Code.DisposedIfNull``2(``0,``1)">
            <summary>Assertion for object disposal</summary>
            <typeparam name="TResource">The type of the resource.</typeparam>
            <typeparam name="TDisposable">The type of the disposable.</typeparam>
            <param name="resource">The resource. Should be not null if the object is not disposed.</param>
            <param name="thisReference">The this reference.</param>
        </member>
        <member name="M:CodeJam.Code.DisposedIfNull``2(``0,``1,System.String)">
            <summary>Assertion for object disposal</summary>
            <typeparam name="TResource">The type of the resource.</typeparam>
            <typeparam name="TDisposable">The type of the disposable.</typeparam>
            <param name="resource">The resource. Should be not null if the object is not disposed.</param>
            <param name="thisReference">The this reference.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CodeJam.Code.DisposedIfNull``2(``0,``1,System.String,System.Object[])">
            <summary>Assertion for object disposal</summary>
            <typeparam name="TResource">The type of the resource.</typeparam>
            <typeparam name="TDisposable">The type of the disposable.</typeparam>
            <param name="resource">The resource. Should be not null if the object is not disposed.</param>
            <param name="thisReference">The this reference.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:CodeJam.Code.NotNull``1(``0,System.String)">
            <summary>Ensures that <paramref name="arg"/> != <c>null</c></summary>
            <typeparam name="T">Type of the value. Auto-inferred in most cases</typeparam>
            <param name="arg">The argument.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.Code.ItemNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Ensures that all items in <paramref name="arg"/> != <c>null</c></summary>
            <typeparam name="T">Type of the value. Auto-inferred in most cases</typeparam>
            <param name="arg">The argument.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.Code.NotNullAndItemNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Ensures that <paramref name="arg"/> and its all items != <c>null</c></summary>
            <typeparam name="T">Type of the value. Auto-inferred in most cases</typeparam>
            <param name="arg">The argument.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.Code.NotNull``1(System.Nullable{``0},System.String)">
            <summary>Ensures that <paramref name="arg"/> != <c>null</c></summary>
            <typeparam name="T">Type of the value. Auto-inferred in most cases</typeparam>
            <param name="arg">The argument.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.Code.NotNullNorEmpty(System.String,System.String)">
            <summary>Ensures that <paramref name="arg"/> is not null nor empty</summary>
            <param name="arg">The argument.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.Code.NotNullNorWhiteSpace(System.String,System.String)">
            <summary>Ensures that <paramref name="arg"/> is not null nor white space</summary>
            <param name="arg">The argument.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.Code.AssertArgument(System.Boolean,System.String,System.String)">
            <summary>Assertion for the argument value</summary>
            <param name="condition">The condition to check</param>
            <param name="argName">Name of the argument.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CodeJam.Code.AssertArgument(System.Boolean,System.String,System.String,System.Object[])">
            <summary>Assertion for the argument value</summary>
            <param name="condition">The condition to check</param>
            <param name="argName">Name of the argument.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:CodeJam.Code.InRange(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>Assertion for the argument in range</summary>
            <param name="value">The value.</param>
            <param name="argName">Name of the argument.</param>
            <param name="fromValue">From value (inclusive).</param>
            <param name="toValue">To value (inclusive).</param>
        </member>
        <member name="M:CodeJam.Code.InRange``1(``0,System.String,``0,``0)">
            <summary>Assertion for the argument in range</summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="value">The value.</param>
            <param name="argName">Name of the argument.</param>
            <param name="fromValue">From value (inclusive).</param>
            <param name="toValue">To value (inclusive).</param>
        </member>
        <member name="M:CodeJam.Code.ValidCount(System.Int32,System.String)">
            <summary>Asserts if the passed value is not a valid count.</summary>
            <param name="count">The count value.</param>
            <param name="argName">The name of the argument.</param>
        </member>
        <member name="M:CodeJam.Code.ValidCount(System.Int32,System.String,System.Int32)">
            <summary>Asserts if the passed value is not a valid count.</summary>
            <param name="count">The count value.</param>
            <param name="argName">The name of the argument.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:CodeJam.Code.ValidIndex(System.Int32,System.String)">
            <summary>Assertion for index in range</summary>
            <param name="index">The index.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.Code.ValidIndex(System.Int32,System.String,System.Int32)">
            <summary>Assertion for index in range</summary>
            <param name="index">The index.</param>
            <param name="argName">Name of the argument.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:CodeJam.Code.ValidIndexPair(System.Int32,System.String,System.Int32,System.String,System.Int32)">
            <summary>Assertion for from-to index pair</summary>
            <param name="fromIndex">From index.</param>
            <param name="fromIndexName">Name of from index.</param>
            <param name="toIndex">To index.</param>
            <param name="toIndexName">Name of to index.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:CodeJam.Code.ValidIndexAndCount(System.Int32,System.String,System.Int32,System.String,System.Int32)">
            <summary>Assertion for startIndex-count pair</summary>
            <param name="startIndex">The start index.</param>
            <param name="startIndexName">Start name of the index.</param>
            <param name="count">The count.</param>
            <param name="countName">Name of the count.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:CodeJam.Code.AssertState(System.Boolean,System.String)">
            <summary>State assertion</summary>
            <param name="condition">The condition to check</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CodeJam.Code.AssertState(System.Boolean,System.String,System.Object[])">
            <summary>State assertion</summary>
            <param name="condition">The condition to check</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:CodeJam.Code.BugIf(System.Boolean,System.String)">
            <summary>Asserts if the given condition is satisfied.</summary>
            <param name="condition">The condition to check.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CodeJam.Code.BugIf(System.Boolean,System.String,System.Object[])">
            <summary>Asserts if the given condition is satisfied.</summary>
            <param name="condition">The condition to check.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:CodeJam.DebugEnumCode">
            <summary>Enum assertions class.</summary>
        </member>
        <member name="M:CodeJam.DebugEnumCode.Defined``1(``0,System.String)">
            <summary>Asserts that specified argument enum value is defined.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The argument.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.DebugEnumCode.FlagsDefined``1(``0,System.String)">
            <summary>Asserts that all bits of the flags combination are defined.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="argFlags">The bitwise combinations of the flags to check.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.DebugEnumCode.FlagSet``1(``0,System.String,``0)">
            <summary>Asserts that the specified argument flag is set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The argument.</param>
            <param name="argName">Name of the argument.</param>
            <param name="flag">The flag.</param>
        </member>
        <member name="M:CodeJam.DebugEnumCode.AnyFlagUnset``1(``0,System.String,``0)">
            <summary>Asserts that any bit from specified argument flag is not set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The argument.</param>
            <param name="argName">Name of the argument.</param>
            <param name="flags">The bitwise combinations of the flags.</param>
        </member>
        <member name="M:CodeJam.DebugEnumCode.AnyFlagSet``1(``0,System.String,``0)">
            <summary>Asserts that any bit from specified argument flag is set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The argument.</param>
            <param name="argName">Name of the argument.</param>
            <param name="flags">The bitwise combinations of the flags.</param>
        </member>
        <member name="M:CodeJam.DebugEnumCode.FlagUnset``1(``0,System.String,``0)">
            <summary>Asserts that the specified argument flag is not set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The argument.</param>
            <param name="argName">Name of the argument.</param>
            <param name="flag">The flag.</param>
        </member>
        <member name="M:CodeJam.DebugEnumCode.StateFlagSet``1(``0,``0,System.String)">
            <summary>Asserts that the specified state flag is set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CodeJam.DebugEnumCode.StateFlagSet``1(``0,``0,System.String,System.Object[])">
            <summary>Asserts that the specified state flag is set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:CodeJam.DebugEnumCode.AnyStateFlagUnset``1(``0,``0,System.String)">
            <summary>Asserts that any bit from specified state flag is not set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The value.</param>
            <param name="flags">The bitwise combinations of the flags.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CodeJam.DebugEnumCode.AnyStateFlagUnset``1(``0,``0,System.String,System.Object[])">
            <summary>Asserts that any bit from specified state flag is not set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The value.</param>
            <param name="flags">The bitwise combinations of the flags.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:CodeJam.DebugEnumCode.AnyStateFlagSet``1(``0,``0,System.String)">
            <summary>Asserts that any bit from specified state flag is set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The value.</param>
            <param name="flags">The bitwise combinations of the flags.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CodeJam.DebugEnumCode.AnyStateFlagSet``1(``0,``0,System.String,System.Object[])">
            <summary>Asserts that any bit from specified state flag is set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The value.</param>
            <param name="flags">The bitwise combinations of the flags.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:CodeJam.DebugEnumCode.StateFlagUnset``1(``0,``0,System.String)">
            <summary>Asserts that the specified state flag is not set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CodeJam.DebugEnumCode.StateFlagUnset``1(``0,``0,System.String,System.Object[])">
            <summary>Asserts that the specified state flag is not set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:CodeJam.EnumCodeExceptions">
            <summary>Enum exception factory class</summary>
        </member>
        <member name="M:CodeJam.EnumCodeExceptions.ArgumentNotDefinedException``1(System.String,``0)">
            <summary>Creates <seealso cref="T:System.ArgumentOutOfRangeException"/> for undefined enum value.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="argumentName">Name of the argument.</param>
            <param name="value">The value.</param>
            <returns>Initialized instance of <seealso cref="T:System.ArgumentOutOfRangeException"/></returns>
        </member>
        <member name="M:CodeJam.EnumCodeExceptions.ArgumentFlagSet``1(System.String,``0,``0)">
            <summary>Creates <seealso cref="T:System.ArgumentException"/> for flag is set case.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="argumentName">Name of the argument.</param>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <returns>Initialized instance of <seealso cref="T:System.ArgumentException"/></returns>
        </member>
        <member name="M:CodeJam.EnumCodeExceptions.ArgumentAnyFlagUnset``1(System.String,``0,``0)">
            <summary>Creates <seealso cref="T:System.ArgumentException"/> for any bit from flag is not set case.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="argumentName">Name of the argument.</param>
            <param name="value">The value.</param>
            <param name="flags">The bitwise combinations of the flags.</param>
            <returns>Initialized instance of <seealso cref="T:System.ArgumentException"/></returns>
        </member>
        <member name="M:CodeJam.EnumCodeExceptions.ArgumentAnyFlagSet``1(System.String,``0,``0)">
            <summary>Creates <seealso cref="T:System.ArgumentException"/> for any bit from flag is set case.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="argumentName">Name of the argument.</param>
            <param name="value">The value.</param>
            <param name="flags">The bitwise combinations of the flags.</param>
            <returns>Initialized instance of <seealso cref="T:System.ArgumentException"/></returns>
        </member>
        <member name="M:CodeJam.EnumCodeExceptions.ArgumentFlagUnset``1(System.String,``0,``0)">
            <summary>Creates <seealso cref="T:System.ArgumentException"/> for flag is not set case.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="argumentName">Name of the argument.</param>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <returns>Initialized instance of <seealso cref="T:System.ArgumentException"/></returns>
        </member>
        <member name="T:CodeJam.CodeExceptions">
            <summary>Exception factory class</summary>
        </member>
        <member name="P:CodeJam.CodeExceptions.BreakOnException">
            <summary>
            If true, breaks execution if debugger is attached and assertion is failed.
            Enabled by default.
            </summary>
            <value><c>true</c> if the execution will break on exception creation; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:CodeJam.CodeExceptions.BreakIfAttached">
            <summary>BreaksExecution if debugger attached</summary>
        </member>
        <member name="M:CodeJam.CodeExceptions.FormatMessage(System.String,System.Object[])">
            <summary>
            Formats message or returns <paramref name="messageFormat"/> as it is if <paramref name="args"/> are null or empty
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="P:CodeJam.CodeExceptions.CodeTraceSource">
            <summary>Returns trace source for code exceptions.</summary>
            <value>The code trace source.</value>
        </member>
        <member name="M:CodeJam.CodeExceptions.LogToCodeTraceSourceBeforeThrow``1(``0)">
            <summary>Logs the exception that will be thrown to the <see cref="P:CodeJam.CodeExceptions.CodeTraceSource"/>.</summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="exception">The exception.</param>
            <returns>The original exception</returns>
        </member>
        <member name="M:CodeJam.CodeExceptions.LogToCodeTraceSourceCatched``1(``0)">
            <summary>Logs the catched exception to the <see cref="P:CodeJam.CodeExceptions.CodeTraceSource"/>.</summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="exception">The exception.</param>
            <returns>The original exception</returns>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentNull(System.String)">
            <summary>Creates <seealso cref="T:System.ArgumentNullException"/>.</summary>
            <param name="argumentName">Name of the argument.</param>
            <returns>Initialized instance of <seealso cref="T:System.ArgumentNullException"/></returns>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentItemNull(System.String)">
            <summary>Creates <seealso cref="T:System.ArgumentNullException"/>.</summary>
            <param name="argumentName">Name of the argument.</param>
            <returns>Initialized instance of <seealso cref="T:System.ArgumentNullException"/></returns>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentNullOrEmpty(System.String)">
            <summary>Creates <seealso cref="T:System.ArgumentException"/> for empty string</summary>
            <param name="argumentName">Name of the argument.</param>
            <returns>Initialized instance of <seealso cref="T:System.ArgumentException"/></returns>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentNullOrWhiteSpace(System.String)">
            <summary>Creates <seealso cref="T:System.ArgumentException"/> for empty (or whitespace) string</summary>
            <param name="argumentName">Name of the argument.</param>
            <returns>Initialized instance of <seealso cref="T:System.ArgumentException"/></returns>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentOutOfRange(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Creates <seealso cref="T:System.ArgumentOutOfRangeException"/></summary>
            <param name="argumentName">Name of the argument.</param>
            <param name="value">The value.</param>
            <param name="fromValue">From value (inclusive).</param>
            <param name="toValue">To value (inclusive).</param>
            <returns>Initialized instance of <seealso cref="T:System.ArgumentOutOfRangeException"/></returns>
        </member>
        <member name="M:CodeJam.CodeExceptions.ArgumentOutOfRange``1(System.String,``0,``0,``0)">
            <summary>Creates <seealso cref="T:System.ArgumentOutOfRangeException"/></summary>
            <typeparam name="T"></typeparam>
            <param name="argumentName">Name of the argument.</param>
            <param name="value">The value.</param>
            <param name="fromValue">From value (inclusive).</param>
            <param name="toValue">To value (inclusive).</param>
            <returns>Initialized instance of <seealso cref="T:System.ArgumentOutOfRangeException"/></returns>
        </member>
        <member name="M:CodeJam.CodeExceptions.IndexOutOfRange(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>Creates <seealso cref="T:System.IndexOutOfRangeException"/></summary>
            <param name="argumentName">Name of the argument.</param>
            <param name="value">The value.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns>Initialized instance of <seealso cref="T:System.IndexOutOfRangeException"/></returns>
        </member>
        <member name="M:CodeJam.CodeExceptions.Argument(System.String,System.String,System.Object[])">
            <summary>Creates <seealso cref="T:System.ArgumentException"/></summary>
            <param name="argumentName">Name of the argument.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>Initialized instance of <seealso cref="T:System.ArgumentException"/></returns>
        </member>
        <member name="M:CodeJam.CodeExceptions.InvalidOperation(System.String,System.Object[])">
            <summary>Creates <seealso cref="T:System.InvalidOperationException"/></summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>Initialized instance of <seealso cref="T:System.InvalidOperationException"/></returns>
        </member>
        <member name="M:CodeJam.CodeExceptions.UnexpectedArgumentValue``1(System.String,``0)">
            <summary>
            Creates <seealso cref="T:System.ArgumentOutOfRangeException"/>.
            Used to be thrown from the default: switch clause
            </summary>
            <typeparam name="T">The type of the value. Auto-inferred.</typeparam>
            <param name="argumentName">Name of the argument.</param>
            <param name="value">The value.</param>
            <returns>Initialized instance of <seealso cref="T:System.ArgumentOutOfRangeException"/></returns>
        </member>
        <member name="M:CodeJam.CodeExceptions.UnexpectedArgumentValue``1(System.String,``0,System.String,System.Object[])">
            <summary>
            Creates <seealso cref="T:System.ArgumentOutOfRangeException"/>.
            Used to be thrown from default: switch clause
            </summary>
            <typeparam name="T">The type of the value. Auto-inferred.</typeparam>
            <param name="argumentName">Name of the argument.</param>
            <param name="value">The value.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>Initialized instance of <seealso cref="T:System.ArgumentOutOfRangeException"/></returns>
        </member>
        <member name="M:CodeJam.CodeExceptions.UnexpectedValue``1(``0)">
            <summary>
            Creates <seealso cref="T:System.InvalidOperationException"/>.
            Used to be thrown from the default: switch clause
            </summary>
            <typeparam name="T">The type of the value. Auto-inferred.</typeparam>
            <param name="value">The value.</param>
            <returns>Initialized instance of <seealso cref="T:System.InvalidOperationException"/></returns>
        </member>
        <member name="M:CodeJam.CodeExceptions.UnexpectedValue(System.String,System.Object[])">
            <summary>
            Creates <seealso cref="T:System.InvalidOperationException"/>.
            Used to be thrown from default: switch clause
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>Initialized instance of <seealso cref="T:System.InvalidOperationException"/></returns>
        </member>
        <member name="M:CodeJam.CodeExceptions.ObjectDisposed(System.Type)">
            <summary>Throw this if the object is disposed.</summary>
            <param name="typeofDisposedObject">The typeof disposed object.</param>
            <returns>Initialized instance of <seealso cref="T:System.ObjectDisposedException"/></returns>
        </member>
        <member name="M:CodeJam.CodeExceptions.ObjectDisposed(System.Type,System.String,System.Object[])">
            <summary>Throw this if the object is disposed.</summary>
            <param name="typeofDisposedObject">The typeof disposed object.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>Initialized instance of <seealso cref="T:System.ObjectDisposedException"/></returns>
        </member>
        <member name="M:CodeJam.CodeExceptions.Unreachable(System.String,System.Object[])">
            <summary>Used to be thrown in places expected to be unreachable.</summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
            <returns>Initialized instance of <seealso cref="T:System.ObjectDisposedException"/></returns>
        </member>
        <member name="T:CodeJam.DebugCode">
            <summary>Debug-time assertions class. Common constants</summary>
            <summary>Assertions class.</summary>
        </member>
        <member name="F:CodeJam.DebugCode.DebugCondition">
            <summary>Conditional symbol for debug builds.</summary>
        </member>
        <member name="M:CodeJam.DebugCode.NotNull``1(``0,System.String)">
            <summary>Ensures that <paramref name="arg"/> != <c>null</c></summary>
            <typeparam name="T">Type of the value. Auto-inferred in most cases</typeparam>
            <param name="arg">The argument.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.DebugCode.ItemNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Ensures that all items in <paramref name="arg"/> != <c>null</c></summary>
            <typeparam name="T">Type of the value. Auto-inferred in most cases</typeparam>
            <param name="arg">The argument.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.DebugCode.NotNullAndItemNotNull``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>Ensures that <paramref name="arg"/> and its all items != <c>null</c></summary>
            <typeparam name="T">Type of the value. Auto-inferred in most cases</typeparam>
            <param name="arg">The argument.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.DebugCode.NotNull``1(System.Nullable{``0},System.String)">
            <summary>Ensures that <paramref name="arg"/> != <c>null</c></summary>
            <typeparam name="T">Type of the value. Auto-inferred in most cases</typeparam>
            <param name="arg">The argument.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.DebugCode.NotNullNorEmpty(System.String,System.String)">
            <summary>Ensures that <paramref name="arg"/> is not null nor empty</summary>
            <param name="arg">The argument.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.DebugCode.NotNullNorWhiteSpace(System.String,System.String)">
            <summary>Ensures that <paramref name="arg"/> is not null nor white space</summary>
            <param name="arg">The argument.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.DebugCode.AssertArgument(System.Boolean,System.String,System.String)">
            <summary>Assertion for the argument value</summary>
            <param name="condition">The condition to check</param>
            <param name="argName">Name of the argument.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CodeJam.DebugCode.AssertArgument(System.Boolean,System.String,System.String,System.Object[])">
            <summary>Assertion for the argument value</summary>
            <param name="condition">The condition to check</param>
            <param name="argName">Name of the argument.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:CodeJam.DebugCode.InRange(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>Assertion for the argument in range</summary>
            <param name="value">The value.</param>
            <param name="argName">Name of the argument.</param>
            <param name="fromValue">From value (inclusive).</param>
            <param name="toValue">To value (inclusive).</param>
        </member>
        <member name="M:CodeJam.DebugCode.InRange``1(``0,System.String,``0,``0)">
            <summary>Assertion for the argument in range</summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="value">The value.</param>
            <param name="argName">Name of the argument.</param>
            <param name="fromValue">From value (inclusive).</param>
            <param name="toValue">To value (inclusive).</param>
        </member>
        <member name="M:CodeJam.DebugCode.ValidCount(System.Int32,System.String)">
            <summary>Asserts if the passed value is not a valid count.</summary>
            <param name="count">The count value.</param>
            <param name="argName">The name of the argument.</param>
        </member>
        <member name="M:CodeJam.DebugCode.ValidCount(System.Int32,System.String,System.Int32)">
            <summary>Asserts if the passed value is not a valid count.</summary>
            <param name="count">The count value.</param>
            <param name="argName">The name of the argument.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:CodeJam.DebugCode.ValidIndex(System.Int32,System.String)">
            <summary>Assertion for index in range</summary>
            <param name="index">The index.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.DebugCode.ValidIndex(System.Int32,System.String,System.Int32)">
            <summary>Assertion for index in range</summary>
            <param name="index">The index.</param>
            <param name="argName">Name of the argument.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:CodeJam.DebugCode.ValidIndexPair(System.Int32,System.String,System.Int32,System.String,System.Int32)">
            <summary>Assertion for from-to index pair</summary>
            <param name="fromIndex">From index.</param>
            <param name="fromIndexName">Name of from index.</param>
            <param name="toIndex">To index.</param>
            <param name="toIndexName">Name of to index.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:CodeJam.DebugCode.ValidIndexAndCount(System.Int32,System.String,System.Int32,System.String,System.Int32)">
            <summary>Assertion for startIndex-count pair</summary>
            <param name="startIndex">The start index.</param>
            <param name="startIndexName">Start name of the index.</param>
            <param name="count">The count.</param>
            <param name="countName">Name of the count.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:CodeJam.DebugCode.AssertState(System.Boolean,System.String)">
            <summary>State assertion</summary>
            <param name="condition">The condition to check</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CodeJam.DebugCode.AssertState(System.Boolean,System.String,System.Object[])">
            <summary>State assertion</summary>
            <param name="condition">The condition to check</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:CodeJam.DebugCode.BugIf(System.Boolean,System.String)">
            <summary>Asserts if the given condition is satisfied.</summary>
            <param name="condition">The condition to check.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CodeJam.DebugCode.BugIf(System.Boolean,System.String,System.Object[])">
            <summary>Asserts if the given condition is satisfied.</summary>
            <param name="condition">The condition to check.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:CodeJam.Collections.DictionaryExtensions">
            <summary>
            Extensions for <see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns value associated with <paramref name="key"/>, or default(TValue) if key does not exists in
            <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or default value if <paramref name="key"/> does not exists
            in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns value associated with <paramref name="key"/>, or <paramref name="defaultValue"/> if key does not exists
            in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">Default value.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or <paramref name="defaultValue"/> if <paramref name="key"/>
            does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``3(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1,``2})">
            <summary>
            Returns value associated with <paramref name="key"/>, or default value if key does not exists
            in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">Result type.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="resultSelector">Function to select result.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or default value if <paramref name="key"/>
            does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``3(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1,``2},``2)">
            <summary>
            Returns value associated with <paramref name="key"/>, or <paramref name="defaultValue"/> if key does not exists
            in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">Result type.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="resultSelector">Function to select result.</param>
            <param name="defaultValue">Default value.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or <paramref name="defaultValue"/> if <paramref name="key"/>
            does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Returns value associated with <paramref name="key"/>, or value returned by <paramref name="defaultValueFactory"/>
            if key does not exists in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValueFactory">Function to return default value.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or value returned by <paramref name="defaultValueFactory"/>
            if <paramref name="key"/> does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``3(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1,``2},System.Func{``0,``2})">
            <summary>
            Returns value associated with <paramref name="key"/>, or value returned by <paramref name="defaultValueFactory"/>
            if key does not exists in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">Result type.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValueFactory">Function to return default value.</param>
            <param name="resultSelector">Function to select result.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or value returned by <paramref name="defaultValueFactory"/>
            if <paramref name="key"/> does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Returns value associated with <paramref name="key"/>, or default(TValue) if key does not exists in
            <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or default value if <paramref name="key"/> does not exists
            in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
            <summary>
            Returns value associated with <paramref name="key"/>, or <paramref name="defaultValue"/> if key does not exists
            in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">Default value.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or <paramref name="defaultValue"/> if <paramref name="key"/>
            does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``3(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,System.Func{``0,``1,``2})">
            <summary>
            Returns value associated with <paramref name="key"/>, or default value if key does not exists
            in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">Result type.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="resultSelector">Function to select result.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or default value if <paramref name="key"/>
            does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``3(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,System.Func{``0,``1,``2},``2)">
            <summary>
            Returns value associated with <paramref name="key"/>, or <paramref name="defaultValue"/> if key does not exists
            in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">Result type.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="resultSelector">Function to select result.</param>
            <param name="defaultValue">Default value.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or <paramref name="defaultValue"/> if <paramref name="key"/>
            does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Returns value associated with <paramref name="key"/>, or value returned by <paramref name="defaultValueFactory"/>
            if key does not exists in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValueFactory">Function to return default value.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or value returned by <paramref name="defaultValueFactory"/>
            if <paramref name="key"/> does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``3(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,System.Func{``0,``1,``2},System.Func{``0,``2})">
            <summary>
            Returns value associated with <paramref name="key"/>, or value returned by <paramref name="defaultValueFactory"/>
            if key does not exists in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">Result type.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValueFactory">Function to return default value.</param>
            <param name="resultSelector">Function to select result.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or value returned by <paramref name="defaultValueFactory"/>
            if <paramref name="key"/> does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Returns value associated with <paramref name="key"/>, or default(TValue) if key does not exists in
            <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or default value if <paramref name="key"/> does not exists
            in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            Returns value associated with <paramref name="key"/>, or <paramref name="defaultValue"/> if key does not exists
            in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">Default value.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or <paramref name="defaultValue"/> if <paramref name="key"/>
            does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``3(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1,``2})">
            <summary>
            Returns value associated with <paramref name="key"/>, or default value if key does not exists
            in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">Result type.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="resultSelector">Function to select result.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or default value if <paramref name="key"/>
            does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``3(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1,``2},``2)">
            <summary>
            Returns value associated with <paramref name="key"/>, or <paramref name="defaultValue"/> if key does not exists
            in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">Result type.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="resultSelector">Function to select result.</param>
            <param name="defaultValue">Default value.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or <paramref name="defaultValue"/> if <paramref name="key"/>
            does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Returns value associated with <paramref name="key"/>, or value returned by <paramref name="defaultValueFactory"/>
            if key does not exists in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValueFactory">Function to return default value.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or value returned by <paramref name="defaultValueFactory"/>
            if <paramref name="key"/> does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``3(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1,``2},System.Func{``0,``2})">
            <summary>
            Returns value associated with <paramref name="key"/>, or value returned by <paramref name="defaultValueFactory"/>
            if key does not exists in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">Result type.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValueFactory">Function to return default value.</param>
            <param name="resultSelector">Function to select result.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or value returned by <paramref name="defaultValueFactory"/>
            if <paramref name="key"/> does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            Returns value associated with <paramref name="key"/>, or default(TValue) if key does not exists in
            <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or default value if <paramref name="key"/> does not exists
            in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,``1)">
            <summary>
            Returns value associated with <paramref name="key"/>, or <paramref name="defaultValue"/> if key does not exists
            in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">Default value.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or <paramref name="defaultValue"/> if <paramref name="key"/>
            does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``3(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``0,``1,``2})">
            <summary>
            Returns value associated with <paramref name="key"/>, or default value if key does not exists
            in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">Result type.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="resultSelector">Function to select result.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or default value if <paramref name="key"/>
            does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``3(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``0,``1,``2},``2)">
            <summary>
            Returns value associated with <paramref name="key"/>, or <paramref name="defaultValue"/> if key does not exists
            in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">Result type.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="resultSelector">Function to select result.</param>
            <param name="defaultValue">Default value.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or <paramref name="defaultValue"/> if <paramref name="key"/>
            does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Returns value associated with <paramref name="key"/>, or value returned by <paramref name="defaultValueFactory"/>
            if key does not exists in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValueFactory">Function to return default value.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or value returned by <paramref name="defaultValueFactory"/>
            if <paramref name="key"/> does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetValueOrDefault``3(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``0,``1,``2},System.Func{``0,``2})">
            <summary>
            Returns value associated with <paramref name="key"/>, or value returned by <paramref name="defaultValueFactory"/>
            if key does not exists in <paramref name="dictionary"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResult">Result type.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValueFactory">Function to return default value.</param>
            <param name="resultSelector">Function to select result.</param>
            <returns>
            Value, associated with the <paramref name="key"/>, or value returned by <paramref name="defaultValueFactory"/>
            if <paramref name="key"/> does not exists in <paramref name="dictionary"/>
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
              Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key of the element to add.</param>
            <returns>
              The value for the key. This will be either the existing value for the key if the key is already in the
              dictionary, or the new value if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
              Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key of the element to add.</param>
            <param name="value">the value to be added, if the key does not already exist</param>
            <returns>
              The value for the key. This will be either the existing value for the key if the key is already in the
              dictionary, or the new value if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
              Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key</param>
            <returns>
              The value for the key. This will be either the existing value for the key if the key is already in the
              dictionary, or the new value if the key was not in the dictionary.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})">
            <summary>
              Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist,
              or updates a key/value pair <see cref="T:System.Collections.Generic.IDictionary`2"/> by using the specified function
              if the key already exists.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key to be added or whose value should be updated</param>
            <param name="addValue">The value to be added for an absent key</param>
            <param name="updateValueFactory">
            The function used to generate a new value for an existing key based on the key's existing value
            </param>
            <returns>
              The new value for the key. This will be either be addValue (if the key was absent) or the result of
              updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <summary>
              Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist,
              or updates a key/value pair <see cref="T:System.Collections.Generic.IDictionary`2"/> by using the specified function
              if the key already exists.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key to be added or whose value should be updated</param>
            <param name="addValueFactory">The function used to generate a value for an absent key</param>
            <param name="updateValueFactory">
            The function used to generate a new value for an existing key based on the key's existing value
            </param>
            <returns>
              The new value for the key. This will be either be addValue (if the key was absent) or the result of
              updateValueFactory (if the key was present).
            </returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
              Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist,
              or updates a key/value pair <see cref="T:System.Collections.Generic.IDictionary`2"/> by using the specified function
              if the key already exists.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key to be added or whose value should be updated</param>
            <param name="valueFactory">The function used to generate a value.</param>
            <returns>The new value for the key.</returns>
        </member>
        <member name="M:CodeJam.Collections.DictionaryExtensions.AddOrUpdate``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
              Adds a key/value pair to the <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> if the key does not already exist,
              or updates a key/value pair <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> by using the specified function
              if the key already exists.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key to be added or whose value should be updated</param>
            <param name="valueFactory">The function used to generate a value.</param>
            <returns>The new value for the key.</returns>
        </member>
        <member name="T:CodeJam.Collections.EnumerableExtensions">
            <summary>
            Extensions for <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},``0)">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to aggregate over.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="defaultValue">Default value returned if the source is empty.</param>
            <returns>The final accumulator value.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},``1)">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="defaultValue">Default value returned if the source is empty.</param>
            <returns>The final accumulator value.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2},``2)">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
            <param name="defaultValue">Default value returned if the source is empty.</param>
            <returns>The final accumulator value.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0},System.Func{``0})">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to aggregate over.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="defaultSelector">A function to select default value if the source is empty.</param>
            <returns>The final accumulator value.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1})">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="defaultSelector">A function to select default value if the source is empty.</param>
            <returns>The final accumulator value.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.AggregateOrDefault``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2},System.Func{``2})">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
            <typeparam name="TResult">The type of the resulting value.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to aggregate over.</param>
            <param name="seed">The initial accumulator value.</param>
            <param name="func">An accumulator function to be invoked on each element.</param>
            <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
            <param name="defaultSelector">A function to select default value if the source is empty.</param>
            <returns>The final accumulator value.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.WithIndex``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Associates an index to each element of the source sequence.
            </summary>
            <param name="source">The input sequence.</param>
            <returns>
            A sequence of elements paired with their index in the sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Extracts <paramref name="pageSize"/> elements from a sequence at a particular one-based page number.
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence from which to page.</param>
            <param name="pageIndex">The one-based page number.</param>
            <param name="pageSize">The size of the page.</param>
            <returns>
            A new sequence containing elements are at the specified <paramref name="pageIndex"/> from the source sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Extracts <paramref name="count"/> elements from a sequence at a particular zero-based starting index.
            </summary>
            <remarks>
            If the starting position or count specified result in slice extending past the end of the sequence,
            it will return all elements up to that point. There is no guarantee that the resulting sequence will
            contain the number of elements requested - it may have anywhere from 0 to <paramref name="count"/>.<br/>
            This method is implemented in an optimized manner for any sequence implementing <c>IList{T}</c>.<br/>
            The result of Slice() is identical to: <c>sequence.Skip(startIndex).Take(count)</c>.
            </remarks>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence from which to extract elements.</param>
            <param name="startIndex">The zero-based index at which to begin slicing.</param>
            <param name="count">The number of items to slice out of the index.</param>
            <returns>
            A new sequence containing any elements sliced out from the source sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Returns a flattened sequence from a graph or hierarchy of elements by using the specified children selector.
            </summary>
            <param name="source">The source hierarchy to flatten.</param>
            <param name="childrenSelector">A function used to retrieve the children of an element.</param>
            <returns>
            A flat sequence of elements produced from the elements in the source hierarchy.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the end of a sequence.
            </summary>
            <remarks>
            This operator uses deferred execution and streams its results.
            </remarks>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The sequence to return the last element of.</param>
            <param name="count">The number of elements to return.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the specified number of elements from the end of the input sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Splits the input sequence into a sequence of chunks of the specified size.
            </summary>
            <param name="source">The sequence to split into chunks.</param>
            <param name="size">The size of the chunks.</param>
            <returns>
            A sequence of chunks of the specified size.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Byte},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Byte}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.SByte},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.SByte}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int16},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int16}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt16},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt16}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt32},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt32}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.UInt64},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.UInt64}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <returns>Topologically sorted list of items in <paramref name="source"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <returns>Topologically sorted list of items in <paramref name="source"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <param name="keySelector">Function that returns an item key, wich is used to compare.</param>
            <returns>Topologically sorted list of items in <paramref name="source"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <param name="keySelector">Function that returns an item key, wich is used to compare.</param>
            <returns>Topologically sorted list of items in <paramref name="source"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <param name="keySelector">Function that returns an item key, wich is used to compare.</param>
            <param name="keyComparer">Equality comparer for item comparison</param>
            <returns>Topologically sorted list of items in <paramref name="source"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.TopoSort``2(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <param name="keySelector">Function that returns an item key, wich is used to compare.</param>
            <param name="keyComparer">Equality comparer for item comparison</param>
            <returns>Topologically sorted list of items in <paramref name="source"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <param name="equalityComparer">Equality comparer for item comparison</param>
            <returns>Topologically sorted list of items in <paramref name="source"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.TopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <param name="equalityComparer">Equality comparer for item comparison</param>
            <returns>Topologically sorted list of items in <paramref name="source"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.GroupTopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <returns>Topologically sorted list of items in <paramref name="source"/> separated by dependency level.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.GroupTopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <returns>Topologically sorted list of items in <paramref name="source"/> separated by dependency level.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.GroupTopoSort``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <param name="equalityComparer">Equality comparer for item comparison</param>
            <returns>Topologically sorted list of items in <paramref name="source"/> separated by dependency level.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.GroupTopoSort``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Performs topological sort on <paramref name="source"/>.
            </summary>
            <param name="source">Collection to sort.</param>
            <param name="dependsOnGetter">Function that returns items dependent on specified item.</param>
            <param name="equalityComparer">Equality comparer for item comparison</param>
            <returns>
            Topologically sorted list of items in <paramref name="source"/>, separated by dependency level.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Union``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Produces the set union of two sequences by using the default equality comparer.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the first set for the union.</param>
            <param name="elements">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the second set for the union.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements from both input sequences, excluding duplicates.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends specified <paramref name="element"/> to end of the collection.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source">The source enumerable.</param>
            <param name="element">Element to concat.</param>
            <returns>Concatenated enumerable</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Appends specified <paramref name="elements" /> to end of the collection.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source">The source enumerable.</param>
            <param name="elements">Elements to concat.</param>
            <returns>Concatenated enumerable</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepends specified <paramref name="element"/> to the collection start.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source">The source enumerable.</param>
            <param name="element">Element to prepend.</param>
            <returns>Concatenated enumerable</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Prepends specified <paramref name="elements"/> to the collection start.
            </summary>
            <typeparam name="T">Type of element.</typeparam>
            <param name="source">The source enumerable.</param>
            <param name="elements">Elements to prepend.</param>
            <returns>Concatenated enumerable</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.HashSet`1"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.HashSet`1"/> from.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.HashSet`1"/> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.HashSet`1"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the specified equality comparer.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.HashSet`1"/> from.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use
            to comparing values in the set, or <c>null</c> to use the default implementation for the set type.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.HashSet`1"/> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.HashSet`1"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.HashSet`1"/> from.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.HashSet`1"/> that contains keys from the input sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.HashSet`1"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the specified equality comparer.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by <paramref name="keySelector"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.HashSet`1"/> from.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use
            to comparing values in the set, or <c>null</c> to use the default implementation for the set type.</param>
            <param name="keySelector">A function to extract a key from each element.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.HashSet`1"/> that contains keys from the input sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sorts the elements of a sequence in ascending order.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sorts the elements of a sequence in descending order.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to order.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedEnumerable`1"/> whose elements are sorted.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns a sequence with distinct elements from the input sequence based on the specified key.
            </summary>
            <param name="source">The sequence to return distinct elements from.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains distinct elements from the source sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Returns a sequence with distinct elements from the input sequence based on the specified key and key comparer.
            </summary>
            <param name="source">The sequence to return distinct elements from.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains distinct elements from the source sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Produces the set difference of two sequences by using the specified key to compare values.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not also in second will be returned.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>
            A sequence that contains the set difference of the elements of two sequences.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.ExceptBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Produces the set difference of two sequences by using the specified key and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that are not also in second will be returned.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <returns>
            A sequence that contains the set difference of the elements of two sequences.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Produces the set intersection of two sequences by using the specified key to compare values.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements that also appear in second will be returned.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements that also appear in the first sequence will be returned.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>
            A sequence that contains the elements that form the set intersection of two sequences.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.IntersectBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Produces the set intersection of two sequences by using the specified key and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements that also appear in second will be returned.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements that also appear in the first sequence will be returned.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <returns>
            A sequence that contains the elements that form the set intersection of two sequences.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.UnionBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Produces the set union of two sequences by using the specified key to compare values.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the first set for the union.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the second set for the union.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements from both input sequences, excluding duplicates.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.UnionBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Produces the set union of two sequences by using the specified key and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
            <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the first set for the union.</param>
            <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose distinct elements form the second set for the union.</param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the elements from both input sequences, excluding duplicates.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.SelectMany``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> and flattens the resulting sequences into
            one sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of values to project.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are the result of invoking the one-to-many transform function
            on each element of the input sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns first element, or specified <paramref name="defaultValue"/>, if sequence is empty.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.</param>
            <param name="defaultValue">Default value.</param>
            <returns>
            <c>default</c>(<typeparamref name="T"/>) if <paramref name="source"/> is empty; otherwise, the first element in
            <paramref name="source"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element of the sequence that satisfies a condition or a specified
            <paramref name="defaultValue"/> if no such element is found.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return an element from.</param>
            <param name="defaultValue">Default value.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>
            <c>default</c>(<typeparamref name="T"/>) if <paramref name="source"/> is empty or if no element passes the test
            specified by <paramref name="predicate"/>; otherwise, the first element in source that passes the test specified
            by <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Casts the specified sequence to <see cref="T:System.Collections.Generic.List`1"/> if possible, or creates a <see cref="T:System.Collections.Generic.List`1"/> from.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.List`1"/> from.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.AsArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Casts the specified sequence to array if possible, or creates an array from.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create an array from.</param>
            <returns>
            An array that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.ToStrings``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns string representations of <paramref name="source"/> items.
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create strings from.</param>
            <returns>Enumeration of string representation of <paramref name="source"/> elements.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with minimum value in the sequence.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> has no not null elements</exception>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> has no not null elements</exception>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to compare values.</param>
            <returns>The item with minimum value in the sequence.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="source"/> has no not null elements</exception>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MinByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with minimum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="source">A sequence of values to determine the minimum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to compare values.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with minimum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with maximum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with maximum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with maximum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to compare values.</param>
            <returns>The item with maximum value in the sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.EnumerableExtensions.MaxByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``0)">
            <summary>
            Invokes a <paramref name="selector"/> on each element of a <paramref name="source"/>
            and returns the item with maximum value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TValue">Type of the value</typeparam>
            <param name="source">A sequence of values to determine the maximum value of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> to compare values.</param>
            <param name="defaultValue">Value returned if collection contains no not null elements.</param>
            <returns>
            The item with maximum value in the sequence or <typeparamref name="TSource"/> default value if
            <paramref name="source"/> has no not null elements.
            </returns>
        </member>
        <member name="T:CodeJam.Collections.IndexedItem`1">
            <summary>
            Represents an element associated with its index in a sequence.
            </summary>
        </member>
        <member name="P:CodeJam.Collections.IndexedItem`1.Item">
            <summary>
            Gets the value of the element.
            </summary>
            <returns>
            The value of the element.
            </returns>
        </member>
        <member name="P:CodeJam.Collections.IndexedItem`1.Index">
            <summary>
            Gets the index of the element in a sequence.
            </summary>
            <returns>
            The index of the element in a sequence.
            </returns>
        </member>
        <member name="P:CodeJam.Collections.IndexedItem`1.IsFirst">
            <summary>
            Determines if the value is first in a sequence.
            </summary>
            <returns>
            <c>true</c> if this instance is first; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CodeJam.Collections.IndexedItem`1.IsLast">
            <summary>
            Determines if the value is last in a sequence.
            </summary>
            <returns>
            <c>true</c> if this instance is last; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.IndexedItem`1.#ctor(`0,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.Collections.IndexedItem`1"/>.
            </summary>
            <param name="item">The value of the element.</param>
            <param name="index">The index of the element in a sequence.</param>
            <param name="isFirst">A value indicating whether this instance is first.</param>
            <param name="isLast">A value indicating whether this instance is last.</param>
        </member>
        <member name="M:CodeJam.Collections.IndexedItem`1.Equals(CodeJam.Collections.IndexedItem{`0})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:CodeJam.Collections.IndexedItem`1.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current instance. </param>
        </member>
        <member name="M:CodeJam.Collections.IndexedItem`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:CodeJam.Collections.IndexedItem`1.op_Equality(CodeJam.Collections.IndexedItem{`0},CodeJam.Collections.IndexedItem{`0})">
            <summary>
            Operator ==
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>True? if operands equals</returns>
        </member>
        <member name="M:CodeJam.Collections.IndexedItem`1.op_Inequality(CodeJam.Collections.IndexedItem{`0},CodeJam.Collections.IndexedItem{`0})">
            <summary>
            Operator !=
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>True? if operands equals</returns>
        </member>
        <member name="T:CodeJam.Collections.QueryableExtensions">
            <summary>
            Extensions for <see cref="T:System.Linq.IQueryable`1"/>
            </summary>
        </member>
        <member name="M:CodeJam.Collections.QueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
            <param name="source">A sequence of values to order.</param>
            <param name="property">The property name.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to a key.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.QueryableExtensions.OrderByDescending``1(System.Linq.IQueryable{``0},System.String)">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
            <param name="source">A sequence of values to order.</param>
            <param name="property">The property name.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to a key.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.QueryableExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
            </summary>
            <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.</param>
            <param name="property">The property name.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to a key.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.QueryableExtensions.ThenByDescending``1(System.Linq.IOrderedQueryable{``0},System.String)">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in descending order according to a key.
            </summary>
            <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that contains elements to sort.</param>
            <param name="property">The property name.</param>
            <returns>
            An <see cref="T:System.Linq.IOrderedQueryable`1"/> whose elements are sorted according to a key.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.QueryableExtensions.Slice``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Extracts <paramref name="count"/> elements from a sequence at a particular zero-based starting index.
            </summary>
            <remarks>
            If the starting position or count specified result in slice extending past the end of the sequence,
            it will return all elements up to that point. There is no guarantee that the resulting sequence will
            contain the number of elements requested - it may have anywhere from 0 to <paramref name="count"/>.
            </remarks>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence from which to extract elements.</param>
            <param name="startIndex">The zero-based index at which to begin slicing.</param>
            <param name="count">The number of items to slice out of the index.</param>
            <returns>
            A new sequence containing any elements sliced out from the source sequence.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.QueryableExtensions.Page``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Extracts <paramref name="pageSize"/> elements from a sequence at a particular one-based page number.
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">The sequence from which to page.</param>
            <param name="pageIndex">The one-based page number.</param>
            <param name="pageSize">The size of the page.</param>
            <returns>
            A new sequence containing elements are at the specified <paramref name="pageIndex"/> from the source sequence.
            </returns>
        </member>
        <member name="T:CodeJam.Collections.Sequence">
            <summary>
            Contains methods for sequence creation.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.Sequence.Create``1(``0,System.Func{``0,``0})">
            <summary>
            Creates a sequence from start value and next element factory.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="start">Start value.</param>
            <param name="next">Next element factory.</param>
            <returns>Generated sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.Sequence.Create``2(``0,System.Func{``0,``0},System.Func{``0,``1})">
            <summary>
            Creates a sequence from start value and next element factory.
            </summary>
            <typeparam name="T">The type of source element.</typeparam>
            <typeparam name="TResult">The type of result element</typeparam>
            <param name="start">Start value.</param>
            <param name="next">Next element factory.</param>
            <param name="resultSelector">A transform function to apply to each element.</param>
            <returns>Generated sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.Sequence.Create``1(``0,System.Func{``0,System.Boolean},System.Func{``0,``0})">
            <summary>
            Creates a sequence from start value and next element factory.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="start">Start value.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="next">Next element factory.</param>
            <returns>Generated sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.Sequence.Create``2(``0,System.Func{``0,System.Boolean},System.Func{``0,``0},System.Func{``0,``1})">
            <summary>
            Creates a sequence from start value and next element factory.
            </summary>
            <typeparam name="T">The type of source element.</typeparam>
            <typeparam name="TResult">The type of result element</typeparam>
            <param name="start">Start value.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="next">Next element factory.</param>
            <param name="resultSelector">A transform function to apply to each element.</param>
            <returns>Generated sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.Sequence.CreateWhileNotNull``1(``0,System.Func{``0,``0})">
            <summary>
            Creates a sequence from start value and next element factory till factory returns null.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="start">Start value.</param>
            <param name="next">Next element factory.</param>
            <returns>Generated sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.Sequence.CreateWhileNotNull``2(``0,System.Func{``0,``0},System.Func{``0,``1})">
            <summary>
            Creates a sequence from start value and next element factory till factory returns null.
            </summary>
            <typeparam name="T">The type of source element.</typeparam>
            <typeparam name="TResult">The type of result element</typeparam>
            <param name="start">Start value.</param>
            <param name="next">Next element factory.</param>
            <param name="resultSelector">A transform function to apply to each element.</param>
            <returns>Generated sequence.</returns>
        </member>
        <member name="M:CodeJam.Collections.Sequence.CreateSingle``1(``0)">
            <summary>
            Creates a single element sequence.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="element">Element instance to create sequence from.</param>
            <returns>Single element sequence</returns>
        </member>
        <member name="M:CodeJam.Collections.Sequence.CreateSingle``1(System.Func{``0})">
            <summary>
            Creates a single element sequence.
            </summary>
            <typeparam name="T">The type of element.</typeparam>
            <param name="elementFactory">Element factory.</param>
            <returns>Single element sequence</returns>
        </member>
        <member name="T:CodeJam.Collections.Suffix">
            <summary>Suffix of the SuffixTree</summary>
        </member>
        <member name="F:CodeJam.Collections.Suffix._buffer">
            <summary>Buffer of all added strings</summary>
        </member>
        <member name="F:CodeJam.Collections.Suffix._sourceOffset">
            <summary>Offset to the beginning of the source string in the buffer</summary>
        </member>
        <member name="M:CodeJam.Collections.Suffix.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Constructs a new suffix</summary>
            <param name="buffer">Buffer with all added strings</param>
            <param name="sourceIndex">Source string index</param>
            <param name="sourceOffset">Offset of the source string inside the buffer</param>
            <param name="offset">Offset of the suffix from the sourceOffset</param>
            <param name="length">Length of the suffix</param>
        </member>
        <member name="P:CodeJam.Collections.Suffix.SourceIndex">
            <summary>
            The index of the source string in the order or addition to the Suffix tree
            <remarks>0 - for the first added string, 1 - for the second, etc</remarks>
            </summary>
        </member>
        <member name="P:CodeJam.Collections.Suffix.Offset">
            <summary>The offset of the suffix from the beginning of the source string</summary>
        </member>
        <member name="P:CodeJam.Collections.Suffix.Length">
            <summary>The length of the suffix</summary>
        </member>
        <member name="P:CodeJam.Collections.Suffix.Value">
            <summary>The suffix value</summary>
        </member>
        <member name="M:CodeJam.Collections.Suffix.op_Implicit(CodeJam.Collections.Suffix)~System.String">
            <summary>String conversion operator</summary>
            <param name="suffix">The suffix to convert</param>
        </member>
        <member name="T:CodeJam.Collections.SuffixTree">
            <summary>
            Implementation of the suffix tree with Ukkonen's algorithm
            <remarks>
            See http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english/9513423
            and http://www.cise.ufl.edu/~sahni/dsaaj/enrich/c16/suffix.htm
            </remarks>
            </summary>
        </member>
        <member name="F:CodeJam.Collections.SuffixTree.InvalidNodeIndex">
            <summary>Unassigned node index</summary>
        </member>
        <member name="F:CodeJam.Collections.SuffixTree._nodeLinks">
            <summary>Links between nodes</summary>
        </member>
        <member name="F:CodeJam.Collections.SuffixTree._branchNodeIndex">
            <summary>Index of the branch node</summary>
        </member>
        <member name="F:CodeJam.Collections.SuffixTree._activeEdgeIndex">
            <summary>Index of the active edge (child node) of the branch node</summary>
        </member>
        <member name="F:CodeJam.Collections.SuffixTree._activeLength">
            <summary>The length of the current part of the active child</summary>
        </member>
        <member name="F:CodeJam.Collections.SuffixTree._nextSuffixOffset">
            <summary>Offset of the first suffix to insert</summary>
        </member>
        <member name="F:CodeJam.Collections.SuffixTree._currentOffset">
            <summary>Current working offset in the string</summary>
        </member>
        <member name="F:CodeJam.Collections.SuffixTree._pendingLinkIndexFrom">
            <summary>Index of the previous insertion node that should be linked with a subsequent insertion node</summary>
        </member>
        <member name="F:CodeJam.Collections.SuffixTree._end">
            <summary>The end of the string</summary>
        </member>
        <member name="M:CodeJam.Collections.SuffixTree.#ctor">
            <summary>
            Creates instance of <see cref="T:CodeJam.Collections.SuffixTree"/>.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.SuffixTree.Compact">
            <summary>Releases internal structures used only for tree building to free some memory</summary>
            <remarks>
            Calling this method may result in a worse building algorithm complexity for subsequent <see cref="M:CodeJam.Collections.SuffixTreeBase.Add(System.String)"/> calls.
            So, it is not recommended to call it unless no more string are going to be added to the tree.
            </remarks>
        </member>
        <member name="M:CodeJam.Collections.SuffixTree.ResetLinks">
            <summary>Resets node links lazy list to a default value</summary>
        </member>
        <member name="P:CodeJam.Collections.SuffixTree.LinkPending">
            <summary>Shows whether we have a pending link insertion</summary>
        </member>
        <member name="M:CodeJam.Collections.SuffixTree.BuildFor(System.Int32,System.Int32)">
            <summary>Appends suffixes for the last added string</summary>
        </member>
        <member name="M:CodeJam.Collections.SuffixTree.FindBranchingPoint">
            <summary>Finds the next branching point</summary>
        </member>
        <member name="M:CodeJam.Collections.SuffixTree.CreatePendingLink(System.Int32)">
            <summary>Creates a pending link</summary>
            <param name="toNodeIndex">The node to link to</param>
        </member>
        <member name="M:CodeJam.Collections.SuffixTree.UpdateActiveEdgeAndCurentPosition">
            <summary>Updates active edge and current position</summary>
        </member>
        <member name="M:CodeJam.Collections.SuffixTree.InsertSuffix">
            <summary>Inserts a new suffix at the current position</summary>
        </member>
        <member name="M:CodeJam.Collections.SuffixTree.AddNode(CodeJam.Collections.SuffixTreeBase.Node)">
            <summary>Adds a new node with an empty link</summary>
            <param name="node">A node to add</param>
            <returns>Index of the node</returns>
        </member>
        <member name="M:CodeJam.Collections.SuffixTree.AppendNodeText(System.Text.StringBuilder,System.Int32)">
            <summary>
            Appends specified node text.
            </summary>
            <param name="sb"><see cref="T:System.Text.StringBuilder"/> to append node text to</param>
            <param name="nodeIndex">Node index.</param>
        </member>
        <member name="T:CodeJam.Collections.SuffixTreeBase">
            <summary>
            Base class for suffix tree algorithm implementation.
            </summary>
        </member>
        <member name="F:CodeJam.Collections.SuffixTreeBase._align">
            <summary>Node alignment in Print output</summary>
        </member>
        <member name="F:CodeJam.Collections.SuffixTreeBase.RootNodeIndex">
            <summary>Root node index</summary>
        </member>
        <member name="F:CodeJam.Collections.SuffixTreeBase._nodes">
            <summary>Tree nodes</summary>
        </member>
        <member name="P:CodeJam.Collections.SuffixTreeBase.Root">
            <summary>The root node</summary>
        </member>
        <member name="P:CodeJam.Collections.SuffixTreeBase.EdgeComparer">
            <summary>The comparer to compare edges of a node against a char</summary>
        </member>
        <member name="F:CodeJam.Collections.SuffixTreeBase._stringLocationByEndComparer">
            <summary>The comparer to compare string locations against a string end</summary>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.AddNode(CodeJam.Collections.SuffixTreeBase.Node)">
            <summary>Adds a new node</summary>
            <param name="node">A node to add</param>
            <returns>Index of the node</returns>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.UpdateNode(System.Int32,CodeJam.Collections.SuffixTreeBase.Node)">
            <summary>Updates the node at the index</summary>
            <param name="index">The index to update</param>
            <param name="node">The new node value</param>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.GetNode(System.Int32)">
            <summary>Gets a node at the index</summary>
            <param name="index">The index of the node</param>
            <returns>The node</returns>
        </member>
        <member name="P:CodeJam.Collections.SuffixTreeBase.NodesCount">
            <summary>Number of nodes</summary>
        </member>
        <member name="P:CodeJam.Collections.SuffixTreeBase.InternalData">
            <summary>Concatenated input strings</summary>
        </member>
        <member name="P:CodeJam.Collections.SuffixTreeBase.StringLocations">
            <summary>List of locatons of added strings inside the InternalData</summary>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.#ctor">
            <summary>Constructs a base for a suffix tree</summary>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.Add(System.String)">
            <summary>Adds a new string to the tree</summary>
            <param name="data">
            The string to add
            <remarks>The last string character should be unique among all added strings</remarks>
            </param>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.All">
            <summary>Enumerates all suffixes in the suffix tree</summary>
            <remarks>
            May return suffixes with the same value of the they are present in different source strings
            </remarks>
            <returns>The enumeration of all suffixes in lexicographical order</returns>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.Contains(System.String)">
            <summary>Checks wether the suffix tree contains the given substring or not</summary>
            <param name="substring">The substring to locate</param>
            <returns>true if found, false otherwise</returns>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.ContainsSuffix(System.String)">
            <summary>Checks wether the suffix tree contains the given suffix or not</summary>
            <param name="suffix">The suffix to locate</param>
            <returns>true if found, false otherwise</returns>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.StartingWith(System.String)">
            <summary>Enumerates all suffixes starting with the given prefix</summary>
            <param name="prefix">The prefix to find</param>
            <returns>The enumeration of all suffixes with the given prefix in lexicographical order</returns>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.AllFromNode(CodeJam.Collections.SuffixTreeBase.Node,System.Int32)">
            <summary>Enumerates all suffixes in the subtree of the given node</summary>
            <remarks>
            May return suffixes with the same value of the they are present in different source strings
            </remarks>
            <returns>The enumeration of all suffixes in the subtree in lexicographical order</returns>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.CreateSuffix(System.Int32,System.Int32)">
            <summary>Creates a new suffix description</summary>
            <param name="end">The suffix end</param>
            <param name="length">The suffix length</param>
            <returns>The suffix</returns>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.FindBranch(System.String)">
            <summary>Locates the branch corresponding to the given string</summary>
            <param name="s">The string to find</param>
            <returns>The last matched edge and the matched length over this edge or null if no match found</returns>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.FindEdge(CodeJam.Collections.SuffixTreeBase.Node,System.Char,CodeJam.Collections.SuffixTreeBase.Node@)">
            <summary>Finds an edge from the given node corresponding to the given char</summary>
            <param name="node">The node to search in</param>
            <param name="c">The char to find</param>
            <param name="edge">Te edge found</param>
            <returns>The index of the edge or -1 if there is no edge starting with the given char</returns>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.GetSourceIndexByEnd(System.Int32)">
            <summary>Locates the source string index by the suffix end</summary>
            <param name="end">The suffix end</param>
            <returns>The source string index</returns>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.BuildFor(System.Int32,System.Int32)">
            <summary>Appends suffixes for the last added string</summary>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.Print">
            <summary>Prints the tree structure to the string for the debugging purposes</summary>
            <returns>The tree structure as a string</returns>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.PrintNodeWithPath(System.Text.StringBuilder,System.Int32,System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>Prints a single node representation along with the path prefix</summary>
            <param name="sb">The builder to print to</param>
            <param name="nodeIndex">THe index of the node</param>
            <param name="stack">The stack of nodes to process</param>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.AppendNodeText(System.Text.StringBuilder,System.Int32)">
            <summary>Prints a single node information</summary>
            <param name="sb">The builder to print to</param>
            <param name="nodeIndex">The node index</param>
        </member>
        <member name="T:CodeJam.Collections.SuffixTreeBase.Node">
            <summary>A suffix tree edge combined with the end node</summary>
        </member>
        <member name="M:CodeJam.Collections.SuffixTreeBase.Node.#ctor(System.Int32,System.Int32,System.Boolean,System.Collections.Generic.List{System.Int32})">
            <summary>Constructs a new node</summary>
            <param name="begin">An edge start offset</param>
            <param name="end">An edge end offset</param>
            <param name="terminal">Is the edge terminates the string or not</param>
            <param name="children">A list of child nodes (edges)</param>
        </member>
        <member name="P:CodeJam.Collections.SuffixTreeBase.Node.Children">
            <summary>
            A list of child nodes
            <remarks>null for leaf nodes</remarks>
            </summary>
        </member>
        <member name="P:CodeJam.Collections.SuffixTreeBase.Node.IsLeaf">
            <summary>Shows whether it is a leaf or an internal node</summary>
        </member>
        <member name="P:CodeJam.Collections.SuffixTreeBase.Node.IsTerminal">
            <summary>Shows whether it is a terminal (ending at a string end) node or not</summary>
        </member>
        <member name="P:CodeJam.Collections.SuffixTreeBase.Node.Begin">
            <summary>Index of the first character of a substring corresponding to the node</summary>
        </member>
        <member name="P:CodeJam.Collections.SuffixTreeBase.Node.End">
            <summary>Index after the last character of a substring corresponding to the node</summary>
        </member>
        <member name="P:CodeJam.Collections.SuffixTreeBase.Node.Length">
            <summary>Length of the corresponding substring</summary>
        </member>
        <member name="T:CodeJam.Collections.SuffixTreeBase.BranchPoint">
            <summary>Branching point</summary>
        </member>
        <member name="F:CodeJam.Collections.SuffixTreeBase.BranchPoint.Node">
            <summary>The tree node</summary>
        </member>
        <member name="F:CodeJam.Collections.SuffixTreeBase.BranchPoint.EdgeIndex">
            <summary>The chosen edge</summary>
        </member>
        <member name="F:CodeJam.Collections.SuffixTreeBase.BranchPoint.Length">
            <summary>The length over the edge</summary>
        </member>
        <member name="T:CodeJam.Collections.ArrayExtensions">
            <summary>
            <see cref="T:System.Array"/> class extensions.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.String[],System.String[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
            <returns>
            true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.String[],System.String[],System.StringComparison)">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            A parameter specifies the culture, case, and sort rules used in the comparison.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
            <param name="comparison">One of the enumeration values that specifies the rules for the comparison.</param>
            <returns>
            true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo``1(``0[],``0[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <typeparam name="T">Type of array item.</typeparam>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
            <returns>
            <c>true</c> if content of <paramref name="a"/> equals to <paramref name="b"/>, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo``1(System.Nullable{``0}[],System.Nullable{``0}[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <typeparam name="T">Type of array item.</typeparam>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
            <returns>
            <c>true</c> if content of <paramref name="a"/> equals to <paramref name="b"/>, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo``1(``0[],``0[],System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <typeparam name="T">Type of array item.</typeparam>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
            <param name="comparer">Instance of <see cref="T:System.Collections.Generic.IComparer`1"/> to compare values.</param>
            <returns>
            <c>true</c> if content of <paramref name="a"/> equals to <paramref name="b"/>, <c>false</c> otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Any``1(``0[])">
            <summary>
            Checks if any element in array exists.
            </summary>
            <typeparam name="T">Type of array item.</typeparam>
            <param name="array">Array to check.</param>
            <returns><c>True</c>, if array is not empty.</returns>
            <remarks>This method performs fast check instead of creating enumerator</remarks>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Byte[],System.Byte[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
            <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.SByte[],System.SByte[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
            <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int16[],System.Int16[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
            <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt16[],System.UInt16[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
            <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int32[],System.Int32[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
            <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt32[],System.UInt32[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
            <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Int64[],System.Int64[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
            <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.UInt64[],System.UInt64[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
            <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.TimeSpan[],System.TimeSpan[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
            <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.EqualsTo(System.Guid[],System.Guid[])">
            <summary>
            Returns true, if length and content of <paramref name="a"/> equals <paramref name="b"/>.
            </summary>
            <param name="a">The first array to compare.</param>
            <param name="b">The second array to compare.</param>
            <returns>True, if length and content of <paramref name="a"/> equals <paramref name="b"/>.</returns>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.AsReadOnly``1(``0[])">
            <summary>Returns a read-only wrapper for the specified array.</summary>
            <returns>A read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the specified array.</returns>
            <param name="array">The one-dimensional, zero-based array to wrap in a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />  wrapper. </param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],``0)">
            <summary>Searches an entire one-dimensional sorted <see cref="T:System.Array" /> for a specific element, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified object.</summary>
            <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
            <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search. </param>
            <param name="value">The object to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
            <summary>Searches an entire one-dimensional sorted <see cref="T:System.Array" /> for a value using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
            <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
            <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search.  </param>
            <param name="value">The object to search for.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.-or- null to use the <see cref="T:System.IComparable`1" /> implementation of each element.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="comparer" /> is null, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer" /> is null, <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
            <summary>Searches a range of elements in a one-dimensional sorted <see cref="T:System.Array" /> for a value, using the <see cref="T:System.IComparable`1" /> generic interface implemented by each element of the <see cref="T:System.Array" /> and by the specified value.</summary>
            <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
            <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search. </param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.-or-<paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
            <summary>Searches a range of elements in a one-dimensional sorted <see cref="T:System.Array" /> for a value, using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
            <returns>The index of the specified <paramref name="value" /> in the specified <paramref name="array" />, if <paramref name="value" /> is found. If <paramref name="value" /> is not found and <paramref name="value" /> is less than one or more elements in <paramref name="array" />, a negative number which is the bitwise complement of the index of the first element that is larger than <paramref name="value" />. If <paramref name="value" /> is not found and <paramref name="value" /> is greater than any of the elements in <paramref name="array" />, a negative number which is the bitwise complement of (the index of the last element plus 1).</returns>
            <param name="array">The sorted one-dimensional, zero-based <see cref="T:System.Array" /> to search. </param>
            <param name="index">The starting index of the range to search.</param>
            <param name="length">The length of the range to search.</param>
            <param name="value">The object to search for.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.-or- null to use the <see cref="T:System.IComparable`1" /> implementation of each element.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.-or-<paramref name="comparer" /> is null, and <paramref name="value" /> is of a type that is not compatible with the elements of <paramref name="array" />.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer" /> is null, <paramref name="value" /> does not implement the <see cref="T:System.IComparable`1" /> generic interface, and the search encounters an element that does not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Clear(System.Array,System.Int32,System.Int32)">
            <summary>Sets a range of elements in the <see cref="T:System.Array" /> to zero, to false, or to null, depending on the element type.</summary>
            <param name="array">The <see cref="T:System.Array" /> whose elements need to be cleared.</param>
            <param name="index">The starting index of the range of elements to clear.</param>
            <param name="length">The number of elements to clear.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.-or-The sum of <paramref name="index" /> and <paramref name="length" /> is greater than the size of the <see cref="T:System.Array" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Clear(System.Array)">
            <summary>Sets all elements in an <see cref="T:System.Array" /> to the default value of each element type.</summary>
            <param name="array">The <see cref="T:System.Array" /> whose elements need to be cleared.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index.  Guarantees that all changes are undone if the copy does not succeed completely.</summary>
            <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</param>
            <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
            <param name="destinationIndex">A 32-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceArray" /> is null.-or-<paramref name="destinationArray" /> is null.</exception>
            <exception cref="T:System.RankException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
            <exception cref="T:System.ArrayTypeMismatchException">The <paramref name="sourceArray" /> type is neither the same as nor derived from the <paramref name="destinationArray" /> type.</exception>
            <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="sourceIndex" /> is less than the lower bound of the first dimension of <paramref name="sourceArray" />.-or-<paramref name="destinationIndex" /> is less than the lower bound of the first dimension of <paramref name="destinationArray" />.-or-<paramref name="length" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.-or-<paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.ConvertAll``2(``0[],System.Converter{``0,``1})">
            <summary>Converts an array of one type to an array of another type.</summary>
            <returns>An array of the target type containing the converted elements from the source array.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to convert to a target type.</param>
            <param name="converter">A <see cref="T:System.Converter`2" /> that converts each element from one type to another type.</param>
            <typeparam name="TInput">The type of the elements of the source array.</typeparam>
            <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="converter" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Array,System.Int32)">
            <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the first element and pastes them into another <see cref="T:System.Array" /> starting at the first element. The length is specified as a 32-bit integer.</summary>
            <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
            <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceArray" /> is null.-or-<paramref name="destinationArray" /> is null.</exception>
            <exception cref="T:System.RankException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
            <exception cref="T:System.ArrayTypeMismatchException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
            <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="length" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="length" /> is greater than the number of elements in <paramref name="sourceArray" />.-or-<paramref name="length" /> is greater than the number of elements in <paramref name="destinationArray" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Array,System.Int64)">
            <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the first element and pastes them into another <see cref="T:System.Array" /> starting at the first element. The length is specified as a 64-bit integer.</summary>
            <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
            <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
            <param name="length">A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <see cref="F:System.Int32.MaxValue" />, inclusive.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceArray" /> is null.-or-<paramref name="destinationArray" /> is null.</exception>
            <exception cref="T:System.RankException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
            <exception cref="T:System.ArrayTypeMismatchException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
            <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="length" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="length" /> is greater than the number of elements in <paramref name="sourceArray" />.-or-<paramref name="length" /> is greater than the number of elements in <paramref name="destinationArray" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
            <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.</summary>
            <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</param>
            <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
            <param name="destinationIndex">A 32-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</param>
            <param name="length">A 32-bit integer that represents the number of elements to copy.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceArray" /> is null.-or-<paramref name="destinationArray" /> is null.</exception>
            <exception cref="T:System.RankException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
            <exception cref="T:System.ArrayTypeMismatchException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
            <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="sourceIndex" /> is less than the lower bound of the first dimension of <paramref name="sourceArray" />.-or-<paramref name="destinationIndex" /> is less than the lower bound of the first dimension of <paramref name="destinationArray" />.-or-<paramref name="length" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.-or-<paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>Copies a range of elements from an <see cref="T:System.Array" /> starting at the specified source index and pastes them to another <see cref="T:System.Array" /> starting at the specified destination index. The length and the indexes are specified as 64-bit integers.</summary>
            <param name="sourceArray">The <see cref="T:System.Array" /> that contains the data to copy.</param>
            <param name="sourceIndex">A 64-bit integer that represents the index in the <paramref name="sourceArray" /> at which copying begins.</param>
            <param name="destinationArray">The <see cref="T:System.Array" /> that receives the data.</param>
            <param name="destinationIndex">A 64-bit integer that represents the index in the <paramref name="destinationArray" /> at which storing begins.</param>
            <param name="length">A 64-bit integer that represents the number of elements to copy. The integer must be between zero and <see cref="F:System.Int32.MaxValue" />, inclusive.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceArray" /> is null.-or-<paramref name="destinationArray" /> is null.</exception>
            <exception cref="T:System.RankException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> have different ranks.</exception>
            <exception cref="T:System.ArrayTypeMismatchException">
            <paramref name="sourceArray" /> and <paramref name="destinationArray" /> are of incompatible types.</exception>
            <exception cref="T:System.InvalidCastException">At least one element in <paramref name="sourceArray" /> cannot be cast to the type of <paramref name="destinationArray" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="sourceIndex" /> is outside the range of valid indexes for the <paramref name="sourceArray" />.-or-<paramref name="destinationIndex" /> is outside the range of valid indexes for the <paramref name="destinationArray" />.-or-<paramref name="length" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="length" /> is greater than the number of elements from <paramref name="sourceIndex" /> to the end of <paramref name="sourceArray" />.-or-<paramref name="length" /> is greater than the number of elements from <paramref name="destinationIndex" /> to the end of <paramref name="destinationArray" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Exists``1(``0[],System.Predicate{``0})">
            <summary>Determines whether the specified array contains elements that match the conditions defined by the specified predicate.</summary>
            <returns>true if <paramref name="array" /> contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the elements to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Find``1(``0[],System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the
            first occurrence within the entire <see cref="T:System.Array" />.
            </summary>
            <returns>
            The first element that matches the conditions defined by the specified predicate, if found; otherwise,
            the default value for type <typeparamref name="T" />.
            </returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.FindAll``1(``0[],System.Predicate{``0})">
            <summary>Retrieves all the elements that match the conditions defined by the specified predicate.</summary>
            <returns>An <see cref="T:System.Array" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Array" />.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the elements to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.FindIndex``1(``0[],System.Predicate{``0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Array" />.</summary>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the specified index to the last element.</summary>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.</summary>
            <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.FindLast``1(``0[],System.Predicate{``0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, and returns the last
            occurrence within the entire <see cref="T:System.Array" />.
            </summary>
            <returns>
            The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default
            value for type <typeparamref name="T"/>.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.FindLastIndex``1(``0[],System.Predicate{``0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Array" />.</summary>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the first element to the specified index.</summary>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
            <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</summary>
            <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions of the element to search for.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.ForEach``1(``0[],System.Action{``0})">
            <summary>Performs the specified action on each element of the specified array.</summary>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> on whose elements the action is to be performed.</param>
            <param name="action">The <see cref="T:System.Action`1" /> to perform on each element of <paramref name="array" />.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="action" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.IndexOf``1(``0[],``0)">
            <summary>Searches for the specified object and returns the index of the first occurrence within the entire <see cref="T:System.Array" />.</summary>
            <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.IndexOf``1(``0[],``0,System.Int32)">
            <summary>Searches for the specified object and returns the index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the specified index to the last element.</summary>
            <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from <paramref name="startIndex" /> to the last element, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
            <summary>Searches for the specified object and returns the index of the first occurrence within the range of elements in the <see cref="T:System.Array" /> that starts at the specified index and contains the specified number of elements.</summary>
            <returns>The zero-based index of the first occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that starts at <paramref name="startIndex" /> and contains the number of elements specified in <paramref name="count" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty array.</param>
            <param name="count">The number of elements in the section to search.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.LastIndexOf``1(``0[],``0)">
            <summary>Searches for the specified object and returns the index of the last occurrence within the entire <see cref="T:System.Array" />.</summary>
            <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the entire <paramref name="array" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.LastIndexOf``1(``0[],``0,System.Int32)">
            <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that extends from the first element to the specified index.</summary>
            <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that extends from the first element to <paramref name="startIndex" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
            <summary>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <see cref="T:System.Array" /> that contains the specified number of elements and ends at the specified index.</summary>
            <returns>The zero-based index of the last occurrence of <paramref name="value" /> within the range of elements in <paramref name="array" /> that contains the number of elements specified in <paramref name="count" /> and ends at <paramref name="startIndex" />, if found; otherwise, –1.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to search.</param>
            <param name="value">The object to locate in <paramref name="array" />.</param>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex" /> is outside the range of valid indexes for <paramref name="array" />.-or-<paramref name="count" /> is less than zero.-or-<paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in <paramref name="array" />.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Reverse(System.Array)">
            <summary>Reverses the sequence of the elements in the entire one-dimensional <see cref="T:System.Array" />.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> to reverse.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null. </exception>
            <exception cref="T:System.RankException">
            <paramref name="array" /> is multidimensional. </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Reverse(System.Array,System.Int32,System.Int32)">
            <summary>Reverses the sequence of the elements in a range of elements in the one-dimensional <see cref="T:System.Array" />.</summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> to reverse.</param>
            <param name="index">The starting index of the section to reverse.</param>
            <param name="length">The number of elements in the section to reverse.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.RankException">
            <paramref name="array" /> is multidimensional.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Sort``1(``0[])">
            <summary>Sorts the elements in an entire <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.</summary>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
            <summary>Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
            <param name="array">The one-dimensional, zero-base <see cref="T:System.Array" /> to sort</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer" /> is null, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
            <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Comparison{``0})">
            <summary>Sorts the elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Comparison`1" />.</summary>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</param>
            <param name="comparison">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="comparison" /> is null.</exception>
            <exception cref="T:System.ArgumentException">The implementation of <paramref name="comparison" /> caused an error during the sort. For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Int32,System.Int32)">
            <summary>Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the <see cref="T:System.IComparable`1" /> generic interface implementation of each element of the <see cref="T:System.Array" />.</summary>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />.</exception>
            <exception cref="T:System.InvalidOperationException">One or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>Sorts the elements in a range of elements in an <see cref="T:System.Array" /> using the specified <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface.</summary>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to sort.</param>
            <param name="index">The starting index of the range to sort.</param>
            <param name="length">The number of elements in the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> generic interface implementation to use when comparing elements, or null to use the <see cref="T:System.IComparable`1" /> generic interface implementation of each element.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> is less than the lower bound of <paramref name="array" />.-or-<paramref name="length" /> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="index" /> and <paramref name="length" /> do not specify a valid range in <paramref name="array" />. -or-The implementation of <paramref name="comparer" /> caused an error during the sort. For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="comparer" /> is null, and one or more elements in <paramref name="array" /> do not implement the <see cref="T:System.IComparable`1" /> generic interface.</exception>
        </member>
        <member name="M:CodeJam.Collections.ArrayExtensions.TrueForAll``1(``0[],System.Predicate{``0})">
            <summary>Determines whether every element in the array matches the conditions defined by the specified predicate.</summary>
            <returns>true if every element in <paramref name="array" /> matches the conditions defined by the specified predicate; otherwise, false. If there are no elements in the array, the return value is true.</returns>
            <param name="array">The one-dimensional, zero-based <see cref="T:System.Array" /> to check against the conditions</param>
            <param name="match">The <see cref="T:System.Predicate`1" /> that defines the conditions to check against the elements.</param>
            <typeparam name="T">The type of the elements of the array.</typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array" /> is null.-or-<paramref name="match" /> is null.</exception>
        </member>
        <member name="T:CodeJam.Collections.LazyDictionary">
            <summary>
            Provides static methods for <see cref="T:CodeJam.Collections.ILazyDictionary`2"/>.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
            Creates implementation of <see cref="T:CodeJam.Collections.ILazyDictionary`2"/>.
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="valueFactory">Function to create value on demand.</param>
            <param name="comparer">Key comparer.</param>
            <param name="threadSafe">
            If true, creates a thread safe implementation.
            <paramref name="valueFactory"/> guaranteed to call only once.
            </param>
            <returns><see cref="T:CodeJam.Collections.ILazyDictionary`2"/> implementation.</returns>
        </member>
        <member name="M:CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Boolean)">
            <summary>
            Creates implementation of <see cref="T:CodeJam.Collections.ILazyDictionary`2"/>.
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="valueFactory">Function to create value on demand.</param>
            <param name="threadSafe">
            If true, creates a thread safe implementation.
            <paramref name="valueFactory"/> guaranteed to call only once.
            </param>
            <returns><see cref="T:CodeJam.Collections.ILazyDictionary`2"/> implementation.</returns>
        </member>
        <member name="M:CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Threading.LazyThreadSafetyMode)">
            <summary>
            Creates implementation of <see cref="T:CodeJam.Collections.ILazyDictionary`2"/>.
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="valueFactory">Function to create value on demand.</param>
            <param name="threadSafety">One of the enumeration values that specifies the thread safety mode. </param>
            <returns><see cref="T:CodeJam.Collections.ILazyDictionary`2"/> implementation.</returns>
        </member>
        <member name="M:CodeJam.Collections.LazyDictionary.Create``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.LazyThreadSafetyMode)">
            <summary>
            Creates implementation of <see cref="T:CodeJam.Collections.ILazyDictionary`2"/>.
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
            <param name="valueFactory">Function to create value on demand.</param>
            <param name="comparer">Key comparer.</param>
            <param name="threadSafety">One of the enumeration values that specifies the thread safety mode. </param>
            <returns><see cref="T:CodeJam.Collections.ILazyDictionary`2"/> implementation.</returns>
        </member>
        <member name="T:CodeJam.Collections.LazyDictionary`2">
            <summary>
            Dictionary with lazy values initialization.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.LazyDictionary`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialize instance.
            </summary>
            <param name="valueFactory">Function to create value on demand.</param>
            <param name="comparer">Key comparer.</param>
        </member>
        <member name="M:CodeJam.Collections.LazyDictionary`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initialize instance.
            </summary>
            <param name="valueFactory">Function to create value on demand.</param>
        </member>
        <member name="M:CodeJam.Collections.LazyDictionary`2.Clear">
            <summary>
            Clears all created values
            </summary>
        </member>
        <member name="M:CodeJam.Collections.LazyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether the read-only dictionary contains an element that has the specified key.</summary>
            <returns>true if the read-only dictionary contains an element that has the specified key; otherwise, false.</returns>
            <param name="key">The key to locate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Collections.LazyDictionary`2.TryGetValue(`0,`1@)">
            <summary>Gets the value that is associated with the specified key.</summary>
            <returns>true if the object that implements the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> interface contains an element that has the specified key; otherwise, false.</returns>
            <param name="key">The key to locate.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is null.</exception>
        </member>
        <member name="P:CodeJam.Collections.LazyDictionary`2.Item(`0)">
            <summary>Gets the element that has the specified key in the read-only dictionary.</summary>
            <returns>The element that has the specified key in the read-only dictionary.</returns>
            <param name="key">The key to locate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found. </exception>
        </member>
        <member name="P:CodeJam.Collections.LazyDictionary`2.Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary. </summary>
            <returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
        </member>
        <member name="P:CodeJam.Collections.LazyDictionary`2.Values">
            <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary>
            <returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
        </member>
        <member name="T:CodeJam.Collections.KeyEqualityComparer">
            <summary>
            Provides static methods for creating <see cref="T:CodeJam.Collections.KeyEqualityComparer`2"/>.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.KeyEqualityComparer.Create``2(System.Func{``0,``1})">
            <summary>
            Creates a <seealso cref="T:CodeJam.Collections.KeyEqualityComparer`2"/>.
            </summary>
            <typeparam name="T">The type of the comparing elements.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The function to extract the key for each element.</param>
            <returns>
            A <seealso cref="T:CodeJam.Collections.KeyEqualityComparer`2"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.KeyEqualityComparer.Create``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <seealso cref="T:CodeJam.Collections.KeyEqualityComparer`2"/>.
            </summary>
            <typeparam name="T">The type of the comparing elements.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The function to extract the key for each element.</param>
            <param name="comparer">The equality comparer to use to compare the keys.</param>
            <returns>
            A <seealso cref="T:CodeJam.Collections.KeyEqualityComparer`2"/>.
            </returns>
        </member>
        <member name="T:CodeJam.Collections.ILazyDictionary`2">
            <summary>
            Dictionary with lazy values initialization.
            </summary>
            <typeparam name="TKey">Type of key</typeparam>
            <typeparam name="TValue">Type of value</typeparam>
        </member>
        <member name="M:CodeJam.Collections.ILazyDictionary`2.Clear">
            <summary>
            Clears all created values
            </summary>
        </member>
        <member name="T:CodeJam.Collections.Array`1">
            <summary>
            <see cref="T:System.Array"/> type extensions.
            </summary>
            <typeparam name="T">Type of an array.</typeparam>
        </member>
        <member name="F:CodeJam.Collections.Array`1.Empty">
            <summary>
            Empty instance of <typeparamref name="T"/>[].
            </summary>
        </member>
        <member name="T:CodeJam.Collections.KeyEqualityComparer`2">
            <summary>
            An implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>
            interface for compare values by comparing their extracted key values.
            </summary>
        </member>
        <member name="P:CodeJam.Collections.KeyEqualityComparer`2.KeySelector">
            <summary>
            Gets the function to extract the key for each element.
            </summary>
            <returns>
            The function to extract the key for each element.
            </returns>
        </member>
        <member name="P:CodeJam.Collections.KeyEqualityComparer`2.Comparer">
            <summary>
            Gets the equality comparer to use to compare the keys.
            </summary>
            <returns>
            The equality comparer to use to compare the keys.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.KeyEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.Collections.KeyEqualityComparer`2"/>.
            </summary>
            <param name="keySelector">The function to extract the key for each element.</param>
        </member>
        <member name="M:CodeJam.Collections.KeyEqualityComparer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.Collections.KeyEqualityComparer`2"/>.
            </summary>
            <param name="keySelector">The function to extract the key for each element.</param>
            <param name="comparer">The equality comparer to use to compare the keys.</param>
        </member>
        <member name="M:CodeJam.Collections.KeyEqualityComparer`2.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <typeparamref name="T"/> to compare.</param>
            <param name="y">The second object of type <typeparamref name="T"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.KeyEqualityComparer`2.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
        </member>
        <member name="T:CodeJam.Collections.CollectionExtensions">
            <summary>
            Various collections extensions.
            </summary>
        </member>
        <member name="M:CodeJam.Collections.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Indicates whether the specified collection is <c>null</c> or empty.
            </summary>
            <param name="collection">The collection to test for emptiness.</param>
            <returns>
            <c>true</c>, if the <paramref name="collection"/> parameter is <c>null</c>
            or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.CollectionExtensions.IsNullOrEmpty``1(``0[])">
            <summary>
            Indicates whether the specified array is <c>null</c> or empty.
            </summary>
            <param name="array">The collection to test for emptiness.</param>
            <returns>
            <c>true</c>, if the <paramref name="array"/> parameter is <c>null</c>
            or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.CollectionExtensions.NotNullNorEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Indicates whether the specified collection is not null nor empty.
            </summary>
            <param name="collection">The collection to test.</param>
            <returns>
            <c>true</c>, if the <paramref name="collection"/> parameter is not null nor empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.CollectionExtensions.NotNullNorEmpty``1(``0[])">
            <summary>
            Indicates whether the specified array is is not null nor empty.
            </summary>
            <param name="array">The collection to test.</param>
            <returns>
            <c>true</c>, if the <paramref name="array"/> parameter is not null nor empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Adds the elements to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of the items that the collection contains.</typeparam>
            <param name="source">The collection to add the elements to.</param>
            <param name="items">The items to add to the collection.</param>
        </member>
        <member name="M:CodeJam.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Adds the elements to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of the items that the collection contains.</typeparam>
            <param name="source">The collection to add the elements to.</param>
            <param name="items">The items to add to the collection.</param>
        </member>
        <member name="M:CodeJam.Collections.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements to the end of the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of the items that the collection contains.</typeparam>
            <param name="source">The collection to add the elements to.</param>
            <param name="items">The items to add to the collection.</param>
        </member>
        <member name="T:CodeJam.EnumCode">
            <summary>Enum assertions class.</summary>
        </member>
        <member name="M:CodeJam.EnumCode.Defined``1(``0,System.String)">
            <summary>Asserts that specified argument enum value is defined.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The argument.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.EnumCode.FlagsDefined``1(``0,System.String)">
            <summary>Asserts that all bits of the flags combination are defined.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="argFlags">The bitwise combinations of the flags to check.</param>
            <param name="argName">Name of the argument.</param>
        </member>
        <member name="M:CodeJam.EnumCode.FlagSet``1(``0,System.String,``0)">
            <summary>Asserts that the specified argument flag is set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The argument.</param>
            <param name="argName">Name of the argument.</param>
            <param name="flag">The flag.</param>
        </member>
        <member name="M:CodeJam.EnumCode.AnyFlagUnset``1(``0,System.String,``0)">
            <summary>Asserts that any bit from specified argument flag is not set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The argument.</param>
            <param name="argName">Name of the argument.</param>
            <param name="flags">The bitwise combinations of the flags.</param>
        </member>
        <member name="M:CodeJam.EnumCode.AnyFlagSet``1(``0,System.String,``0)">
            <summary>Asserts that any bit from specified argument flag is set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The argument.</param>
            <param name="argName">Name of the argument.</param>
            <param name="flags">The bitwise combinations of the flags.</param>
        </member>
        <member name="M:CodeJam.EnumCode.FlagUnset``1(``0,System.String,``0)">
            <summary>Asserts that the specified argument flag is not set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The argument.</param>
            <param name="argName">Name of the argument.</param>
            <param name="flag">The flag.</param>
        </member>
        <member name="M:CodeJam.EnumCode.StateFlagSet``1(``0,``0,System.String)">
            <summary>Asserts that the specified state flag is set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CodeJam.EnumCode.StateFlagSet``1(``0,``0,System.String,System.Object[])">
            <summary>Asserts that the specified state flag is set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:CodeJam.EnumCode.AnyStateFlagUnset``1(``0,``0,System.String)">
            <summary>Asserts that any bit from specified state flag is not set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The value.</param>
            <param name="flags">The bitwise combinations of the flags.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CodeJam.EnumCode.AnyStateFlagUnset``1(``0,``0,System.String,System.Object[])">
            <summary>Asserts that any bit from specified state flag is not set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The value.</param>
            <param name="flags">The bitwise combinations of the flags.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:CodeJam.EnumCode.AnyStateFlagSet``1(``0,``0,System.String)">
            <summary>Asserts that any bit from specified state flag is set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The value.</param>
            <param name="flags">The bitwise combinations of the flags.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CodeJam.EnumCode.AnyStateFlagSet``1(``0,``0,System.String,System.Object[])">
            <summary>Asserts that any bit from specified state flag is set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The value.</param>
            <param name="flags">The bitwise combinations of the flags.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:CodeJam.EnumCode.StateFlagUnset``1(``0,``0,System.String)">
            <summary>Asserts that the specified state flag is not set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:CodeJam.EnumCode.StateFlagUnset``1(``0,``0,System.String,System.Object[])">
            <summary>Asserts that the specified state flag is not set.</summary>
            <typeparam name="TEnum">The type of the enum value.</typeparam>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <param name="messageFormat">The message format.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:CodeJam.Dates.DateTimeRangeExtensions">
            <summary>
            Helper methods for date manipulations
            </summary>
            <summary>
            Helper methods for date manipulations
            </summary>
            <summary>
            Helper methods for date manipulations
            </summary>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.GetMonthRange(System.DateTimeOffset)">
            <summary>Returns date range for month.</summary>
            <param name="date">The date.</param>
            <returns>Date range for month</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.GetYearRange(System.DateTimeOffset)">
            <summary>Returns date range for year.</summary>
            <param name="date">The date.</param>
            <returns>Date range for year</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.GetFromStartOfYearRange(System.DateTimeOffset)">
            <summary>Gets date range from start of the year to the current date.</summary>
            <param name="date">The date.</param>
            <returns>Date range.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.GetToEndOfYearRange(System.DateTimeOffset)">
            <summary>Gets date range from start of the year to the current date.</summary>
            <param name="date">The date.</param>
            <returns>Date range.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.MakeInclusive(CodeJam.Ranges.Range{System.DateTimeOffset})">
            <summary>Replaces exclusive boundaries with inclusive ones.</summary>
            <param name="range">The date range.</param>
            <returns>A range with inclusive boundaries.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.MakeExclusive(CodeJam.Ranges.Range{System.DateTimeOffset})">
            <summary>Replaces inclusive boundaries with exclusive ones.</summary>
            <param name="range">The date range.</param>
            <returns>A range with inclusive boundaries.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.DifferenceInDays(CodeJam.Ranges.Range{System.DateTimeOffset})">
            <summary>Returns delta between two dates measured in days.</summary>
            <param name="range">The date range.</param>
            <returns>Delta between two dates measured in days.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.CountOfDays(CodeJam.Ranges.Range{System.DateTimeOffset})">
            <summary>Returns count of days between two dates.</summary>
            <param name="range">The date range.</param>
            <returns>Count of days between two dates.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.DifferenceInMonths(CodeJam.Ranges.Range{System.DateTimeOffset})">
            <summary>Returns delta between two dates measured in months.</summary>
            <param name="range">The date range.</param>
            <returns>Delta between two dates measured in months.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.CountOfMonths(CodeJam.Ranges.Range{System.DateTimeOffset})">
            <summary>Returns count of month between two dates.</summary>
            <param name="range">The date range.</param>
            <returns>Count of month between two dates.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.DaysBetween(CodeJam.Ranges.Range{System.DateTimeOffset})">
            <summary>Returns first days in range.</summary>
            <param name="range">The date range.</param>
            <returns>First days of months in range</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.MonthsBetween(CodeJam.Ranges.Range{System.DateTimeOffset})">
            <summary>Returns first days of months in range.</summary>
            <param name="range">The date range.</param>
            <returns>First days of months in range</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.YearsBetween(CodeJam.Ranges.Range{System.DateTimeOffset})">
            <summary>Returns first days of years in range.</summary>
            <param name="range">The date range.</param>
            <returns>First days of years in range</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.SplitByMonths(CodeJam.Ranges.Range{System.DateTimeOffset})">
            <summary>Splits the range by months.</summary>
            <param name="range">The date range.</param>
            <returns>Ranges splitted by first day of months in range.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.SplitByYears(CodeJam.Ranges.Range{System.DateTimeOffset})">
            <summary>Splits the range by years.</summary>
            <param name="range">The date range.</param>
            <returns>Ranges splitted by first day of years in range.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.GetMonthRange(System.DateTime)">
            <summary>Returns date range for month.</summary>
            <param name="date">The date.</param>
            <returns>Date range for month</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.GetYearRange(System.DateTime)">
            <summary>Returns date range for year.</summary>
            <param name="date">The date.</param>
            <returns>Date range for year</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.GetFromStartOfYearRange(System.DateTime)">
            <summary>Gets date range from start of the year to the current date.</summary>
            <param name="date">The date.</param>
            <returns>Date range.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.GetToEndOfYearRange(System.DateTime)">
            <summary>Gets date range from start of the year to the current date.</summary>
            <param name="date">The date.</param>
            <returns>Date range.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.MakeInclusive(CodeJam.Ranges.Range{System.DateTime})">
            <summary>Replaces exclusive boundaries with inclusive ones.</summary>
            <param name="range">The date range.</param>
            <returns>A range with inclusive boundaries.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.MakeExclusive(CodeJam.Ranges.Range{System.DateTime})">
            <summary>Replaces inclusive boundaries with exclusive ones.</summary>
            <param name="range">The date range.</param>
            <returns>A range with inclusive boundaries.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.DifferenceInDays(CodeJam.Ranges.Range{System.DateTime})">
            <summary>Returns delta between two dates measured in days.</summary>
            <param name="range">The date range.</param>
            <returns>Delta between two dates measured in days.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.CountOfDays(CodeJam.Ranges.Range{System.DateTime})">
            <summary>Returns count of days between two dates.</summary>
            <param name="range">The date range.</param>
            <returns>Count of days between two dates.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.DifferenceInMonths(CodeJam.Ranges.Range{System.DateTime})">
            <summary>Returns delta between two dates measured in months.</summary>
            <param name="range">The date range.</param>
            <returns>Delta between two dates measured in months.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.CountOfMonths(CodeJam.Ranges.Range{System.DateTime})">
            <summary>Returns count of month between two dates.</summary>
            <param name="range">The date range.</param>
            <returns>Count of month between two dates.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.DaysBetween(CodeJam.Ranges.Range{System.DateTime})">
            <summary>Returns first days in range.</summary>
            <param name="range">The date range.</param>
            <returns>First days of months in range</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.MonthsBetween(CodeJam.Ranges.Range{System.DateTime})">
            <summary>Returns first days of months in range.</summary>
            <param name="range">The date range.</param>
            <returns>First days of months in range</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.YearsBetween(CodeJam.Ranges.Range{System.DateTime})">
            <summary>Returns first days of years in range.</summary>
            <param name="range">The date range.</param>
            <returns>First days of years in range</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.SplitByMonths(CodeJam.Ranges.Range{System.DateTime})">
            <summary>Splits the range by months.</summary>
            <param name="range">The date range.</param>
            <returns>Ranges splitted by first day of months in range.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeRangeExtensions.SplitByYears(CodeJam.Ranges.Range{System.DateTime})">
            <summary>Splits the range by years.</summary>
            <param name="range">The date range.</param>
            <returns>Ranges splitted by first day of years in range.</returns>
        </member>
        <member name="T:CodeJam.Dates.DateTimeExtensions">
            <summary>
            Helper methods for date manipulations
            </summary>
            <summary>
            Helper methods for date manipulations
            </summary>
            <summary>
            Helper methods for date manipulations
            </summary>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.DaysInMonth(System.DateTime)">
            <summary>Returns count of days in month.</summary>
            <param name="date">The date.</param>
            <returns>Count of days in month.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.DaysInMonth(System.DateTimeOffset)">
            <summary>Returns count of days in month.</summary>
            <param name="date">The date.</param>
            <returns>Count of days in month.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.DaysInYear(System.DateTime)">
            <summary>Returns count of days in year.</summary>
            <param name="date">The date.</param>
            <returns>Count of days in year.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.DaysInYear(System.DateTimeOffset)">
            <summary>Returns count of days in year.</summary>
            <param name="date">The date.</param>
            <returns>Count of days in year.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithDay(System.DateTimeOffset,System.Int32)">
            <summary>Updates the day of the date.</summary>
            <param name="date">The date.</param>
            <param name="day">The day.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithMonth(System.DateTimeOffset,System.Int32)">
            <summary>Updates the month of the date.</summary>
            <param name="date">The date.</param>
            <param name="month">The month.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithMonth(System.DateTimeOffset,System.Int32,System.Boolean)">
            <summary>Updates the month of the date.</summary>
            <param name="date">The date.</param>
            <param name="month">The month.</param>
            <param name="useLastDay">if set to <c>true</c>, the call preserves last day of the month, 2000/02/28 => 2000/01/31.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.AddMonths(System.DateTimeOffset,System.Int32,System.Boolean)">
            <summary>Returns the date resulting from adding the given number of months to this date.</summary>
            <param name="date">The date.</param>
            <param name="monthOffset">The month offset.</param>
            <param name="useLastDay">if set to <c>true</c>, the call preserves last day of the month, 2000/02/28 => 2000/01/31.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithYear(System.DateTimeOffset,System.Int32)">
            <summary>Updates the year of the date.</summary>
            <param name="date">The date.</param>
            <param name="year">The year.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithYear(System.DateTimeOffset,System.Int32,System.Boolean)">
            <summary>Updates the year of the date.</summary>
            <param name="date">The date.</param>
            <param name="year">The year.</param>
            <param name="useLastDay">if set to <c>true</c>, the call preserves last day of the month, 2001/02/28 => 2004/02/29.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.AddYears(System.DateTimeOffset,System.Int32,System.Boolean)">
            <summary>Returns the date resulting from adding the given number of years to this date.</summary>
            <param name="date">The date.</param>
            <param name="yearOffset">The year offset.</param>
            <param name="useLastDay">if set to <c>true</c>, the call preserves last day of the month, 2001/02/28 => 2004/02/29.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithMonthAndDay(System.DateTimeOffset,System.Int32,System.Int32)">
            <summary>Updates the month and the day of the date.</summary>
            <param name="date">The date.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithMonthAndDay(System.DateTimeOffset,System.Int32,System.Int32,System.Boolean)">
            <summary>Updates the month and the day of the date.</summary>
            <param name="date">The date.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <param name="useLastDay">if set to <c>true</c>, the call preserves last day of the month, 2001/02/28 =&gt; 2004/02/29.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithYearAndMonth(System.DateTimeOffset,System.Int32,System.Int32)">
            <summary>Updates the year and the month of the date.</summary>
            <param name="date">The date.</param>
            <param name="month">The month.</param>
            <param name="year">The year.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithYearAndMonth(System.DateTimeOffset,System.Int32,System.Int32,System.Boolean)">
            <summary>Updates the month and the year of the date.</summary>
            <param name="date">The date.</param>
            <param name="month">The month.</param>
            <param name="year">The year.</param>
            <param name="useLastDay">if set to <c>true</c>, the call preserves last day of the month, 2001/02/28 => 2004/02/29.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.PrevDay(System.DateTimeOffset)">
            <summary>Returns previous day of the date.</summary>
            <param name="date">The date.</param>
            <returns>Previous date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.NextDay(System.DateTimeOffset)">
            <summary>Returns next day of the date.</summary>
            <param name="date">The date.</param>
            <returns>Next day.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.PrevMonth(System.DateTimeOffset)">
            <summary>Returns previous month of the date.</summary>
            <param name="date">The date.</param>
            <returns>Previous month.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.NextMonth(System.DateTimeOffset)">
            <summary>Returns next month of the date.</summary>
            <param name="date">The date.</param>
            <returns>Next month.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.PrevYear(System.DateTimeOffset)">
            <summary>Returns previous year of the date.</summary>
            <param name="date">The date.</param>
            <returns>Previous year.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.NextYear(System.DateTimeOffset)">
            <summary>Returns next year of the date.</summary>
            <param name="date">The date.</param>
            <returns>Next year.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.FirstDayOfMonth(System.DateTimeOffset)">
            <summary>Returns the first day of month.</summary>
            <param name="date">The date.</param>
            <returns>The first day of month.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.LastDayOfMonth(System.DateTimeOffset)">
            <summary>Returns the last day of month.</summary>
            <param name="date">The date.</param>
            <returns>The last day of month.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.FirstDayOfYear(System.DateTimeOffset)">
            <summary>Returns the first day of year.</summary>
            <param name="date">The date.</param>
            <returns>The first day of year.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.LastDayOfYear(System.DateTimeOffset)">
            <summary>Returns the last day of year.</summary>
            <param name="date">The date.</param>
            <returns>The last day of year.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithDay(System.DateTime,System.Int32)">
            <summary>Updates the day of the date.</summary>
            <param name="date">The date.</param>
            <param name="day">The day.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithMonth(System.DateTime,System.Int32)">
            <summary>Updates the month of the date.</summary>
            <param name="date">The date.</param>
            <param name="month">The month.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithMonth(System.DateTime,System.Int32,System.Boolean)">
            <summary>Updates the month of the date.</summary>
            <param name="date">The date.</param>
            <param name="month">The month.</param>
            <param name="useLastDay">if set to <c>true</c>, the call preserves last day of the month, 2000/02/28 => 2000/01/31.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.AddMonths(System.DateTime,System.Int32,System.Boolean)">
            <summary>Returns the date resulting from adding the given number of months to this date.</summary>
            <param name="date">The date.</param>
            <param name="monthOffset">The month offset.</param>
            <param name="useLastDay">if set to <c>true</c>, the call preserves last day of the month, 2000/02/28 => 2000/01/31.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithYear(System.DateTime,System.Int32)">
            <summary>Updates the year of the date.</summary>
            <param name="date">The date.</param>
            <param name="year">The year.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithYear(System.DateTime,System.Int32,System.Boolean)">
            <summary>Updates the year of the date.</summary>
            <param name="date">The date.</param>
            <param name="year">The year.</param>
            <param name="useLastDay">if set to <c>true</c>, the call preserves last day of the month, 2001/02/28 => 2004/02/29.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.AddYears(System.DateTime,System.Int32,System.Boolean)">
            <summary>Returns the date resulting from adding the given number of years to this date.</summary>
            <param name="date">The date.</param>
            <param name="yearOffset">The year offset.</param>
            <param name="useLastDay">if set to <c>true</c>, the call preserves last day of the month, 2001/02/28 => 2004/02/29.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithMonthAndDay(System.DateTime,System.Int32,System.Int32)">
            <summary>Updates the month and the day of the date.</summary>
            <param name="date">The date.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithMonthAndDay(System.DateTime,System.Int32,System.Int32,System.Boolean)">
            <summary>Updates the month and the day of the date.</summary>
            <param name="date">The date.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <param name="useLastDay">if set to <c>true</c>, the call preserves last day of the month, 2001/02/28 =&gt; 2004/02/29.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithYearAndMonth(System.DateTime,System.Int32,System.Int32)">
            <summary>Updates the year and the month of the date.</summary>
            <param name="date">The date.</param>
            <param name="month">The month.</param>
            <param name="year">The year.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.WithYearAndMonth(System.DateTime,System.Int32,System.Int32,System.Boolean)">
            <summary>Updates the month and the year of the date.</summary>
            <param name="date">The date.</param>
            <param name="month">The month.</param>
            <param name="year">The year.</param>
            <param name="useLastDay">if set to <c>true</c>, the call preserves last day of the month, 2001/02/28 => 2004/02/29.</param>
            <returns>Updated date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.PrevDay(System.DateTime)">
            <summary>Returns previous day of the date.</summary>
            <param name="date">The date.</param>
            <returns>Previous date.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.NextDay(System.DateTime)">
            <summary>Returns next day of the date.</summary>
            <param name="date">The date.</param>
            <returns>Next day.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.PrevMonth(System.DateTime)">
            <summary>Returns previous month of the date.</summary>
            <param name="date">The date.</param>
            <returns>Previous month.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.NextMonth(System.DateTime)">
            <summary>Returns next month of the date.</summary>
            <param name="date">The date.</param>
            <returns>Next month.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.PrevYear(System.DateTime)">
            <summary>Returns previous year of the date.</summary>
            <param name="date">The date.</param>
            <returns>Previous year.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.NextYear(System.DateTime)">
            <summary>Returns next year of the date.</summary>
            <param name="date">The date.</param>
            <returns>Next year.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.FirstDayOfMonth(System.DateTime)">
            <summary>Returns the first day of month.</summary>
            <param name="date">The date.</param>
            <returns>The first day of month.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.LastDayOfMonth(System.DateTime)">
            <summary>Returns the last day of month.</summary>
            <param name="date">The date.</param>
            <returns>The last day of month.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.FirstDayOfYear(System.DateTime)">
            <summary>Returns the first day of year.</summary>
            <param name="date">The date.</param>
            <returns>The first day of year.</returns>
        </member>
        <member name="M:CodeJam.Dates.DateTimeExtensions.LastDayOfYear(System.DateTime)">
            <summary>Returns the last day of year.</summary>
            <param name="date">The date.</param>
            <returns>The last day of year.</returns>
        </member>
        <member name="T:CodeJam.EnumHelper">
            <summary>
            Extension methods for Enum types
            </summary>
        </member>
        <member name="M:CodeJam.EnumHelper.IsDefined``1(``0)">
            <summary>Determines whether the specified value is defined.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value to check.</param>
            <returns>True, if enum defines the value.</returns>
        </member>
        <member name="M:CodeJam.EnumHelper.AreFlagsDefined``1(``0)">
            <summary>Determines whether all bits of the flags combination are defined.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="flags">The flags to check.</param>
            <returns>True, if enum defines all bits of the flags combination.</returns>
        </member>
        <member name="M:CodeJam.EnumHelper.IsFlagsEnum``1">
            <summary>Determines whether the enum has flags modifier.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <returns>True, if the enum is flags enum</returns>
        </member>
        <member name="M:CodeJam.EnumHelper.GetFlagsMask``1">
            <summary>Returns a combination of all flags declared in the enum.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <returns>
            A combination of all flags declared in the enum, or <c>default(TEnum)</c> if <see cref="M:CodeJam.EnumHelper.IsFlagsEnum``1"/> is false.
            </returns>
        </member>
        <member name="M:CodeJam.EnumHelper.TryParse``1(System.String,``0@)">
            <summary>Try to parse the enum value.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="name">The name.</param>
            <param name="result">The parsed value.</param>
            <returns><c>true</c>, if parsing was successful; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CodeJam.EnumHelper.TryParse``1(System.String,System.Boolean,``0@)">
            <summary>Try to parse the enum value.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="name">The name.</param>
            <param name="ignoreCase">If set to <c>true</c> the case of the name will be ignored.</param>
            <param name="result">The parsed value.</param>
            <returns><c>true</c>, if parsing was successful; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CodeJam.EnumHelper.TryParse``1(System.String,System.Boolean)">
            <summary>Try to parse the enum value.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="name">The name.</param>
            <param name="ignoreCase">If set to <c>true</c> the case of the name will be ignored.</param>
            <returns>Parsed value, if parsing was successful; <c>null</c> otherwise.</returns>
        </member>
        <member name="M:CodeJam.EnumHelper.Parse``1(System.String,System.Boolean)">
            <summary>Parse the enum value.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="name">The name.</param>
            <param name="ignoreCase">If set to <c>true</c> the case of the name will be ignored.</param>
            <returns>Parsed value.</returns>
        </member>
        <member name="M:CodeJam.EnumHelper.GetNameValues``1(System.Boolean)">
            <summary>Returns a dictionary containing the enum names and their values.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="ignoreCase">If set to <c>true</c> the case of the name will be ignored.</param>
            <returns>Returns a dictionary containing the enum names and their values.</returns>
        </member>
        <member name="M:CodeJam.EnumHelper.GetNames``1(System.Boolean)">
            <summary>
            Retrieves an array of the names of the constants in a specified enumeration.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="ignoreCase">If set to <c>true</c> the case of the name will be ignored.</param>
            <returns>A string array of the names of the constants in enumType.</returns>
        </member>
        <member name="M:CodeJam.EnumHelper.GetValues``1">
            <summary>
            Retrieves an array of the values of the constants in a specified enumeration.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <returns>An array that contains the values of the constants in enumType.</returns>
        </member>
        <member name="M:CodeJam.EnumHelper.GetName``1(``0)">
            <summary>Returns the name of the enum value.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The enum value.</param>
            <returns>The name of the enum value, or <c>null</c> if there is no value defined.</returns>
        </member>
        <member name="M:CodeJam.EnumHelper.IsFlagSet``1(``0,``0)">
            <summary>Determines whether the specified flag is set.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <returns><c>true</c> if the value includes all bits of the flag or the flag is zero.</returns>
        </member>
        <member name="M:CodeJam.EnumHelper.IsAnyFlagUnset``1(``0,``0)">
            <summary>Determines whether any bit from specified flag is not set.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <returns><c>true</c> if the value does not include all bits of the flag.</returns>
        </member>
        <member name="M:CodeJam.EnumHelper.IsAnyFlagSet``1(``0,``0)">
            <summary>Determines whether any bit from specified flag is set.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value.</param>
            <param name="flags">The bitwise combinations of the flags.</param>
            <returns><c>true</c> if the value includes any bit of the flags or the flag is zero.</returns>
        </member>
        <member name="M:CodeJam.EnumHelper.IsFlagUnset``1(``0,``0)">
            <summary>Determines whether the specified flag is not set.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value.</param>
            <param name="flags">The bitwise combinations of the flags.</param>
            <returns><c>true</c> if the value does not include any bit of the flags.</returns>
        </member>
        <member name="M:CodeJam.EnumHelper.SetFlag``1(``0,``0)">
            <summary>Sets the flag.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <returns>Bitwise combination of the flag and the value</returns>
        </member>
        <member name="M:CodeJam.EnumHelper.ClearFlag``1(``0,``0)">
            <summary>Clears the flag.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <returns>The bits of the value excluding the ones from the flag.</returns>
        </member>
        <member name="M:CodeJam.EnumHelper.SetFlag``1(``0,``0,System.Boolean)">
            <summary>Sets or clears the flag depending on <paramref name="enabled"/> value.</summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value.</param>
            <param name="flag">The flag.</param>
            <param name="enabled">Determines whether the flag should be set or cleared.</param>
            <returns>
            Bitwise combination of the flag and the value if the <paramref name="enabled"/> is <c>true</c>;
            otherwise, the result is the bits of the value excluding the ones from the flag.
            </returns>
        </member>
        <member name="T:CodeJam.ExceptionExtensions">
            <summary>
            The <see cref="T:System.Exception"/> class extensions.
            </summary>
        </member>
        <member name="M:CodeJam.ExceptionExtensions.ToDiagnosticString(System.Exception,System.Text.StringBuilder)">
            <summary>
            Returns detailed exception text.
            </summary>
            <param name="exception">Exception to process.</param>
            <param name="stringBuilder"><see cref="T:System.Text.StringBuilder"/> instance.</param>
            <returns>Detailed exception text.</returns>
        </member>
        <member name="M:CodeJam.ExceptionExtensions.ToDiagnosticString(System.Exception)">
            <summary>
            Returns detailed exception text.
            </summary>
            <param name="exception">Exception to process.</param>
            <returns>Detailed exception text.</returns>
        </member>
        <member name="T:CodeJam.Fn">
            <summary>
            Helper methods for <see cref="M:CodeJam.Fn.Func``1(System.Func{``0})"/> and <seealso cref="M:CodeJam.Fn.Action(System.Action)"/> delegates.
            </summary>
            <summary>
            Helper methods for <see cref="M:CodeJam.Fn.Func``1(System.Func{``0})"/> and <seealso cref="M:CodeJam.Fn.Action(System.Action)"/> delegates.
            </summary>
        </member>
        <member name="M:CodeJam.Fn.Action(System.Action)">
            <summary>Helper for type inference from the lambda callback.</summary>
            <param name="action">The lambda callback.</param>
            <returns>The lambda callback passed.</returns>
        </member>
        <member name="M:CodeJam.Fn.Action``1(System.Action{``0})">
            <summary>Helper for type inference from the lambda callback.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <param name="action">The lambda callback.</param>
            <returns>The lambda callback passed.</returns>
        </member>
        <member name="M:CodeJam.Fn.Action``2(System.Action{``0,``1})">
            <summary>Helper for type inference from the lambda callback.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <param name="action">The lambda callback.</param>
            <returns>The lambda callback passed.</returns>
        </member>
        <member name="M:CodeJam.Fn.Action``3(System.Action{``0,``1,``2})">
            <summary>Helper for type inference from the lambda callback.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <param name="action">The lambda callback.</param>
            <returns>The lambda callback passed.</returns>
        </member>
        <member name="M:CodeJam.Fn.Action``4(System.Action{``0,``1,``2,``3})">
            <summary>Helper for type inference from the lambda callback.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="T4">The type of argument #4.</typeparam>
            <param name="action">The lambda callback.</param>
            <returns>The lambda callback passed.</returns>
        </member>
        <member name="M:CodeJam.Fn.Action``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>Helper for type inference from the lambda callback.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="T4">The type of argument #4.</typeparam>
            <typeparam name="T5">The type of argument #5.</typeparam>
            <param name="action">The lambda callback.</param>
            <returns>The lambda callback passed.</returns>
        </member>
        <member name="M:CodeJam.Fn.Action``6(System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>Helper for type inference from the lambda callback.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="T4">The type of argument #4.</typeparam>
            <typeparam name="T5">The type of argument #5.</typeparam>
            <typeparam name="T6">The type of argument #6.</typeparam>
            <param name="action">The lambda callback.</param>
            <returns>The lambda callback passed.</returns>
        </member>
        <member name="M:CodeJam.Fn.Action``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>Helper for type inference from the lambda callback.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="T4">The type of argument #4.</typeparam>
            <typeparam name="T5">The type of argument #5.</typeparam>
            <typeparam name="T6">The type of argument #6.</typeparam>
            <typeparam name="T7">The type of argument #7.</typeparam>
            <param name="action">The lambda callback.</param>
            <returns>The lambda callback passed.</returns>
        </member>
        <member name="M:CodeJam.Fn.Func``1(System.Func{``0})">
            <summary>Helper for type inference from the lambda callback.</summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="func">The lambda callback.</param>
            <returns>The lambda callback passed.</returns>
        </member>
        <member name="M:CodeJam.Fn.Func``2(System.Func{``0,``1})">
            <summary>Helper for type inference from the lambda callback.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="func">The lambda callback.</param>
            <returns>The lambda callback passed.</returns>
        </member>
        <member name="M:CodeJam.Fn.Func``3(System.Func{``0,``1,``2})">
            <summary>Helper for type inference from the lambda callback.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="func">The lambda callback.</param>
            <returns>The lambda callback passed.</returns>
        </member>
        <member name="M:CodeJam.Fn.Func``4(System.Func{``0,``1,``2,``3})">
            <summary>Helper for type inference from the lambda callback.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="func">The lambda callback.</param>
            <returns>The lambda callback passed.</returns>
        </member>
        <member name="M:CodeJam.Fn.Func``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>Helper for type inference from the lambda callback.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="T4">The type of argument #4.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="func">The lambda callback.</param>
            <returns>The lambda callback passed.</returns>
        </member>
        <member name="M:CodeJam.Fn.Func``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>Helper for type inference from the lambda callback.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="T4">The type of argument #4.</typeparam>
            <typeparam name="T5">The type of argument #5.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="func">The lambda callback.</param>
            <returns>The lambda callback passed.</returns>
        </member>
        <member name="M:CodeJam.Fn.Func``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>Helper for type inference from the lambda callback.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="T4">The type of argument #4.</typeparam>
            <typeparam name="T5">The type of argument #5.</typeparam>
            <typeparam name="T6">The type of argument #6.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="func">The lambda callback.</param>
            <returns>The lambda callback passed.</returns>
        </member>
        <member name="M:CodeJam.Fn.Func``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>Helper for type inference from the lambda callback.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="T4">The type of argument #4.</typeparam>
            <typeparam name="T5">The type of argument #5.</typeparam>
            <typeparam name="T6">The type of argument #6.</typeparam>
            <typeparam name="T7">The type of argument #7.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="func">The lambda callback.</param>
            <returns>The lambda callback passed.</returns>
        </member>
        <member name="F:CodeJam.Fn.True">
            <summary>
            Gets the function that always returns true.
            </summary>
        </member>
        <member name="F:CodeJam.Fn.False">
            <summary>
            Gets the function that always returns false.
            </summary>
        </member>
        <member name="T:CodeJam.Expressions.Expr">
            <summary>
            Provides helper methods for Action and Func delegates.
            </summary>
        </member>
        <member name="M:CodeJam.Expressions.Expr.Action(System.Linq.Expressions.Expression{System.Action})">
            <summary>Helper for type inference from the lambda expression.</summary>
            <param name="actionExpression">The lambda expression.</param>
            <returns>The lambda expression passed.</returns>
        </member>
        <member name="M:CodeJam.Expressions.Expr.Action``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>Helper for type inference from the lambda expression.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <param name="actionExpression">The lambda expression.</param>
            <returns>The lambda expression passed.</returns>
        </member>
        <member name="M:CodeJam.Expressions.Expr.Action``2(System.Linq.Expressions.Expression{System.Action{``0,``1}})">
            <summary>Helper for type inference from the lambda expression.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <param name="actionExpression">The lambda expression.</param>
            <returns>The lambda expression passed.</returns>
        </member>
        <member name="M:CodeJam.Expressions.Expr.Action``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}})">
            <summary>Helper for type inference from the lambda expression.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <param name="actionExpression">The lambda expression.</param>
            <returns>The lambda expression passed.</returns>
        </member>
        <member name="M:CodeJam.Expressions.Expr.Action``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}})">
            <summary>Helper for type inference from the lambda expression.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="T4">The type of argument #4.</typeparam>
            <param name="actionExpression">The lambda expression.</param>
            <returns>The lambda expression passed.</returns>
        </member>
        <member name="M:CodeJam.Expressions.Expr.Action``5(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4}})">
            <summary>Helper for type inference from the lambda expression.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="T4">The type of argument #4.</typeparam>
            <typeparam name="T5">The type of argument #5.</typeparam>
            <param name="actionExpression">The lambda expression.</param>
            <returns>The lambda expression passed.</returns>
        </member>
        <member name="M:CodeJam.Expressions.Expr.Action``6(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5}})">
            <summary>Helper for type inference from the lambda expression.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="T4">The type of argument #4.</typeparam>
            <typeparam name="T5">The type of argument #5.</typeparam>
            <typeparam name="T6">The type of argument #6.</typeparam>
            <param name="actionExpression">The lambda expression.</param>
            <returns>The lambda expression passed.</returns>
        </member>
        <member name="M:CodeJam.Expressions.Expr.Action``7(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>Helper for type inference from the lambda expression.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="T4">The type of argument #4.</typeparam>
            <typeparam name="T5">The type of argument #5.</typeparam>
            <typeparam name="T6">The type of argument #6.</typeparam>
            <typeparam name="T7">The type of argument #7.</typeparam>
            <param name="actionExpression">The lambda expression.</param>
            <returns>The lambda expression passed.</returns>
        </member>
        <member name="M:CodeJam.Expressions.Expr.Func``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>Helper for type inference from the lambda expression.</summary>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="funcExpression">The lambda expression.</param>
            <returns>The lambda expression passed.</returns>
        </member>
        <member name="M:CodeJam.Expressions.Expr.Func``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>Helper for type inference from the lambda expression.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="funcExpression">The lambda expression.</param>
            <returns>The lambda expression passed.</returns>
        </member>
        <member name="M:CodeJam.Expressions.Expr.Func``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>Helper for type inference from the lambda expression.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="funcExpression">The lambda expression.</param>
            <returns>The lambda expression passed.</returns>
        </member>
        <member name="M:CodeJam.Expressions.Expr.Func``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>Helper for type inference from the lambda expression.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="funcExpression">The lambda expression.</param>
            <returns>The lambda expression passed.</returns>
        </member>
        <member name="M:CodeJam.Expressions.Expr.Func``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>Helper for type inference from the lambda expression.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="T4">The type of argument #4.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="funcExpression">The lambda expression.</param>
            <returns>The lambda expression passed.</returns>
        </member>
        <member name="M:CodeJam.Expressions.Expr.Func``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>Helper for type inference from the lambda expression.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="T4">The type of argument #4.</typeparam>
            <typeparam name="T5">The type of argument #5.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="funcExpression">The lambda expression.</param>
            <returns>The lambda expression passed.</returns>
        </member>
        <member name="M:CodeJam.Expressions.Expr.Func``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>Helper for type inference from the lambda expression.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="T4">The type of argument #4.</typeparam>
            <typeparam name="T5">The type of argument #5.</typeparam>
            <typeparam name="T6">The type of argument #6.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="funcExpression">The lambda expression.</param>
            <returns>The lambda expression passed.</returns>
        </member>
        <member name="M:CodeJam.Expressions.Expr.Func``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
            <summary>Helper for type inference from the lambda expression.</summary>
            <typeparam name="T1">The type of argument #1.</typeparam>
            <typeparam name="T2">The type of argument #2.</typeparam>
            <typeparam name="T3">The type of argument #3.</typeparam>
            <typeparam name="T4">The type of argument #4.</typeparam>
            <typeparam name="T5">The type of argument #5.</typeparam>
            <typeparam name="T6">The type of argument #6.</typeparam>
            <typeparam name="T7">The type of argument #7.</typeparam>
            <typeparam name="TResult">The result type.</typeparam>
            <param name="funcExpression">The lambda expression.</param>
            <returns>The lambda expression passed.</returns>
        </member>
        <member name="T:CodeJam.Expressions.ExpressionExtensions">
            <summary>
            <see cref="T:System.Linq.Expressions.Expression"/> Extensions.
            </summary>
        </member>
        <member name="M:CodeJam.Expressions.ExpressionExtensions.GetMemberInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MemberInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Expressions.ExpressionExtensions.GetProperty(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the property.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Expressions.ExpressionExtensions.GetField(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the field.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.FieldInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Expressions.ExpressionExtensions.GetConstructor(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the constructor.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.ConstructorInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Expressions.ExpressionExtensions.GetMethod(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Expressions.ExpressionExtensions.GetPropertyName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns a name of the property.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            A name of the property.
            </returns>
        </member>
        <member name="M:CodeJam.Expressions.ExpressionExtensions.GetFullPropertyName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns a composited name of the property.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            A composited name of the property.
            </returns>
        </member>
        <member name="M:CodeJam.Expressions.ExpressionExtensions.GetMethodName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Returns a name of the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            A name of the method.
            </returns>
        </member>
        <member name="M:CodeJam.Expressions.ExpressionExtensions.GetMembersInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MemberInfo"/> instance.
            </returns>
        </member>
        <member name="T:CodeJam.Lazy">
            <summary>
            Helper methods for <see cref="T:System.Lazy`1"/> class.
            </summary>
        </member>
        <member name="M:CodeJam.Lazy.Create``1">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`1"/> class. When lazy initialization occurs, the default
            constructor of the target type is used.
            </summary>
            <typeparam name="T">The type of object that is being lazily initialized.</typeparam>
            <returns>New <see cref="T:System.Lazy`1"/> instance.</returns>
        </member>
        <member name="M:CodeJam.Lazy.Create``1(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`1"/> class. When lazy initialization occurs, the default
            constructor of the target type is used.
            </summary>
            <typeparam name="T">The type of object that is being lazily initialized.</typeparam>
            <param name="isThreadSafe">
            <c>true</c> to make this instance usable concurrently by multiple threads; <c>false</c> to make the instance
            usable by only one thread at a time.
            </param>
            <returns>New <see cref="T:System.Lazy`1"/> instance.</returns>
        </member>
        <member name="M:CodeJam.Lazy.Create``1(System.Func{``0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`1"/> class. When lazy initialization occurs, the default
            constructor of the target type is used.
            </summary>
            <typeparam name="T">The type of object that is being lazily initialized.</typeparam>
            <param name="valueFactory">
            The delegate that is invoked to produce the lazily initialized value when it is needed.
            </param>
            <returns>New <see cref="T:System.Lazy`1"/> instance.</returns>
        </member>
        <member name="M:CodeJam.Lazy.Create``1(System.Threading.LazyThreadSafetyMode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`1"/> class. When lazy initialization occurs, the default
            constructor of the target type is used.
            </summary>
            <typeparam name="T">The type of object that is being lazily initialized.</typeparam>
            <param name="mode">One of the enumeration values that specifies the thread safety mode.</param>
            <returns>New <see cref="T:System.Lazy`1"/> instance.</returns>
        </member>
        <member name="M:CodeJam.Lazy.Create``1(System.Func{``0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`1"/> class. When lazy initialization occurs, the default
            constructor of the target type is used.
            </summary>
            <typeparam name="T">The type of object that is being lazily initialized.</typeparam>
            <param name="valueFactory">
            The delegate that is invoked to produce the lazily initialized value when it is needed.
            </param>
            <param name="isThreadSafe">
            <c>true</c> to make this instance usable concurrently by multiple threads; <c>false</c> to make the instance
            usable by only one thread at a time.
            </param>
            <returns>New <see cref="T:System.Lazy`1"/> instance.</returns>
        </member>
        <member name="M:CodeJam.Lazy.Create``1(System.Func{``0},System.Threading.LazyThreadSafetyMode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Lazy`1"/> class. When lazy initialization occurs, the default
            constructor of the target type is used.
            </summary>
            <typeparam name="T">The type of object that is being lazily initialized.</typeparam>
            <param name="valueFactory">
            The delegate that is invoked to produce the lazily initialized value when it is needed.
            </param>
            <param name="mode">One of the enumeration values that specifies the thread safety mode.</param>
            <returns>New <see cref="T:System.Lazy`1"/> instance.</returns>
        </member>
        <member name="T:CodeJam.NullableHelper">
            <summary>
            Helper method for nullable types.
            </summary>
        </member>
        <member name="M:CodeJam.NullableHelper.GetValueOrDefault``1(System.Nullable{``0},System.Func{``0})">
            <summary>
            Retrieves the value of the current <see cref="T:System.Nullable`1"/> object, or value returned by factory.
            </summary>
            <typeparam name="T">The underlying value type of the <see cref="T:System.Nullable`1"/> generic type.</typeparam>
            <param name="value">Nullable value.</param>
            <param name="defaultFactory">
            A function to return default value if the <see cref="P:System.Nullable`1.HasValue"/> property is <c>false</c>.
            </param>
            <returns>
            The value of the <see cref="P:System.Nullable`1.Value"/> property if the <see cref="P:System.Nullable`1.HasValue"/> property is
            <c>true</c>; otherwise, the value returned by <paramref name="defaultFactory"/> parameter.
            </returns>
        </member>
        <member name="M:CodeJam.NullableHelper.AsNullable``1(``0)">
            <summary>
            Returns nullable of specified value.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="value">THe value</param>
            <returns><paramref name="value"/> wrapped in nullabe.</returns>
        </member>
        <member name="T:CodeJam.Ranges.CompositeRange">
            <summary>Helper methods for the <seealso cref="T:CodeJam.Ranges.CompositeRange`1"/>.</summary>
            <summary>Helper methods for the <seealso cref="T:CodeJam.Ranges.CompositeRange`1"/>.</summary>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange.Create``1(CodeJam.Ranges.Range{``0})">
            <summary>Creates the composite range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The range.</param>
            <returns>A new composite range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange.Create``1(CodeJam.Ranges.Range{``0}[])">
            <summary>Creates the composite range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="ranges">The ranges.</param>
            <returns>A new composite range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange.Create``2(CodeJam.Ranges.Range{``0,``1})">
            <summary>Creates the composite range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The range.</param>
            <returns>A new composite range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange.Create``2(CodeJam.Ranges.Range{``0,``1}[])">
            <summary>Creates the composite range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="ranges">The ranges.</param>
            <returns>A new composite range.</returns>
        </member>
        <member name="T:CodeJam.Ranges.CompositeRangeInternal">
            <summary>CompositeRange internal helpers</summary>
        </member>
        <member name="T:CodeJam.Ranges.CompositeRangeInternal.UnsafeOverload">
            <summary>
            Helper enum to mark unsafe (no validation) constructor overloads.
            Should be used ONLY if the arguments are validated already
            AND the code is on the hotpath.
            </summary>
        </member>
        <member name="F:CodeJam.Ranges.CompositeRangeInternal.UnsafeOverload.FullValidation">
            <summary>Threat passed ranges as usual.</summary>
        </member>
        <member name="F:CodeJam.Ranges.CompositeRangeInternal.UnsafeOverload.NoEmptyRanges">
            <summary>Do not check for empty ranges.</summary>
        </member>
        <member name="F:CodeJam.Ranges.CompositeRangeInternal.UnsafeOverload.RangesAlreadySorted">
            <summary>Do not sort ranges.</summary>
        </member>
        <member name="F:CodeJam.Ranges.CompositeRangeInternal.UnsafeOverload.NoEmptyRangesAlreadySortedAndMerged">
            <summary>No validation at all.</summary>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeInternal.InsertInSortedList``1(System.Collections.Generic.List{``0},``0,System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>Inserts the value into a sorted list.</summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="sortedList">The sorted list.</param>
            <param name="value">The value.</param>
            <param name="comparer">The comparer.</param>
            <param name="skipDuplicates">If set to <c>true</c> duplicates are not inserted.</param>
            <returns>Index of the inserted item (or existing one if <paramref name="skipDuplicates"/> is set to <c>true</c>).</returns>
        </member>
        <member name="T:CodeJam.Ranges.Range">
            <summary>Helper methods for the <seealso cref="T:CodeJam.Ranges.Range`1"/>.</summary>
            <summary>Helper methods for the <seealso cref="T:CodeJam.Ranges.Range`1"/>.</summary>
            <summary>Helper methods for the <seealso cref="T:CodeJam.Ranges.Range`1"/>.</summary>
        </member>
        <member name="M:CodeJam.Ranges.Range.GetCompareToBoundary``1(``0)">
            <summary>Helper method for obtaining a comparison boundary from a value.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="value">The value to compare with.</param>
            <returns>A new boundary to be used in comparison</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.BoundaryFrom``1(``0)">
            <summary>Inclusive boundary From factory method.</summary>
            <typeparam name="T">The type of the boundary value.</typeparam>
            <param name="fromValue">From value.</param>
            <returns>
            New inclusive boundary From, or the negative infinity boundary if the <paramref name="fromValue"/> is <c>null</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.BoundaryFromExclusive``1(``0)">
            <summary>Exclusive boundary From factory method.</summary>
            <typeparam name="T">The type of the boundary value.</typeparam>
            <param name="fromValue">From value.</param>
            <returns>
            New exclusive boundary From, or the negative infinity boundary if the <paramref name="fromValue"/> is <c>null</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.BoundaryFromInfinity``1">
            <summary>Negative infinity boundary (-∞) factory method.</summary>
            <typeparam name="T">The type of the boundary value.</typeparam>
            <returns>The negative infinity boundary (-∞).</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.BoundaryTo``1(``0)">
            <summary>Inclusive boundary To factory method.</summary>
            <typeparam name="T">The type of the boundary value.</typeparam>
            <param name="toValue">To value.</param>
            <returns>
            New inclusive boundary To, or the positive infinity boundary if the <paramref name="toValue"/> is <c>null</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.BoundaryToExclusive``1(``0)">
            <summary>Exclusive boundary To factory method.</summary>
            <typeparam name="T">The type of the boundary value.</typeparam>
            <param name="toValue">To value.</param>
            <returns>
            New exclusive boundary To, or the positive infinity boundary if the <paramref name="toValue"/> is <c>null</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.BoundaryToInfinity``1">
            <summary>Positive infinity boundary (+∞) factory method.</summary>
            <typeparam name="T">The type of the boundary value.</typeparam>
            <returns>The positive infinity boundary (-∞).</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.Min``1(CodeJam.Ranges.RangeBoundaryFrom{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})">
            <summary>Returns the less one of the two boundaries.</summary>
            <typeparam name="T">The type of the boundary value.</typeparam>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns>The less one of the two boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.Min``1(CodeJam.Ranges.RangeBoundaryTo{``0},CodeJam.Ranges.RangeBoundaryTo{``0})">
            <summary>Returns the less one of the two boundaries.</summary>
            <typeparam name="T">The type of the boundary value.</typeparam>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns>The less one of the two boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.Max``1(CodeJam.Ranges.RangeBoundaryFrom{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})">
            <summary>Returns the greater one of the two boundaries.</summary>
            <typeparam name="T">The type of the boundary value.</typeparam>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns>The greater one of the two boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.Max``1(CodeJam.Ranges.RangeBoundaryTo{``0},CodeJam.Ranges.RangeBoundaryTo{``0})">
            <summary>Returns the greater one of the two boundaries.</summary>
            <typeparam name="T">The type of the boundary value.</typeparam>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns>The greater one of the two boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.MinFrom``1(``0,``0)">
            <summary>Returns the less one of the two From boundaries.</summary>
            <typeparam name="T">The type of the boundary value.</typeparam>
            <param name="value1">The value of the boundary1.</param>
            <param name="value2">The value of the boundary2.</param>
            <returns>The less one of the two From boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.MaxFrom``1(``0,``0)">
            <summary>Returns the greater one of the two From boundaries.</summary>
            <typeparam name="T">The type of the boundary value.</typeparam>
            <param name="value1">The value of the boundary1.</param>
            <param name="value2">The value of the boundary2.</param>
            <returns>The greater one of the two From boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.MinTo``1(``0,``0)">
            <summary>Returns the less one of the two To boundaries.</summary>
            <typeparam name="T">The type of the boundary value.</typeparam>
            <param name="value1">The value of the boundary1.</param>
            <param name="value2">The value of the boundary2.</param>
            <returns>The less one of the two To boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.MaxTo``1(``0,``0)">
            <summary>Returns the greater one of the two To boundaries.</summary>
            <typeparam name="T">The type of the boundary value.</typeparam>
            <param name="value1">The value of the boundary1.</param>
            <param name="value2">The value of the boundary2.</param>
            <returns>The greater one of the two To boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.IsValid``1(``0,``0)">
            <summary>Returns true if the boundaries can be used for valid range creation.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="from">The value of the boundary From.</param>
            <param name="to">The value of the boundary To.</param>
            <returns><c>true</c>, if the boundaries can be used for valid range creation.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.IsValid``1(CodeJam.Ranges.RangeBoundaryFrom{``0},CodeJam.Ranges.RangeBoundaryTo{``0})">
            <summary>Returns true if the boundaries can be used for valid range creation.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="from">Boundary From.</param>
            <param name="to">Boundary To.</param>
            <returns><c>true</c>, if the boundaries can be used for valid range creation.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.TryCreate``1(CodeJam.Ranges.RangeBoundaryFrom{``0},CodeJam.Ranges.RangeBoundaryTo{``0})">
            <summary>Tries to create the range. Returns empty range if failed.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="from">Boundary From.</param>
            <param name="to">Boundary To.</param>
            <returns>A new range or empty range if the boundaries forms invalid range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.TryCreate``2(CodeJam.Ranges.RangeBoundaryFrom{``0},CodeJam.Ranges.RangeBoundaryTo{``0},``1)">
            <summary>Tries to create the range. Returns empty range if failed.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="from">Boundary From.</param>
            <param name="to">Boundary To.</param>
            <param name="key">The value of the range key</param>
            <returns>A new range or empty range if the boundaries forms invalid range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.Create``1(CodeJam.Ranges.RangeBoundaryFrom{``0},CodeJam.Ranges.RangeBoundaryTo{``0})">
            <summary>Creates the range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="from">Boundary From.</param>
            <param name="to">Boundary To.</param>
            <returns>A new range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.Create``1(``0,``0)">
            <summary>Creates the range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="fromValue">The value of the boundary From inclusive.</param>
            <param name="toValue">The value of the boundary To inclusive.</param>
            <returns>A new range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.CreateExclusive``1(``0,``0)">
            <summary>Creates the range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="fromValue">The value of the boundary From exclusive.</param>
            <param name="toValue">The value of the boundary To exclusive.</param>
            <returns>A new range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.CreateExclusiveFrom``1(``0,``0)">
            <summary>Creates the range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="fromValue">The value of the boundary From exclusive.</param>
            <param name="toValue">The value of the boundary To inclusive.</param>
            <returns>A new range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.CreateExclusiveTo``1(``0,``0)">
            <summary>Creates the range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="fromValue">The value of the boundary From inclusive.</param>
            <param name="toValue">The value of the boundary To exclusive.</param>
            <returns>A new range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.TryCreate``1(``0,``0)">
            <summary>Tries to create the range. Returns empty range if failed.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="fromValue">The value of the boundary From inclusive.</param>
            <param name="toValue">The value of the boundary To inclusive.</param>
            <returns>A new range or empty range if the boundaries forms invalid range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.TryCreateExclusive``1(``0,``0)">
            <summary>Tries to create the range. Returnss empty range if failed.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="fromValue">The value of the boundary From exclusive.</param>
            <param name="toValue">The value of the boundary To exclusive.</param>
            <returns>A new range or empty range if the boundaries forms invalid range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.TryCreateExclusiveFrom``1(``0,``0)">
            <summary>Tries to create the range. Returns empty range if failed.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="fromValue">The value of the boundary From exclusive.</param>
            <param name="toValue">The value of the boundary To inclusive.</param>
            <returns>A new range or empty range if the boundaries forms invalid range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.TryCreateExclusiveTo``1(``0,``0)">
            <summary>Tries to create the range. Returns empty range if failed.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="fromValue">The value of the boundary From inclusive.</param>
            <param name="toValue">The value of the boundary To exclusive.</param>
            <returns>A new range or empty range if the boundaries forms invalid range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.Create``2(CodeJam.Ranges.RangeBoundaryFrom{``0},CodeJam.Ranges.RangeBoundaryTo{``0},``1)">
            <summary>Creates the range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="from">Boundary From.</param>
            <param name="to">Boundary To.</param>
            <param name="key">The value of the range key.</param>
            <returns>A new range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.Create``2(``0,``0,``1)">
            <summary>Creates the range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="fromValue">The value of the boundary From inclusive.</param>
            <param name="toValue">The value of the boundary To inclusive.</param>
            <param name="key">The value of the range key.</param>
            <returns>A new range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.CreateExclusive``2(``0,``0,``1)">
            <summary>Creates the range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="fromValue">The value of the boundary From exclusive.</param>
            <param name="toValue">The value of the boundary To exclusive.</param>
            <param name="key">The value of the range key.</param>
            <returns>A new range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.CreateExclusiveFrom``2(``0,``0,``1)">
            <summary>Creates the range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="fromValue">The value of the boundary From exclusive.</param>
            <param name="toValue">The value of the boundary To inclusive.</param>
            <param name="key">The value of the range key.</param>
            <returns>A new range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.CreateExclusiveTo``2(``0,``0,``1)">
            <summary>Creates the range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="fromValue">The value of the boundary From inclusive.</param>
            <param name="toValue">The value of the boundary To exclusive.</param>
            <param name="key">The value of the range key.</param>
            <returns>A new range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.TryCreate``2(``0,``0,``1)">
            <summary>Tries to create the range. Returns empty range if failed.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="fromValue">The value of the boundary From inclusive.</param>
            <param name="toValue">The value of the boundary To inclusive.</param>
            <param name="key">The value of the range key.</param>
            <returns>A new range or empty range if the boundaries forms invalid range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.TryCreateExclusive``2(``0,``0,``1)">
            <summary>Tries to create the range. Returnss empty range if failed.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="fromValue">The value of the boundary From exclusive.</param>
            <param name="toValue">The value of the boundary To exclusive.</param>
            <param name="key">The value of the range key.</param>
            <returns>A new range or empty range if the boundaries forms invalid range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.TryCreateExclusiveFrom``2(``0,``0,``1)">
            <summary>Tries to create the range. Returns empty range if failed.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="fromValue">The value of the boundary From exclusive.</param>
            <param name="toValue">The value of the boundary To inclusive.</param>
            <param name="key">The value of the range key.</param>
            <returns>A new range or empty range if the boundaries forms invalid range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range.TryCreateExclusiveTo``2(``0,``0,``1)">
            <summary>Tries to create the range. Returns empty range if failed.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="fromValue">The value of the boundary From inclusive.</param>
            <param name="toValue">The value of the boundary To exclusive.</param>
            <param name="key">The value of the range key.</param>
            <returns>A new range or empty range if the boundaries forms invalid range.</returns>
        </member>
        <member name="T:CodeJam.Ranges.RangeInternal">
            <summary>Range internal helpers</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeInternal.SkipsArgValidationObsolete">
            <summary>The message for unsafe (no arg validation) method.</summary>
        </member>
        <member name="T:CodeJam.Ranges.RangeInternal.UnsafeOverload">
            <summary>
            Helper enum to mark unsafe (no validation) constructor overloads.
            Should be used ONLY if the arguments are validated already
            AND the code is on the hotpath.
            </summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeInternal.UnsafeOverload.SkipsArgValidation">
            <summary>
            Marks unsafe (no validation) constructor overload.
            Should be used ONLY if the arguments are validated already
            AND the code is on the hotpath.
            </summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeInternal.SkipsArgValidation">
            <summary>
            Helper const to mark unsafe (no validation) constructor overloads.
            Should be used ONLY if the arguments are validated already
            AND the code is on the hotpath.
            </summary>
        </member>
        <member name="M:CodeJam.Ranges.RangeInternal.GetFormattableCallback``1">
            <summary>Returns formattable callback for arbitrary type.</summary>
            <typeparam name="T">Type of the formattable object.</typeparam>
            <returns>The format callback. Returns <c>null</c> if the first arg is <c>null</c>.</returns>
        </member>
        <member name="T:CodeJam.Ranges.RangeBoundaryFrom`1">
            <summary>The From boundary of the range.</summary>
            <summary>The From boundary of the range.</summary>
            <typeparam name="T">
            The type of the value. Should implement <seealso cref="T:System.IComparable`1"/> or <seealso cref="T:System.IComparable"/>.
            </typeparam>
            <remarks>
            Heavy tuned to be as fast as it is possible.
            The order of borders is the following: '∅' &lt; '-∞' &lt; 'a)' &lt; '[a' == 'a]' &lt; '(a' &lt; '+∞'.
            </remarks>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_Equality(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>Implements the operator ==.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 == boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_Inequality(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>Implements the operator !=.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 != boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>Implements the operator &gt;.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &gt; boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Implements the operator &gt;.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &gt; boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)">
            <summary>Implements the operator &gt;.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The value of the boundary2.</param>
            <returns><c>True</c>, if boundary1 &gt; boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThan(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>Implements the operator &gt;.</summary>
            <param name="boundary1">The value of the boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &gt; boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>Implements the operator &gt;=.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &gt;= boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Implements the operator &gt;=.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &gt;= boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)">
            <summary>Implements the operator &gt;=.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The value of the boundary2.</param>
            <returns><c>True</c>, if boundary1 &gt;= boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_GreaterThanOrEqual(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>Implements the operator &gt;=.</summary>
            <param name="boundary1">The value of the boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &gt;= boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>Implements the operator &lt;.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &lt; boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Implements the operator &lt;.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &lt; boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)">
            <summary>Implements the operator &lt;.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The value of the boundary2.</param>
            <returns><c>True</c>, if boundary1 &lt; boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThan(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>Implements the operator &lt;.</summary>
            <param name="boundary1">The value of the boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &lt; boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>Implements the operator &lt;=.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &lt;= boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Implements the operator &lt;=.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &lt;= boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryFrom{`0},`0)">
            <summary>Implements the operator &lt;=.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The value of the boundary2.</param>
            <returns><c>True</c>, if boundary1 &lt;= boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.op_LessThanOrEqual(`0,CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>Implements the operator &lt;=.</summary>
            <param name="boundary1">The value of the boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &lt;= boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.AdjustAndCreate(`0,CodeJam.Ranges.RangeBoundaryFromKind)">
            <summary>
            Infrastructure helper method to create a boundary that handles default and infinite values.
            </summary>
            <param name="value">The value of the boundary.</param>
            <param name="boundaryKind">The kind of the boundary.</param>
            <returns>A new range boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.IsValid(`0)">
            <summary>
            Infrastructure helper method to check if the value can be used as the value of the boundary.
            </summary>
            <param name="value">The value to check.</param>
            <returns><c>true</c> if it is safe to pass the value as a boundary constructor parameter.</returns>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryFrom`1.Empty">
            <summary>Empty range boundary, ∅.</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryFrom`1.NegativeInfinity">
            <summary>Negative infinity, -∞.</summary>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.#ctor(`0,CodeJam.Ranges.RangeBoundaryFromKind)">
            <summary>Creates a new range boundary.</summary>
            <param name="value">
            The value of the boundary.
            Infinite (or empty) boundaries should use default(T) or NegativeInfinity(T) (if the type has one) as the value.
            </param>
            <param name="boundaryKind">The kind of the boundary.</param>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.#ctor(`0,CodeJam.Ranges.RangeBoundaryFromKind,CodeJam.Ranges.RangeInternal.UnsafeOverload)">
            <summary>Creates a new range boundary.</summary>
            <param name="value">
            The value of the boundary. Infinite (or empty) boundaries should use default(T) as the value.
            </param>
            <param name="boundaryKind">The kind of the boundary.</param>
            <param name="skipsArgValidation">Stub argument to mark unsafe (no validation) constructor overload.</param>
        </member>
        <member name="P:CodeJam.Ranges.RangeBoundaryFrom`1.Kind">
            <summary>The kind of the boundary.</summary>
            <value>The kind of the boundary.</value>
        </member>
        <member name="P:CodeJam.Ranges.RangeBoundaryFrom`1.IsEmpty">
            <summary>The boundary == ∅.</summary>
            <value><c>true</c> if the boundary is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.RangeBoundaryFrom`1.IsNotEmpty">
            <summary>The boundary != ∅.</summary>
            <value>
            <c>true</c> if the boundary is not empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeJam.Ranges.RangeBoundaryFrom`1.IsNegativeInfinity">
            <summary>The boundary == -∞.</summary>
            <value>
            <c>true</c> if the boundary is negative infinity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeJam.Ranges.RangeBoundaryFrom`1.IsInclusiveBoundary">
            <summary>The boundary includes the value.</summary>
            <value>
            <c>true</c> if the boundary is inclusive boundary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeJam.Ranges.RangeBoundaryFrom`1.IsExclusiveBoundary">
            <summary>The boundary does not include the value.</summary>
            <value>
            <c>true</c> if the boundary is exclusive boundary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeJam.Ranges.RangeBoundaryFrom`1.HasValue">
            <summary>The boundary has a value.</summary>
            <value><c>true</c> if the boundary has a value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.RangeBoundaryFrom`1.Value">
            <summary>The value of the boundary.</summary>
            <value>
            The value of the boundary of <seealso cref="T:System.InvalidOperationException"/> if <see cref="P:CodeJam.Ranges.RangeBoundaryFrom`1.HasValue"/> equals to <c>false</c>.
            </value>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:CodeJam.Ranges.RangeBoundaryFrom`1.HasValue"/> equals to <c>false</c>.</exception>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.GetValueOrDefault">
            <summary>
            The value of the boundary or the default(T) if <see cref="P:CodeJam.Ranges.RangeBoundaryFrom`1.HasValue"/> property equals to <c>false</c>.
            </summary>
            <returns>he value of the boundary or default(T).</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.GetValueOrDefault(`0)">
            <summary>
            The value of the boundary or the <paramref name="defaultValue"/> if <see cref="P:CodeJam.Ranges.RangeBoundaryFrom`1.HasValue"/> property equals to <c>false</c>.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns>Value of the boundary or <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.GetComplementation">
            <summary>
            Returns complementation for the boundary. The conversions are:
            * 'a]' -> '(a'
            * '[a' -> 'a)'
            * 'a)' -> '[a'
            * '(a' -> 'a]'
            Empty or infinite boundaries will throw. Check the <see cref="P:CodeJam.Ranges.RangeBoundaryFrom`1.HasValue"/>
            before calling the method.
            </summary>
            <returns>Complementation for the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.IsComplementationFor(CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Checks that the boundary is complementation for specified boundary.</summary>
            <param name="other">Another boundary.</param>
            <returns><c>True</c>, if the boundary is complementation for specified boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.WithValue(System.Func{`0,`0})">
            <summary>
            Creates a new boundary with updated value (if the current boundary has one).
            If the boundary has no value the method returns the boundary unchanged.
            </summary>
            <param name="newValueSelector">Callback to obtain a new value for the boundary. Used if the boundary has a value.</param>
            <returns>Range boundary with the same kind but with a new value (if the current boundary has one).</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.WithValue``1(System.Func{`0,``0})">
            <summary>
            Creates a new boundary with updated value (if the current boundary has one).
            If the boundary has no value the method returns the boundary unchanged.
            </summary>
            <typeparam name="T2">The new type of the range value</typeparam>
            <param name="newValueSelector">Callback to obtain a new value for the boundary. Used if the boundary has a value.</param>
            <returns>Range boundary with the same kind but with a new value (if the current boundary has one).</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.ToExclusive">
            <summary>
            Creates a new boundary with exclusive boundary kind if the current boundary has a value.
            The original boundary is returned otherwise.
            </summary>
            <returns>
            Range boundary with exclusive boundary kind or the original one if the boundary has no value.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.ToInclusive">
            <summary>
            Creates a new boundary with inclusive boundary kind if the current boundary has a value.
            The original boundary is returned otherwise.
            </summary>
            <returns>
            Range boundary with inclusive boundary kind or the original one if the boundary has no value.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.Equals(CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>Indicates whether the current boundary is equal to another.</summary>
            <param name="other">The boundary to compare with this.</param>
            <returns>
            <c>True</c> if the current boundary is equal to the <paramref name="other"/> parameter;
            otherwise, false.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.Equals(System.Object)">
            <summary>Indicates whether the current boundary and a specified object are equal.</summary>
            <param name="obj">The object to compare with this. </param>
            <returns>
            <c>True</c> if <paramref name="obj"/> and the current boundary are the same type
            and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.GetHashCode">
            <summary>Returns the hash code for the current boundary.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.CompareTo(CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>
            Compares the current boundary with another one. Following order is used:
            '∅' &lt; '-∞' &lt; 'a)' &lt; '[a' == 'a]' &lt; '(a' &lt; '+∞'.
            </summary>
            <param name="other">Boundary to compare with this.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has the following meanings:
            * Less than zero This object is less than the <paramref name="other"/> parameter.
            * Zero This object is equal to <paramref name="other"/>.
            * Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.CompareTo(CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>
            Compares the current boundary with another one. Following order is used:
            '∅' &lt; '-∞' &lt; 'a)' &lt; '[a' == 'a]' &lt; '(a' &lt; '+∞'.
            </summary>
            <param name="other">Boundary to compare with this.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has the following meanings:
            * Less than zero This object is less than the <paramref name="other"/> parameter.
            * Zero This object is equal to <paramref name="other"/>.
            * Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.CompareTo(`0)">
            <summary>
            Compares the current boundary with the value of another From boundary. Following order is used:
            '∅' &lt; '-∞' &lt; 'a)' &lt; '[a' == 'a]' &lt; '(a' &lt; '+∞'.
            </summary>
            <param name="other">Boundary value to compare with this.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has the following meanings:
            * Less than zero This object is less than the <paramref name="other"/> parameter.
            * Zero This object is equal to <paramref name="other"/>.
            * Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares the current boundary with the boundary or with the value of another boundary of the same kind. Following order is used:
            '∅' &lt; '-∞' &lt; 'a)' &lt; '[a' == 'a]' &lt; '(a' &lt; '+∞'.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has the following meanings:
            * Less than zero This object is less than the <paramref name="obj"/> parameter.
            * Zero This object is equal to <paramref name="obj"/>.
            * Greater than zero This object is greater than <paramref name="obj"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.ToString">
            <summary> Returns string representation of the boundary. </summary>
            <returns> The string representation of the boundary. </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.ToString(System.String)">
            <summary>
            Returns string representation of the boundary using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored
            </summary>
            <param name="format">The format string</param>
            <returns> The string representation of the boundary. </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryFrom`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns string representation of the boundary using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored
            </summary>
            <param name="format">The format string</param>
            <param name="formatProvider">The format provider</param>
            <returns> The string representation of the boundary. </returns>
        </member>
        <member name="T:CodeJam.Ranges.RangeBoundaryTo`1">
            <summary>The To boundary of the range.</summary>
            <summary>The To boundary of the range.</summary>
            <typeparam name="T">
            The type of the value. Should implement <seealso cref="T:System.IComparable`1"/> or <seealso cref="T:System.IComparable"/>.
            </typeparam>
            <remarks>
            Heavy tuned to be as fast as it is possible.
            The order of borders is the following: '∅' &lt; '+∞' &lt; 'a)' &lt; '[a' == 'a]' &lt; '(a' &lt; '-∞'.
            </remarks>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_Equality(CodeJam.Ranges.RangeBoundaryTo{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Implements the operator ==.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 == boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_Inequality(CodeJam.Ranges.RangeBoundaryTo{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Implements the operator !=.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 != boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_GreaterThan(CodeJam.Ranges.RangeBoundaryTo{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Implements the operator &gt;.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &gt; boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_GreaterThan(CodeJam.Ranges.RangeBoundaryTo{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>Implements the operator &gt;.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &gt; boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_GreaterThan(CodeJam.Ranges.RangeBoundaryTo{`0},`0)">
            <summary>Implements the operator &gt;.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The value of the boundary2.</param>
            <returns><c>True</c>, if boundary1 &gt; boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_GreaterThan(`0,CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Implements the operator &gt;.</summary>
            <param name="boundary1">The value of the boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &gt; boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryTo{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Implements the operator &gt;=.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &gt;= boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryTo{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>Implements the operator &gt;=.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &gt;= boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_GreaterThanOrEqual(CodeJam.Ranges.RangeBoundaryTo{`0},`0)">
            <summary>Implements the operator &gt;=.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The value of the boundary2.</param>
            <returns><c>True</c>, if boundary1 &gt;= boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_GreaterThanOrEqual(`0,CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Implements the operator &gt;=.</summary>
            <param name="boundary1">The value of the boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &gt;= boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_LessThan(CodeJam.Ranges.RangeBoundaryTo{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Implements the operator &lt;.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &lt; boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_LessThan(CodeJam.Ranges.RangeBoundaryTo{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>Implements the operator &lt;.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &lt; boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_LessThan(CodeJam.Ranges.RangeBoundaryTo{`0},`0)">
            <summary>Implements the operator &lt;.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The value of the boundary2.</param>
            <returns><c>True</c>, if boundary1 &lt; boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_LessThan(`0,CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Implements the operator &lt;.</summary>
            <param name="boundary1">The value of the boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &lt; boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryTo{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Implements the operator &lt;=.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &lt;= boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryTo{`0},CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>Implements the operator &lt;=.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &lt;= boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_LessThanOrEqual(CodeJam.Ranges.RangeBoundaryTo{`0},`0)">
            <summary>Implements the operator &lt;=.</summary>
            <param name="boundary1">The boundary1.</param>
            <param name="boundary2">The value of the boundary2.</param>
            <returns><c>True</c>, if boundary1 &lt;= boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.op_LessThanOrEqual(`0,CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Implements the operator &lt;=.</summary>
            <param name="boundary1">The value of the boundary1.</param>
            <param name="boundary2">The boundary2.</param>
            <returns><c>True</c>, if boundary1 &lt;= boundary2.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.AdjustAndCreate(`0,CodeJam.Ranges.RangeBoundaryToKind)">
            <summary>
            Infrastructure helper method to create a boundary that handles default and infinite values.
            </summary>
            <param name="value">The value of the boundary.</param>
            <param name="boundaryKind">The kind of the boundary.</param>
            <returns>A new range boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.IsValid(`0)">
            <summary>
            Infrastructure helper method to check if the value can be used as the value of the boundary.
            </summary>
            <param name="value">The value to check.</param>
            <returns><c>true</c> if it is safe to pass the value as a boundary constructor parameter.</returns>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryTo`1.Empty">
            <summary>Empty range boundary, ∅.</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryTo`1.PositiveInfinity">
            <summary>Positive infinity, +∞.</summary>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.#ctor(`0,CodeJam.Ranges.RangeBoundaryToKind)">
            <summary>Creates a new range boundary.</summary>
            <param name="value">
            The value of the boundary.
            Infinite (or empty) boundaries should use default(T) or PositiveInfinity(T) (if the type has one) as the value.
            </param>
            <param name="boundaryKind">The kind of the boundary.</param>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.#ctor(`0,CodeJam.Ranges.RangeBoundaryToKind,CodeJam.Ranges.RangeInternal.UnsafeOverload)">
            <summary>Creates a new range boundary.</summary>
            <param name="value">
            The value of the boundary. Infinite (or empty) boundaries should use default(T) as the value.
            </param>
            <param name="boundaryKind">The kind of the boundary.</param>
            <param name="skipsArgValidation">Stub argument to mark unsafe (no validation) constructor overload.</param>
        </member>
        <member name="P:CodeJam.Ranges.RangeBoundaryTo`1.Kind">
            <summary>The kind of the boundary.</summary>
            <value>The kind of the boundary.</value>
        </member>
        <member name="P:CodeJam.Ranges.RangeBoundaryTo`1.IsEmpty">
            <summary>The boundary == ∅.</summary>
            <value><c>true</c> if the boundary is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.RangeBoundaryTo`1.IsNotEmpty">
            <summary>The boundary != ∅.</summary>
            <value>
            <c>true</c> if the boundary is not empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeJam.Ranges.RangeBoundaryTo`1.IsPositiveInfinity">
            <summary>The boundary == +∞.</summary>
            <value>
            <c>true</c> if the boundary is positive infinity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeJam.Ranges.RangeBoundaryTo`1.IsInclusiveBoundary">
            <summary>The boundary includes the value.</summary>
            <value>
            <c>true</c> if the boundary is inclusive boundary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeJam.Ranges.RangeBoundaryTo`1.IsExclusiveBoundary">
            <summary>The boundary does not include the value.</summary>
            <value>
            <c>true</c> if the boundary is exclusive boundary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeJam.Ranges.RangeBoundaryTo`1.HasValue">
            <summary>The boundary has a value.</summary>
            <value><c>true</c> if the boundary has a value; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.RangeBoundaryTo`1.Value">
            <summary>The value of the boundary.</summary>
            <value>
            The value of the boundary of <seealso cref="T:System.InvalidOperationException"/> if <see cref="P:CodeJam.Ranges.RangeBoundaryTo`1.HasValue"/> equals to <c>false</c>.
            </value>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:CodeJam.Ranges.RangeBoundaryTo`1.HasValue"/> equals to <c>false</c>.</exception>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.GetValueOrDefault">
            <summary>
            The value of the boundary or the default(T) if <see cref="P:CodeJam.Ranges.RangeBoundaryTo`1.HasValue"/> property equals to <c>false</c>.
            </summary>
            <returns>he value of the boundary or default(T).</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.GetValueOrDefault(`0)">
            <summary>
            The value of the boundary or the <paramref name="defaultValue"/> if <see cref="P:CodeJam.Ranges.RangeBoundaryTo`1.HasValue"/> property equals to <c>false</c>.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns>Value of the boundary or <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.GetComplementation">
            <summary>
            Returns complementation for the boundary. The conversions are:
            * 'a]' -> '(a'
            * '[a' -> 'a)'
            * 'a)' -> '[a'
            * '(a' -> 'a]'
            Empty or infinite boundaries will throw. Check the <see cref="P:CodeJam.Ranges.RangeBoundaryTo`1.HasValue"/>
            before calling the method.
            </summary>
            <returns>Complementation for the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.IsComplementationFor(CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>Checks that the boundary is complementation for specified boundary.</summary>
            <param name="other">Another boundary.</param>
            <returns><c>True</c>, if the boundary is complementation for specified boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.WithValue(System.Func{`0,`0})">
            <summary>
            Creates a new boundary with updated value (if the current boundary has one).
            If the boundary has no value the method returns the boundary unchanged.
            </summary>
            <param name="newValueSelector">Callback to obtain a new value for the boundary. Used if the boundary has a value.</param>
            <returns>Range boundary with the same kind but with a new value (if the current boundary has one).</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.WithValue``1(System.Func{`0,``0})">
            <summary>
            Creates a new boundary with updated value (if the current boundary has one).
            If the boundary has no value the method returns the boundary unchanged.
            </summary>
            <typeparam name="T2">The new type of the range value</typeparam>
            <param name="newValueSelector">Callback to obtain a new value for the boundary. Used if the boundary has a value.</param>
            <returns>Range boundary with the same kind but with a new value (if the current boundary has one).</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.ToExclusive">
            <summary>
            Creates a new boundary with exclusive boundary kind if the current boundary has a value.
            The original boundary is returned otherwise.
            </summary>
            <returns>
            Range boundary with exclusive boundary kind or the original one if the boundary has no value.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.ToInclusive">
            <summary>
            Creates a new boundary with inclusive boundary kind if the current boundary has a value.
            The original boundary is returned otherwise.
            </summary>
            <returns>
            Range boundary with inclusive boundary kind or the original one if the boundary has no value.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.Equals(CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Indicates whether the current boundary is equal to another.</summary>
            <param name="other">The boundary to compare with this.</param>
            <returns>
            <c>True</c> if the current boundary is equal to the <paramref name="other"/> parameter;
            otherwise, false.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.Equals(System.Object)">
            <summary>Indicates whether the current boundary and a specified object are equal.</summary>
            <param name="obj">The object to compare with this. </param>
            <returns>
            <c>True</c> if <paramref name="obj"/> and the current boundary are the same type
            and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.GetHashCode">
            <summary>Returns the hash code for the current boundary.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.CompareTo(CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>
            Compares the current boundary with another one. Following order is used:
            '∅' &lt; '+∞' &lt; 'a)' &lt; '[a' == 'a]' &lt; '(a' &lt; '-∞'.
            </summary>
            <param name="other">Boundary to compare with this.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has the following meanings:
            * Less than zero This object is less than the <paramref name="other"/> parameter.
            * Zero This object is equal to <paramref name="other"/>.
            * Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.CompareTo(CodeJam.Ranges.RangeBoundaryFrom{`0})">
            <summary>
            Compares the current boundary with another one. Following order is used:
            '∅' &lt; '+∞' &lt; 'a)' &lt; '[a' == 'a]' &lt; '(a' &lt; '-∞'.
            </summary>
            <param name="other">Boundary to compare with this.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has the following meanings:
            * Less than zero This object is less than the <paramref name="other"/> parameter.
            * Zero This object is equal to <paramref name="other"/>.
            * Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.CompareTo(`0)">
            <summary>
            Compares the current boundary with the value of another To boundary. Following order is used:
            '∅' &lt; '+∞' &lt; 'a)' &lt; '[a' == 'a]' &lt; '(a' &lt; '-∞'.
            </summary>
            <param name="other">Boundary value to compare with this.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has the following meanings:
            * Less than zero This object is less than the <paramref name="other"/> parameter.
            * Zero This object is equal to <paramref name="other"/>.
            * Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compares the current boundary with the boundary or with the value of another boundary of the same kind. Following order is used:
            '∅' &lt; '+∞' &lt; 'a)' &lt; '[a' == 'a]' &lt; '(a' &lt; '-∞'.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has the following meanings:
            * Less than zero This object is less than the <paramref name="obj"/> parameter.
            * Zero This object is equal to <paramref name="obj"/>.
            * Greater than zero This object is greater than <paramref name="obj"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.ToString">
            <summary> Returns string representation of the boundary. </summary>
            <returns> The string representation of the boundary. </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.ToString(System.String)">
            <summary>
            Returns string representation of the boundary using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored
            </summary>
            <param name="format">The format string</param>
            <returns> The string representation of the boundary. </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryTo`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns string representation of the boundary using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored
            </summary>
            <param name="format">The format string</param>
            <param name="formatProvider">The format provider</param>
            <returns> The string representation of the boundary. </returns>
        </member>
        <member name="T:CodeJam.Ranges.RangeBoundaryKindOrdering">
            <summary>The kind of range boundary.</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryKindOrdering.Empty">
            <summary>Empty,                    '∅'.</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryKindOrdering.NegativeInfinity">
            <summary>Negative infinity,        '(-∞,??',  no From limit.</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryKindOrdering.ToExclusive">
            <summary>Less than value,          '??,b)',   x &lt; b.</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryKindOrdering.FromInclusive">
            <summary>Greater than or equal to, '[a,??',   x >= a.</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryKindOrdering.ToInclusive">
            <summary>Less than or equal to,    '??,b]',   x &lt;= b.</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryKindOrdering.FromExclusive">
            <summary>Greater than value,       '(a,??',   x > a.</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryKindOrdering.PositiveInfinity">
            <summary>PositiveInfinity,         '??,+∞)',  no To limit.</summary>
        </member>
        <member name="T:CodeJam.Ranges.RangeBoundaryFromKind">
            <summary>The kind of From range boundary.</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryFromKind.Empty">
            <summary>Empty,                    '∅'.</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryFromKind.Infinite">
            <summary>Negative infinity,        '(-∞,??',  no From limit.</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryFromKind.Inclusive">
            <summary>Greater than or equal to, '[a,??',   x >= a.</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryFromKind.Exclusive">
            <summary>Greater than value,       '(a,??',   x > a.</summary>
        </member>
        <member name="T:CodeJam.Ranges.RangeBoundaryToKind">
            <summary>The kind of To range boundary.</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryToKind.Empty">
            <summary>Empty,                    '∅'.</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryToKind.Exclusive">
            <summary>Less than value,          '??,b)',   x &lt; b.</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryToKind.Inclusive">
            <summary>Less than or equal to,    '??,b]',   x &lt;= b.</summary>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryToKind.Infinite">
            <summary>PositiveInfinity,         '??,+∞)',  no To limit.</summary>
        </member>
        <member name="T:CodeJam.Ranges.RangeBoundaryToDescendingComparer`1">
            <summary>
            Helper comparer for operations over <see cref="P:CodeJam.Ranges.IRange`1.To"/>.
            </summary>
            <typeparam name="T">The type of the range values.</typeparam>
        </member>
        <member name="F:CodeJam.Ranges.RangeBoundaryToDescendingComparer`1.Instance">
            <summary>Default comparer instance.</summary>
        </member>
        <member name="M:CodeJam.Ranges.RangeBoundaryToDescendingComparer`1.Compare(CodeJam.Ranges.RangeBoundaryTo{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />
            </returns>
        </member>
        <member name="T:CodeJam.Ranges.RangeIntersection`1">
            <summary>
            Describes an intersection of multiple ranges.
            </summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <seealso cref="T:System.IFormattable" />
        </member>
        <member name="M:CodeJam.Ranges.RangeIntersection`1.#ctor(CodeJam.Ranges.Range{`0},CodeJam.Ranges.Range{`0}[])">
            <summary>Initializes a new instance of the <see cref="T:CodeJam.Ranges.RangeIntersection`1"/> struct.</summary>
            <param name="intersectionRange">The intersection range.</param>
            <param name="ranges">Intersecting ranges.</param>
        </member>
        <member name="P:CodeJam.Ranges.RangeIntersection`1.IntersectionRange">
            <summary>The common part for all ranges in intersection.</summary>
            <value>The common part for all ranges in intersection.</value>
        </member>
        <member name="P:CodeJam.Ranges.RangeIntersection`1.Ranges">
            <summary>The ranges in the intersection, if any.</summary>
            <value>The ranges in the intersection, if any.</value>
        </member>
        <member name="P:CodeJam.Ranges.RangeIntersection`1.IsEmpty">
            <summary>Gets a value indicating whether the intersection does not contain any ranges.</summary>
            <value><c>true</c> if the intersection does not contain any ranges; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.RangeIntersection`1.IsNotEmpty">
            <summary>Gets a value indicating whether the intersection contains any ranges.</summary>
            <value><c>true</c> if the intersection contains any ranges; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:CodeJam.Ranges.RangeIntersection`1.ToString">
            <summary>Returns string representation of the range intersection.</summary>
            <returns>The string representation of the range intersection.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeIntersection`1.ToString(System.String)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeIntersection`1.ToString(System.IFormatProvider)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeIntersection`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="format">The format string.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="T:CodeJam.Ranges.RangeIntersection`2">
            <summary>
            Describes an intersection of multiple ranges.
            </summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <seealso cref="T:System.IFormattable" />
        </member>
        <member name="M:CodeJam.Ranges.RangeIntersection`2.#ctor(CodeJam.Ranges.Range{`0},CodeJam.Ranges.Range{`0,`1}[])">
            <summary>Initializes a new instance of the <see cref="T:CodeJam.Ranges.RangeIntersection`1"/> struct.</summary>
            <param name="intersectionRange">The intersection range.</param>
            <param name="ranges">Intersecting ranges.</param>
        </member>
        <member name="P:CodeJam.Ranges.RangeIntersection`2.IntersectionRange">
            <summary>The common part for all ranges in intersection.</summary>
            <value>The common part for all ranges in intersection.</value>
        </member>
        <member name="P:CodeJam.Ranges.RangeIntersection`2.Ranges">
            <summary>The ranges in the intersection, if any.</summary>
            <value>The ranges in the intersection, if any.</value>
        </member>
        <member name="P:CodeJam.Ranges.RangeIntersection`2.IsEmpty">
            <summary>Gets a value indicating whether the intersection does not contain any ranges.</summary>
            <value><c>true</c> if the intersection does not contain any ranges; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.RangeIntersection`2.IsNotEmpty">
            <summary>Gets a value indicating whether the intersection contains any ranges.</summary>
            <value><c>true</c> if the intersection contains any ranges; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:CodeJam.Ranges.RangeIntersection`2.ToString">
            <summary>Returns string representation of the range intersection.</summary>
            <returns>The string representation of the range intersection.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeIntersection`2.ToString(System.String)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeIntersection`2.ToString(System.IFormatProvider)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeIntersection`2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="format">The format string.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="T:CodeJam.Ranges.CompositeRangeExtensions">
            <summary>Extension methods for <see cref="T:CodeJam.Ranges.CompositeRange`1"/>.</summary>
            <summary>Extension methods for <seealso cref="T:CodeJam.Ranges.CompositeRange`1"/>.</summary>
            <summary>Extension methods for <seealso cref="T:CodeJam.Ranges.CompositeRange`1"/>.</summary>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0},System.Func{``1,``0})">
            <summary>Converts sequence of elements to the composite range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="source">Original collection.</param>
            <param name="fromValueSelector">Callback to obtain a value for the From boundary.</param>
            <param name="toValueSelector">Callback to obtain a value for the To boundary.</param>
            <returns>A new composite range with keys filled from the original collection.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>Converts sequence of elements to the composite range.</summary>
            <typeparam name="TSource">The type of the values in original collection.</typeparam>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="source">Original collection.</param>
            <param name="fromValueSelector">Callback to obtain a value for the From boundary.</param>
            <param name="toValueSelector">Callback to obtain a value for the To boundary.</param>
            <param name="keySelector">Callback to obtain a value for the range key.</param>
            <returns>A new composite range with keys filled from the original collection.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.WithKeys``2(CodeJam.Ranges.CompositeRange{``0},``1)">
            <summary>Creates a new composite range with the key specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey2">The type of the new key.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="key">The value of the new key.</param>
            <returns>A new composite range with the key specified.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.WithKeys``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)">
            <summary>Creates a new composite range with the key specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="TKey2">The type of the new key.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="key">The value of the new key.</param>
            <returns>A new composite range with the key specified.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.WithKeys``3(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``1,``2})">
            <summary>Creates a new composite range with the key specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="TKey2">The type of the new key.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="keySelector">Callback to obtain a value for the range key.</param>
            <returns>A new composite range with the key specified.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.WithoutKeys``2(CodeJam.Ranges.CompositeRange{``0,``1})">
            <summary>Removes keys from the composite range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <returns>A new composite range without associated keys.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1(CodeJam.Ranges.Range{``0})">
            <summary>
            Returns complementation composite range.
            Result range contains result of (infinityRange.Exclude(<paramref name="range"/>).
            </summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <returns>Complementation composite range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2(CodeJam.Ranges.Range{``0,``1})">
            <summary>
            Returns complementation composite range.
            Result range contains result of (infinityRange.Exclude(<paramref name="range"/>).
            </summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <returns>Complementation composite range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``1(CodeJam.Ranges.CompositeRange{``0})">
            <summary>
            Returns complementation composite range.
            Result range contains result of (infinityRange.Exclude(<paramref name="compositeRange"/>).
            </summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <returns>Complementation composite range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.GetComplementation``2(CodeJam.Ranges.CompositeRange{``0,``1})">
            <summary>
            Returns complementation composite range.
            Result range contains result of (infinityRange.Exclude(<paramref name="compositeRange"/>).
            </summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <returns>Complementation composite range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``1(CodeJam.Ranges.Range{``0})">
            <summary>Converts range to the composite range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The range.</param>
            <returns>A new composite range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``1(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{``0}})">
            <summary>Converts sequence of elements to the composite range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="ranges">The ranges.</param>
            <returns>A new composite range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})">
            <summary>
            Replaces exclusive boundaries with inclusive ones with the values from the selector callbacks
            </summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="fromValueSelector">Callback to obtain a new value for the From boundary. Used if the boundary is exclusive.</param>
            <param name="toValueSelector">Callback to obtain a new value for the To boundary. Used if the boundary is exclusive.</param>
            <returns>A range with inclusive boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``1(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``0},System.Func{``0,``0})">
            <summary>
            Replaces inclusive boundaries with exclusive ones with the values from the selector callbacks
            </summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="fromValueSelector">Callback to obtain a new value for the From boundary. Used if the boundary is inclusive.</param>
            <param name="toValueSelector">Callback to obtain a new value for the To boundary. Used if the boundary is inclusive.</param>
            <returns>A range with exclusive boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1})">
            <summary>Creates a new composite range with the key specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="T2">The type of new range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="newValueSelector">The value of the new key.</param>
            <returns>A new composite range with the key specified.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.WithValues``2(CodeJam.Ranges.CompositeRange{``0},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>Creates a new composite range with the key specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="T2">The type of new range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="fromValueSelector">Callback to obtain a new value for the From boundary. Used if boundary has a value.</param>
            <param name="toValueSelector">Callback to obtain a new value for the To boundary. Used if boundary has a value.</param>
            <returns>A new composite range with the key specified.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``1(CodeJam.Ranges.CompositeRange{``0})">
            <summary>Returns all range intersections from the composite range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <returns>All range intersections from the composite range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0)">
            <summary>Determines whether the composite range contains the specified value.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="value">The value to check.</param>
            <returns><c>true</c>, if the composite range contains the value.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})">
            <summary>Determines whether the composite range contains the specified range boundary.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The boundary to check.</param>
            <returns><c>true</c>, if the composite range contains the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.RangeBoundaryTo{``0})">
            <summary>Determines whether the composite range contains the specified range boundary.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The boundary to check.</param>
            <returns><c>true</c>, if the composite range contains the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)">
            <summary>Determines whether the composite range contains another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="from">The boundary From value of the range to check.</param>
            <param name="to">The boundary To value of the range to check.</param>
            <returns><c>true</c>, if the composite range contains another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Contains``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})">
            <summary>Determines whether the composite range contains another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the composite range contains another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})">
            <summary>Determines whether the composite range contains another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey2">The type of the other range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the composite range contains another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0},``1)">
            <summary>Determines whether the composite range contains another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TCompositeRange">The type of another range.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the composite range contains another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)">
            <summary>Determines whether the composite  has intersection with another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="from">The boundary From value of the range to check.</param>
            <param name="to">The boundary To value of the range to check.</param>
            <returns><c>true</c>, if the composite range has intersection with another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})">
            <summary>Determines whether the composite range has intersection with another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the composite range has intersection with another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})">
            <summary>Determines whether the composite range has intersection with another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey2">The type of the other range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the composite range has intersection with another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0},``1)">
            <summary>Determines whether the composite range has intersection with another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TCompositeRange">The type of another range.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the composite range has intersection with another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})">
            <summary>Returns a union range containing all subranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to union with.</param>
            <returns>A union range containing all subranges.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Union``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.CompositeRange{``0})">
            <summary>Returns a union range containing all subranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to union with.</param>
            <returns>A union range containing all subranges.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)">
            <summary>Returns an intersection of the the ranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="from">The boundary From value.</param>
            <param name="to">The boundary To value.</param>
            <returns>An intersection range or empty range if the ranges do not intersect.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})">
            <summary>Returns an intersection of the the ranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to intersect with.</param>
            <returns>An intersection range or empty range if the ranges do not intersect.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})">
            <summary>Returns an intersection of the the ranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey2">The type of the other range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to intersect with.</param>
            <returns>An intersection range or empty range if the ranges do not intersect.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0},``1)">
            <summary>Returns an intersection of the the ranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TCompositeRange">The type of another range.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to intersect with.</param>
            <returns>An intersection range or empty range if the ranges do not intersect.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},``0,``0)">
            <summary>Returns source range with other range excluded.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="from">The boundary From value.</param>
            <param name="to">The boundary To value.</param>
            <returns>Source range with other range excluded.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Except``1(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0})">
            <summary>Returns source range with other range excluded.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to intersect with.</param>
            <returns>Source range with other range excluded.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},CodeJam.Ranges.Range{``0,``1})">
            <summary>Returns source range with other range excluded.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey2">The type of the other range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to intersect with.</param>
            <returns>Source range with other range excluded.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0},``1)">
            <summary>Returns source range with other range excluded.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TCompositeRange">The type of another range.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to intersect with.</param>
            <returns>Source range with other range excluded.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(CodeJam.Ranges.Range{``0,``1})">
            <summary>Converts range to the composite range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The range.</param>
            <returns>A new composite range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.ToCompositeRange``2(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{``0,``1}})">
            <summary>Converts sequence of elements to the composite range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="ranges">The ranges.</param>
            <returns>A new composite range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.MakeInclusive``2(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``0},System.Func{``0,``0})">
            <summary>
            Replaces exclusive boundaries with inclusive ones with the values from the selector callbacks
            </summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="fromValueSelector">Callback to obtain a new value for the From boundary. Used if the boundary is exclusive.</param>
            <param name="toValueSelector">Callback to obtain a new value for the To boundary. Used if the boundary is exclusive.</param>
            <returns>A range with inclusive boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.MakeExclusive``2(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``0},System.Func{``0,``0})">
            <summary>
            Replaces inclusive boundaries with exclusive ones with the values from the selector callbacks
            </summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="fromValueSelector">Callback to obtain a new value for the From boundary. Used if the boundary is inclusive.</param>
            <param name="toValueSelector">Callback to obtain a new value for the To boundary. Used if the boundary is inclusive.</param>
            <returns>A range with exclusive boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.WithValues``3(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``2})">
            <summary>Creates a new composite range with the key specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="T2">The type of new range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="newValueSelector">The value of the new key.</param>
            <returns>A new composite range with the key specified.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.WithValues``3(CodeJam.Ranges.CompositeRange{``0,``1},System.Func{``0,``2},System.Func{``0,``2})">
            <summary>Creates a new composite range with the key specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="T2">The type of new range values.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="fromValueSelector">Callback to obtain a new value for the From boundary. Used if boundary has a value.</param>
            <param name="toValueSelector">Callback to obtain a new value for the To boundary. Used if boundary has a value.</param>
            <returns>A new composite range with the key specified.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.GetIntersections``2(CodeJam.Ranges.CompositeRange{``0,``1})">
            <summary>Returns all range intersections from the composite range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <returns>All range intersections from the composite range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},``0)">
            <summary>Determines whether the composite range contains the specified value.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="value">The value to check.</param>
            <returns><c>true</c>, if the composite range contains the value.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})">
            <summary>Determines whether the composite range contains the specified range boundary.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The boundary to check.</param>
            <returns><c>true</c>, if the composite range contains the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})">
            <summary>Determines whether the composite range contains the specified range boundary.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The boundary to check.</param>
            <returns><c>true</c>, if the composite range contains the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)">
            <summary>Determines whether the composite range contains another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="from">The boundary From value of the range to check.</param>
            <param name="to">The boundary To value of the range to check.</param>
            <returns><c>true</c>, if the composite range contains another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Contains``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})">
            <summary>Determines whether the composite range contains another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the composite range contains another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Contains``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})">
            <summary>Determines whether the composite range contains another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="TKey2">The type of the other range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the composite range contains another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Contains``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)">
            <summary>Determines whether the composite range contains another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="TCompositeRange">The type of another range.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the composite range contains another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)">
            <summary>Determines whether the composite  has intersection with another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="from">The boundary From value of the range to check.</param>
            <param name="to">The boundary To value of the range to check.</param>
            <returns><c>true</c>, if the composite range has intersection with another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})">
            <summary>Determines whether the composite range has intersection with another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the composite range has intersection with another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})">
            <summary>Determines whether the composite range has intersection with another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="TKey2">The type of the other range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the composite range has intersection with another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.HasIntersection``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)">
            <summary>Determines whether the composite range has intersection with another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="TCompositeRange">The type of another range.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the composite range has intersection with another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Union``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``1})">
            <summary>Returns a union range containing all subranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to union with.</param>
            <returns>A union range containing all subranges.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Union``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.CompositeRange{``0,``1})">
            <summary>Returns a union range containing all subranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to union with.</param>
            <returns>A union range containing all subranges.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)">
            <summary>Returns an intersection of the the ranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="from">The boundary From value.</param>
            <param name="to">The boundary To value.</param>
            <returns>An intersection range or empty range if the ranges do not intersect.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})">
            <summary>Returns an intersection of the the ranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to intersect with.</param>
            <returns>An intersection range or empty range if the ranges do not intersect.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})">
            <summary>Returns an intersection of the the ranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="TKey2">The type of the other range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to intersect with.</param>
            <returns>An intersection range or empty range if the ranges do not intersect.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Intersect``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)">
            <summary>Returns an intersection of the the ranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="TCompositeRange">The type of another range.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to intersect with.</param>
            <returns>An intersection range or empty range if the ranges do not intersect.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0,``1},``0,``0)">
            <summary>Returns source range with other range excluded.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="from">The boundary From value.</param>
            <param name="to">The boundary To value.</param>
            <returns>Source range with other range excluded.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Except``2(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0})">
            <summary>Returns source range with other range excluded.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to intersect with.</param>
            <returns>Source range with other range excluded.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Except``3(CodeJam.Ranges.CompositeRange{``0,``1},CodeJam.Ranges.Range{``0,``2})">
            <summary>Returns source range with other range excluded.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="TKey2">The type of the other range key</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to intersect with.</param>
            <returns>Source range with other range excluded.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRangeExtensions.Except``3(CodeJam.Ranges.CompositeRange{``0,``1},``2)">
            <summary>Returns source range with other range excluded.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="TCompositeRange">The type of another range.</typeparam>
            <param name="compositeRange">The source range.</param>
            <param name="other">The range to intersect with.</param>
            <returns>Source range with other range excluded.</returns>
        </member>
        <member name="T:CodeJam.Ranges.RangeExtensions">
            <summary>Extension methods for <see cref="T:CodeJam.Ranges.Range`1"/>.</summary>
            <summary>Extension methods for <seealso cref="T:CodeJam.Ranges.Range`1"/>.</summary>
            <summary>Extension methods for <seealso cref="T:CodeJam.Ranges.Range`1"/>.</summary>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.WithValues``2(CodeJam.Ranges.Range{``0},System.Func{``0,``1})">
            <summary>Updates the values of the boundaries of the range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="T2">The type of new range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="newValueSelector">Callback to obtain a new value for the boundaries. Used if boundary has a value.</param>
            <returns>A range with new values.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.WithValues``2(CodeJam.Ranges.Range{``0},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>Updates the values of the boundaries of the range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="T2">The type of new range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="fromValueSelector">Callback to obtain a new value for the From boundary. Used if boundary has a value.</param>
            <param name="toValueSelector">Callback to obtain a new value for the To boundary. Used if boundary has a value.</param>
            <returns>A range with new values.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1})">
            <summary>Updates the values of the boundaries of the range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="T2">The type of new range values.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="range">The source range.</param>
            <param name="newValueSelector">Callback to obtain a new value for the boundaries. Used if boundary has a value.</param>
            <returns>A range with new values.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.WithValues``3(CodeJam.Ranges.Range{``0,``2},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>Updates the values of the boundaries of the range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="T2">The type of new range values.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="range">The source range.</param>
            <param name="fromValueSelector">Callback to obtain a new value for the From boundary. Used if boundary has a value.</param>
            <param name="toValueSelector">Callback to obtain a new value for the To boundary. Used if boundary has a value.</param>
            <returns>A range with new values.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.WithoutKey``2(CodeJam.Ranges.Range{``0,``1})">
            <summary>Creates a range without a range key.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="range">The range to remove key from.</param>
            <returns>A new range without a key.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.MakeInclusive``1(CodeJam.Ranges.Range{``0},System.Func{``0,``0},System.Func{``0,``0})">
            <summary>
            Replaces exclusive boundaries with inclusive ones with the values from the selector callbacks
            </summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="fromValueSelector">Callback to obtain a new value for the From boundary. Used if the boundary is exclusive.</param>
            <param name="toValueSelector">Callback to obtain a new value for the To boundary. Used if the boundary is exclusive.</param>
            <returns>A range with inclusive boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.MakeExclusive``1(CodeJam.Ranges.Range{``0},System.Func{``0,``0},System.Func{``0,``0})">
            <summary>
            Replaces inclusive boundaries with exclusive ones with the values from the selector callbacks
            </summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="fromValueSelector">Callback to obtain a new value for the From boundary. Used if the boundary is inclusive.</param>
            <param name="toValueSelector">Callback to obtain a new value for the To boundary. Used if the boundary is inclusive.</param>
            <returns>A range with exclusive boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.WithKey``2(CodeJam.Ranges.Range{``0},``1)">
            <summary>Creates a new range with the key specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey2">The type of the new key.</typeparam>
            <param name="range">The source range.</param>
            <param name="key">The value of the new key.</param>
            <returns>A new range with the key specified.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Contains``1(CodeJam.Ranges.Range{``0},``0)">
            <summary>Determines whether the range contains the specified value.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="value">The value to check.</param>
            <returns><c>true</c>, if the range contains the value.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Contains``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})">
            <summary>Determines whether the range contains the specified range boundary.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The boundary to check.</param>
            <returns><c>true</c>, if the range contains the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Contains``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})">
            <summary>Determines whether the range contains the specified range boundary.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The boundary to check.</param>
            <returns><c>true</c>, if the range contains the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Contains``1(CodeJam.Ranges.Range{``0},``0,``0)">
            <summary>Determines whether the range contains another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="from">The boundary From value of the range to check.</param>
            <param name="to">The boundary To value of the range to check.</param>
            <returns><c>true</c>, if the range contains another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Contains``2(``1,CodeJam.Ranges.Range{``0})">
            <summary>Determines whether the range contains another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the range contains another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.HasIntersection``1(CodeJam.Ranges.Range{``0},``0,``0)">
            <summary>Determines whether the range has intersection with another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="from">The boundary From value of the range to check.</param>
            <param name="to">The boundary To value of the range to check.</param>
            <returns><c>true</c>, if the range has intersection with another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{``0},``1)">
            <summary>Determines whether the range has intersection with another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TRange">The type of another range.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the range has intersection with another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Adjust``1(CodeJam.Ranges.Range{``0},``0)">
            <summary>Adjusts the specified value so that it fits into a range specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The range the value will be fitted to.</param>
            <param name="value">The value to be adjusted.</param>
            <exception cref="T:System.ArgumentException">The range is empty or any of its boundaries is exclusive.</exception>
            <returns>A new value that fits into a range specified</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.StartsAfter``1(CodeJam.Ranges.Range{``0},``0)">
            <summary>Determines whether the range starts after the value specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="value">The value to check.</param>
            <returns><c>true</c>, if the range starts after the value.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.StartsAfter``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})">
            <summary>Determines whether the range starts after the boundary specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The boundary to check.</param>
            <returns><c>true</c>, if the range starts after the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.StartsAfter``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})">
            <summary>Determines whether the range starts after the boundary specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The boundary to check.</param>
            <returns><c>true</c>, if the range starts after the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(``1,CodeJam.Ranges.Range{``0})">
            <summary>Determines whether the range starts after the range specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the range starts after another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.EndsBefore``1(CodeJam.Ranges.Range{``0},``0)">
            <summary>Determines whether the range ends before the value specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="value">The value to check.</param>
            <returns><c>true</c>, if the range ends before the value.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.EndsBefore``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})">
            <summary>Determines whether the range ends before the boundary specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The boundary to check.</param>
            <returns><c>true</c>, if the range ends before the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.EndsBefore``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})">
            <summary>Determines whether the range ends before the boundary specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The boundary to check.</param>
            <returns><c>true</c>, if the range ends before the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(``1,CodeJam.Ranges.Range{``0})">
            <summary>Determines whether the range ends before the range specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the range ends before another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Union``1(CodeJam.Ranges.Range{``0},``0,``0)">
            <summary>Returns a union range containing both of the ranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="from">The boundary From value.</param>
            <param name="to">The boundary To value.</param>
            <returns>A union range containing both of the ranges.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Union``2(CodeJam.Ranges.Range{``0},``1)">
            <summary>Returns a union range containing both of the ranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TRange">The type of another range.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The range to union with.</param>
            <returns>A union range containing both of the ranges.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.ExtendFrom``1(CodeJam.Ranges.Range{``0},``0)">
            <summary>Extends the range from the left.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="from">A new value From.</param>
            <returns>
            A range with a new From boundary or the source fange if the new boundary is greater than original.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.ExtendFrom``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})">
            <summary>Extends the range from the left.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="from">A new boundary From.</param>
            <returns>
            A range with a new From boundary or the source fange if the new boundary is greater than original.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.ExtendTo``1(CodeJam.Ranges.Range{``0},``0)">
            <summary>Extends the range from the right.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="to">A new value To.</param>
            <returns>
            A range with a new To boundary or the source fange if the new boundary is less than original.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.ExtendTo``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})">
            <summary>Extends the range from the right.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="to">A new boundary To.</param>
            <returns>
            A range with a new To boundary or the source fange if the new boundary is less than original.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Intersect``1(CodeJam.Ranges.Range{``0},``0,``0)">
            <summary>Returns an intersection of the the ranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="from">The boundary From value.</param>
            <param name="to">The boundary To value.</param>
            <returns>An intersection range or empty range if the ranges do not intersect.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Intersect``2(CodeJam.Ranges.Range{``0},``1)">
            <summary>Returns an intersection of the the ranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TRange">The type of another range.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The range to intersect with.</param>
            <returns>An intersection range or empty range if the ranges do not intersect.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.TrimFrom``1(CodeJam.Ranges.Range{``0},``0)">
            <summary>Trims the range from the left.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="from">A new value From.</param>
            <returns>
            A range with a new From boundary
            or the source fange if the new boundary is less than original
            or an empty range if the new From boundary is greater than To boundary of the range.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.TrimFrom``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryFrom{``0})">
            <summary>Trims the range from the left.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="from">A new boundary From.</param>
            <returns>
            A range with a new From boundary
            or the source fange if the new boundary is less than original
            or an empty range if the new From boundary is greater than To boundary of the range.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.TrimTo``1(CodeJam.Ranges.Range{``0},``0)">
            <summary>Trims the range from the right.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="to">A new value To.</param>
            <returns>
            A range with a new To boundary
            or the source fange if the new boundary is greater than original
            or an empty range if the new To boundary is less than From boundary of the range.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.TrimTo``1(CodeJam.Ranges.Range{``0},CodeJam.Ranges.RangeBoundaryTo{``0})">
            <summary>Trims the range from the right.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <param name="range">The source range.</param>
            <param name="to">A new boundary To.</param>
            <returns>
            A range with a new To boundary
            or the source fange if the new boundary is greater than original
            or an empty range if the new To boundary is less than From boundary of the range.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.MakeInclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})">
            <summary>
            Replaces exclusive boundaries with inclusive ones with the values from the selector callbacks
            </summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="fromValueSelector">Callback to obtain a new value for the From boundary. Used if the boundary is exclusive.</param>
            <param name="toValueSelector">Callback to obtain a new value for the To boundary. Used if the boundary is exclusive.</param>
            <returns>A range with inclusive boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.MakeExclusive``2(CodeJam.Ranges.Range{``0,``1},System.Func{``0,``0},System.Func{``0,``0})">
            <summary>
            Replaces inclusive boundaries with exclusive ones with the values from the selector callbacks
            </summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="fromValueSelector">Callback to obtain a new value for the From boundary. Used if the boundary is inclusive.</param>
            <param name="toValueSelector">Callback to obtain a new value for the To boundary. Used if the boundary is inclusive.</param>
            <returns>A range with exclusive boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.WithKey``3(CodeJam.Ranges.Range{``0,``1},``2)">
            <summary>Creates a new range with the key specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="TKey2">The type of the new key.</typeparam>
            <param name="range">The source range.</param>
            <param name="key">The value of the new key.</param>
            <returns>A new range with the key specified.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0)">
            <summary>Determines whether the range contains the specified value.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="value">The value to check.</param>
            <returns><c>true</c>, if the range contains the value.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})">
            <summary>Determines whether the range contains the specified range boundary.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The boundary to check.</param>
            <returns><c>true</c>, if the range contains the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})">
            <summary>Determines whether the range contains the specified range boundary.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The boundary to check.</param>
            <returns><c>true</c>, if the range contains the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Contains``2(CodeJam.Ranges.Range{``0,``1},``0,``0)">
            <summary>Determines whether the range contains another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="from">The boundary From value of the range to check.</param>
            <param name="to">The boundary To value of the range to check.</param>
            <returns><c>true</c>, if the range contains another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Contains``3(``2,CodeJam.Ranges.Range{``0,``1})">
            <summary>Determines whether the range contains another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the range contains another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.HasIntersection``2(CodeJam.Ranges.Range{``0,``1},``0,``0)">
            <summary>Determines whether the range has intersection with another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="from">The boundary From value of the range to check.</param>
            <param name="to">The boundary To value of the range to check.</param>
            <returns><c>true</c>, if the range has intersection with another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.HasIntersection``3(CodeJam.Ranges.Range{``0,``1},``2)">
            <summary>Determines whether the range has intersection with another range.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="TRange">The type of another range.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the range has intersection with another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Adjust``2(CodeJam.Ranges.Range{``0,``1},``0)">
            <summary>Adjusts the specified value so that it fits into a range specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The range the value will be fitted to.</param>
            <param name="value">The value to be adjusted.</param>
            <exception cref="T:System.ArgumentException">The range is empty or any of its boundaries is exclusive.</exception>
            <returns>A new value that fits into a range specified</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},``0)">
            <summary>Determines whether the range starts after the value specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="value">The value to check.</param>
            <returns><c>true</c>, if the range starts after the value.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})">
            <summary>Determines whether the range starts after the boundary specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The boundary to check.</param>
            <returns><c>true</c>, if the range starts after the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.StartsAfter``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})">
            <summary>Determines whether the range starts after the boundary specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The boundary to check.</param>
            <returns><c>true</c>, if the range starts after the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.StartsAfter``3(``2,CodeJam.Ranges.Range{``0,``1})">
            <summary>Determines whether the range starts after the range specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the range starts after another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},``0)">
            <summary>Determines whether the range ends before the value specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="value">The value to check.</param>
            <returns><c>true</c>, if the range ends before the value.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})">
            <summary>Determines whether the range ends before the boundary specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The boundary to check.</param>
            <returns><c>true</c>, if the range ends before the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.EndsBefore``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})">
            <summary>Determines whether the range ends before the boundary specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The boundary to check.</param>
            <returns><c>true</c>, if the range ends before the boundary.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.EndsBefore``3(``2,CodeJam.Ranges.Range{``0,``1})">
            <summary>Determines whether the range ends before the range specified.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="TRange">The type of the range.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The range to check.</param>
            <returns><c>true</c>, if the range ends before another range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Union``2(CodeJam.Ranges.Range{``0,``1},``0,``0)">
            <summary>Returns a union range containing both of the ranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="from">The boundary From value.</param>
            <param name="to">The boundary To value.</param>
            <returns>A union range containing both of the ranges.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Union``3(CodeJam.Ranges.Range{``0,``1},``2)">
            <summary>Returns a union range containing both of the ranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="TRange">The type of another range.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The range to union with.</param>
            <returns>A union range containing both of the ranges.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},``0)">
            <summary>Extends the range from the left.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="from">A new value From.</param>
            <returns>
            A range with a new From boundary or the source fange if the new boundary is greater than original.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.ExtendFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})">
            <summary>Extends the range from the left.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="from">A new boundary From.</param>
            <returns>
            A range with a new From boundary or the source fange if the new boundary is greater than original.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},``0)">
            <summary>Extends the range from the right.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="to">A new value To.</param>
            <returns>
            A range with a new To boundary or the source fange if the new boundary is less than original.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.ExtendTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})">
            <summary>Extends the range from the right.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="to">A new boundary To.</param>
            <returns>
            A range with a new To boundary or the source fange if the new boundary is less than original.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Intersect``2(CodeJam.Ranges.Range{``0,``1},``0,``0)">
            <summary>Returns an intersection of the the ranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="from">The boundary From value.</param>
            <param name="to">The boundary To value.</param>
            <returns>An intersection range or empty range if the ranges do not intersect.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.Intersect``3(CodeJam.Ranges.Range{``0,``1},``2)">
            <summary>Returns an intersection of the the ranges.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <typeparam name="TRange">The type of another range.</typeparam>
            <param name="range">The source range.</param>
            <param name="other">The range to intersect with.</param>
            <returns>An intersection range or empty range if the ranges do not intersect.</returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},``0)">
            <summary>Trims the range from the left.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="from">A new value From.</param>
            <returns>
            A range with a new From boundary
            or the source fange if the new boundary is less than original
            or an empty range if the new From boundary is greater than To boundary of the range.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.TrimFrom``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryFrom{``0})">
            <summary>Trims the range from the left.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="from">A new boundary From.</param>
            <returns>
            A range with a new From boundary
            or the source fange if the new boundary is less than original
            or an empty range if the new From boundary is greater than To boundary of the range.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},``0)">
            <summary>Trims the range from the right.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="to">A new value To.</param>
            <returns>
            A range with a new To boundary
            or the source fange if the new boundary is greater than original
            or an empty range if the new To boundary is less than From boundary of the range.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.RangeExtensions.TrimTo``2(CodeJam.Ranges.Range{``0,``1},CodeJam.Ranges.RangeBoundaryTo{``0})">
            <summary>Trims the range from the right.</summary>
            <typeparam name="T">The type of the range values.</typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <param name="range">The source range.</param>
            <param name="to">A new boundary To.</param>
            <returns>
            A range with a new To boundary
            or the source fange if the new boundary is greater than original
            or an empty range if the new To boundary is less than From boundary of the range.
            </returns>
        </member>
        <member name="T:CodeJam.Ranges.CompositeRange`1">
            <typeparam name="T">
            The type of the value. Should implement <seealso cref="T:System.IComparable`1"/> or <seealso cref="T:System.IComparable"/>.
            </typeparam>
            <summary>Describes a composite range that contains some subranges.</summary>
        </member>
        <member name="T:CodeJam.Ranges.CompositeRange`1.SubRangesComparer">
            <summary>
            Helper comparer. If <see cref="P:CodeJam.Ranges.IRange`1.From"/> are equal,
            shortest range (the one with smaller <see cref="P:CodeJam.Ranges.IRange`1.To"/>) goes first.
            </summary>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`1.SubRangesComparer.Compare(CodeJam.Ranges.Range{`0},CodeJam.Ranges.Range{`0})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`1.op_Equality(CodeJam.Ranges.CompositeRange{`0},CodeJam.Ranges.CompositeRange{`0})">
            <summary>Implements the operator ==.</summary>
            <param name="range1">The range1.</param>
            <param name="range2">The range2.</param>
            <returns><c>True</c>, if ranges are equal.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`1.op_Inequality(CodeJam.Ranges.CompositeRange{`0},CodeJam.Ranges.CompositeRange{`0})">
            <summary>Implements the operator !=.</summary>
            <param name="range1">The range1.</param>
            <param name="range2">The range2.</param>
            <returns><c>True</c>, if ranges are not equal.</returns>
        </member>
        <member name="F:CodeJam.Ranges.CompositeRange`1.BoundaryToDescendingComparer">
            <summary>Helper comparer for operations over <see cref="P:CodeJam.Ranges.IRange`1.To"/>.</summary>
        </member>
        <member name="F:CodeJam.Ranges.CompositeRange`1.Empty">
            <summary>Empty range, ∅</summary>
        </member>
        <member name="F:CodeJam.Ranges.CompositeRange`1.Infinite">
            <summary>Infinite range, (-∞..+∞)</summary>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`1.#ctor(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{`0}})">
            <summary>Creates instance of <seealso cref="T:CodeJam.Ranges.CompositeRange`1"/>.</summary>
            <param name="ranges">Contained ranges.</param>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`1.#ctor(CodeJam.Ranges.Range{`0})">
            <summary>Creates instance of <seealso cref="T:CodeJam.Ranges.CompositeRange`1"/>.</summary>
            <param name="range">Contained range.</param>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`1.#ctor(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{`0}},CodeJam.Ranges.CompositeRangeInternal.UnsafeOverload)">
            <summary>Creates instance of <seealso cref="T:CodeJam.Ranges.CompositeRange`1"/>.</summary>
            <param name="ranges">Contained ranges.</param>
            <param name="skipsArgHandling">Stub argument to mark unsafe (no validation) constructor overload.</param>
        </member>
        <member name="P:CodeJam.Ranges.CompositeRange`1.IsMerged">
            <summary>The composite range cannot be simplified anymore. Subranges do not intersect and start one exactly after another.</summary>
            <value><c>true</c> if all subranges are merged already; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.CompositeRange`1.IsEmpty">
            <summary>The composite range is empty, ∅.</summary>
            <value><c>true</c> if the range is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.CompositeRange`1.IsNotEmpty">
            <summary>The composite range is NOT empty, ≠ ∅</summary>
            <value><c>true</c> if the range is not empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.CompositeRange`1.SubRanges">
            <summary>Collection of subranges.</summary>
            <value>The collection of subranges.</value>
        </member>
        <member name="P:CodeJam.Ranges.CompositeRange`1.ContainingRange">
            <summary>Range that contains all subranges.</summary>
            <value>The containing range.</value>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`1.ToString">
            <summary>Returns string representation of the range.</summary>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`1.ToString(System.String)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`1.ToString(System.IFormatProvider)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="format">The format string.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`1.CodeJam#Ranges#ICompositeRange{T}#GetMergedRanges">
            <summary>Returns a sequence of merged subranges. Should be used for operations over the ranges.</summary>
            <returns>A sequence of merged subranges</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`1.GetMergedRanges">
            <summary>Returns a sequence of merged subranges. Should be used for operations over the ranges.</summary>
            <returns>A sequence of merged subranges</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`1.Merge">
            <summary>Returns simplified composite range. Adjacent ranges with same keys will be merged.</summary>
            <returns>Simplified composite range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`1.Equals(CodeJam.Ranges.CompositeRange{`0})">
            <summary>Indicates whether the current range is equal to another.</summary>
            <param name="other">A range to compare with this.</param>
            <returns>
            <c>True</c> if the current range is equal to the <paramref name="other"/> parameter;
            otherwise, false.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`1.Equals(System.Object)">
            <summary>Indicates whether the current range and a specified object are equal.</summary>
            <param name="obj">The object to compare with this. </param>
            <returns>
            <c>True</c> if <paramref name="obj"/> and the current range are the same type
            and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`1.GetHashCode">
            <summary>Returns a hash code for the current range.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:CodeJam.Ranges.CompositeRange`2">
            <typeparam name="T">
            The type of the value. Should implement <seealso cref="T:System.IComparable`1"/> or <seealso cref="T:System.IComparable"/>.
            </typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <summary>Describes a range of the values.</summary>
        </member>
        <member name="T:CodeJam.Ranges.CompositeRange`2.SubRangesComparer">
            <summary>
            Helper comparer. If <see cref="P:CodeJam.Ranges.IRange`1.From"/> are equal,
            shortest range (the one with smaller <see cref="P:CodeJam.Ranges.IRange`1.To"/>) goes first.
            </summary>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`2.SubRangesComparer.Compare(CodeJam.Ranges.Range{`0,`1},CodeJam.Ranges.Range{`0,`1})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`2.op_Equality(CodeJam.Ranges.CompositeRange{`0,`1},CodeJam.Ranges.CompositeRange{`0,`1})">
            <summary>Implements the operator ==.</summary>
            <param name="range1">The range1.</param>
            <param name="range2">The range2.</param>
            <returns><c>True</c>, if ranges are equal.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`2.op_Inequality(CodeJam.Ranges.CompositeRange{`0,`1},CodeJam.Ranges.CompositeRange{`0,`1})">
            <summary>Implements the operator !=.</summary>
            <param name="range1">The range1.</param>
            <param name="range2">The range2.</param>
            <returns><c>True</c>, if ranges are not equal.</returns>
        </member>
        <member name="F:CodeJam.Ranges.CompositeRange`2.BoundaryToDescendingComparer">
            <summary>Helper comparer for operations over <see cref="P:CodeJam.Ranges.IRange`1.To"/>.</summary>
        </member>
        <member name="F:CodeJam.Ranges.CompositeRange`2.Empty">
            <summary>Empty range, ∅</summary>
        </member>
        <member name="F:CodeJam.Ranges.CompositeRange`2.Infinite">
            <summary>Infinite range, (-∞..+∞)</summary>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`2.#ctor(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{`0,`1}})">
            <summary>Creates instance of <seealso cref="T:CodeJam.Ranges.CompositeRange`1"/>.</summary>
            <param name="ranges">Contained ranges.</param>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`2.#ctor(CodeJam.Ranges.Range{`0,`1})">
            <summary>Creates instance of <seealso cref="T:CodeJam.Ranges.CompositeRange`1"/>.</summary>
            <param name="range">Contained range.</param>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`2.#ctor(System.Collections.Generic.IEnumerable{CodeJam.Ranges.Range{`0,`1}},CodeJam.Ranges.CompositeRangeInternal.UnsafeOverload)">
            <summary>Creates instance of <seealso cref="T:CodeJam.Ranges.CompositeRange`1"/>.</summary>
            <param name="ranges">Contained ranges.</param>
            <param name="skipsArgHandling">Stub argument to mark unsafe (no validation) constructor overload.</param>
        </member>
        <member name="P:CodeJam.Ranges.CompositeRange`2.IsMerged">
            <summary>The composite range cannot be simplified anymore. Subranges do not intersect and start one exactly after another.</summary>
            <value><c>true</c> if all subranges are merged already; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.CompositeRange`2.IsEmpty">
            <summary>The composite range is empty, ∅.</summary>
            <value><c>true</c> if the range is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.CompositeRange`2.IsNotEmpty">
            <summary>The composite range is NOT empty, ≠ ∅</summary>
            <value><c>true</c> if the range is not empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.CompositeRange`2.SubRanges">
            <summary>Collection of subranges.</summary>
            <value>The collection of subranges.</value>
        </member>
        <member name="P:CodeJam.Ranges.CompositeRange`2.ContainingRange">
            <summary>Range that contains all subranges.</summary>
            <value>The containing range.</value>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`2.ToString">
            <summary>Returns string representation of the range.</summary>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`2.ToString(System.String)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`2.ToString(System.IFormatProvider)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="format">The format string.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`2.CodeJam#Ranges#ICompositeRange{T}#GetMergedRanges">
            <summary>Returns a sequence of merged subranges. Should be used for operations over the ranges.</summary>
            <returns>A sequence of merged subranges</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`2.GetMergedRanges">
            <summary>Returns a sequence of merged subranges. Should be used for operations over the ranges.</summary>
            <returns>A sequence of merged subranges</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`2.Merge">
            <summary>Returns simplified composite range. Adjacent ranges with same keys will be merged.</summary>
            <returns>Simplified composite range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`2.Equals(CodeJam.Ranges.CompositeRange{`0,`1})">
            <summary>Indicates whether the current range is equal to another.</summary>
            <param name="other">A range to compare with this.</param>
            <returns>
            <c>True</c> if the current range is equal to the <paramref name="other"/> parameter;
            otherwise, false.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`2.Equals(System.Object)">
            <summary>Indicates whether the current range and a specified object are equal.</summary>
            <param name="obj">The object to compare with this. </param>
            <returns>
            <c>True</c> if <paramref name="obj"/> and the current range are the same type
            and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.CompositeRange`2.GetHashCode">
            <summary>Returns a hash code for the current range.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:CodeJam.Ranges.ICompositeRange`1">
            <summary>Common interface for different composite range implementations</summary>
            <typeparam name="T">
            The type of the value. Should implement <seealso cref="T:System.IComparable`1"/> or <seealso cref="T:System.IComparable"/>.
            </typeparam>
        </member>
        <member name="P:CodeJam.Ranges.ICompositeRange`1.IsEmpty">
            <summary>The composite range is empty, ∅.</summary>
            <value><c>true</c> if the range is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.ICompositeRange`1.IsNotEmpty">
            <summary>The composite range is NOT empty, ≠ ∅</summary>
            <value><c>true</c> if the range is not empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.ICompositeRange`1.ContainingRange">
            <summary>Range that contains all subranges.</summary>
            <value>The containing range.</value>
        </member>
        <member name="M:CodeJam.Ranges.ICompositeRange`1.GetMergedRanges">
            <summary>Returns a sequence of merged subranges. Should be used for operations over the ranges.</summary>
            <returns>A sequence of merged subranges</returns>
        </member>
        <member name="T:CodeJam.Ranges.IRangeFactory`2">
            <summary>
            Common factory interface to enable 'derived' range creation.
            Use case example: preserve the key of the range on range intersection.
            </summary>
            <typeparam name="T">
            The type of the value. Should implement <seealso cref="T:System.IComparable`1"/> or <seealso cref="T:System.IComparable"/>.
            </typeparam>
            <typeparam name="TRange">The type of the resulting range</typeparam>
            <seealso cref="T:CodeJam.Ranges.IRange`1"/>
        </member>
        <member name="M:CodeJam.Ranges.IRangeFactory`2.CreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Creates a new instance of the range.</summary>
            <param name="from">Boundary From.</param>
            <param name="to">Boundary To.</param>
            <returns>A new instance of the range with specified From-To boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.IRangeFactory`2.TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Creates a new instance of the range, if possible.</summary>
            <param name="from">Boundary From.</param>
            <param name="to">Boundary To.</param>
            <returns>
            A new instance of the range with specified From-To boundaries,
            or empty range, if from-to boundaries forms invalid range pair.
            </returns>
        </member>
        <member name="T:CodeJam.Ranges.IRange`1">
            <summary>Common interface for different range implementations</summary>
            <typeparam name="T">
            The type of the value. Should implement <seealso cref="T:System.IComparable`1"/> or <seealso cref="T:System.IComparable"/>.
            </typeparam>
        </member>
        <member name="P:CodeJam.Ranges.IRange`1.From">
            <summary>Boundary From. Limits the values from the left.</summary>
            <value>Boundary From.</value>
        </member>
        <member name="P:CodeJam.Ranges.IRange`1.To">
            <summary>Boundary To. Limits the values from the right.</summary>
            <value>Boundary To.</value>
        </member>
        <member name="P:CodeJam.Ranges.IRange`1.IsEmpty">
            <summary>The range is empty, ∅.</summary>
            <value><c>true</c> if the range is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.IRange`1.IsNotEmpty">
            <summary>The range is NOT empty, ≠ ∅</summary>
            <value><c>true</c> if the range is not empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CodeJam.Ranges.Range`1">
            <typeparam name="T">
            The type of the value. Should implement <seealso cref="T:System.IComparable`1"/> or <seealso cref="T:System.IComparable"/>.
            </typeparam>
            <summary>Describes a range of the values.</summary>
        </member>
        <member name="M:CodeJam.Ranges.Range`1.op_Equality(CodeJam.Ranges.Range{`0},CodeJam.Ranges.Range{`0})">
            <summary>Implements the operator ==.</summary>
            <param name="range1">The range1.</param>
            <param name="range2">The range2.</param>
            <returns><c>True</c>, if ranges are equal.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`1.op_Inequality(CodeJam.Ranges.Range{`0},CodeJam.Ranges.Range{`0})">
            <summary>Implements the operator !=.</summary>
            <param name="range1">The range1.</param>
            <param name="range2">The range2.</param>
            <returns><c>True</c>, if ranges are not equal.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`1.#ctor(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Creates instance of <seealso cref="T:CodeJam.Ranges.Range`1"/></summary>
            <param name="from">Boundary From.</param>
            <param name="to">Boundary To.</param>
        </member>
        <member name="M:CodeJam.Ranges.Range`1.#ctor(`0,`0)">
            <summary>Creates instance of <seealso cref="T:CodeJam.Ranges.Range`1"/></summary>
            <param name="from">Boundary From.</param>
            <param name="to">Boundary To.</param>
        </member>
        <member name="M:CodeJam.Ranges.Range`1.#ctor(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0},CodeJam.Ranges.RangeInternal.UnsafeOverload)">
            <summary>
            Creates instance of <seealso cref="T:CodeJam.Ranges.Range`1"/>
            </summary>
            <param name="from">Boundary from</param>
            <param name="to">Boundary to</param>
            <param name="skipsArgValidation">Stub argument to mark unsafe (no validation) constructor overload.</param>
        </member>
        <member name="P:CodeJam.Ranges.Range`1.From">
            <summary>Boundary From. Limits the values from the left.</summary>
            <value>Boundary From.</value>
        </member>
        <member name="P:CodeJam.Ranges.Range`1.To">
            <summary>Boundary To. Limits the values from the right.</summary>
            <value>Boundary To.</value>
        </member>
        <member name="P:CodeJam.Ranges.Range`1.FromValue">
            <summary>The value of Boundary From.</summary>
            <value>The value of Boundary From or InvalidOperationException, if From.HasValue is <c>false</c>.</value>
            <exception cref="T:System.InvalidOperationException">Thrown if From.HasValue is <c>false</c>.</exception>
        </member>
        <member name="P:CodeJam.Ranges.Range`1.ToValue">
            <summary>The value of Boundary To.</summary>
            <value>The value of Boundary To or InvalidOperationException, if To.HasValue is <c>false</c>.</value>
            <exception cref="T:System.InvalidOperationException">Thrown if To.HasValue is <c>false</c>.</exception>
        </member>
        <member name="P:CodeJam.Ranges.Range`1.IsEmpty">
            <summary>The range is empty, ∅.</summary>
            <value><c>true</c> if the range is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.Range`1.IsNotEmpty">
            <summary>The range is NOT empty, ≠ ∅</summary>
            <value><c>true</c> if the range is not empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.Range`1.IsSinglePoint">
            <summary>
            The range is Zero length range (the values of the boundary From and the boundary To are the same).
            </summary>
            <value> <c>true</c> if the range is single point range; otherwise, <c>false</c>. </value>
        </member>
        <member name="P:CodeJam.Ranges.Range`1.IsInfinite">
            <summary>The range is Infinite range (-∞..+∞).</summary>
            <value><c>true</c> if the range is infinite; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:CodeJam.Ranges.Range`1.Empty">
            <summary>Empty range, ∅</summary>
        </member>
        <member name="F:CodeJam.Ranges.Range`1.Infinite">
            <summary>Infinite range, (-∞..+∞)</summary>
        </member>
        <member name="M:CodeJam.Ranges.Range`1.CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T}}#CreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Creates a new instance of the range.</summary>
            <param name="from">Boundary From.</param>
            <param name="to">Boundary To.</param>
            <returns>A new instance of the range with specified From-To boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`1.CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T}}#TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Creates a new instance of the range, if possible.</summary>
            <param name="from">Boundary From.</param>
            <param name="to">Boundary To.</param>
            <returns>
            A new instance of the range with specified From-To boundaries,
            or empty range, if from-to boundaries forms invalid range pair.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`1.Equals(CodeJam.Ranges.Range{`0})">
            <summary>Indicates whether the current range is equal to another.</summary>
            <param name="other">A range to compare with this.</param>
            <returns>
            <c>True</c> if the current range is equal to the <paramref name="other"/> parameter;
            otherwise, false.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`1.Equals(System.Object)">
            <summary>Indicates whether the current range and a specified object are equal.</summary>
            <param name="obj">The object to compare with this. </param>
            <returns>
            <c>True</c> if <paramref name="obj"/> and the current range are the same type
            and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`1.GetHashCode">
            <summary>Returns a hash code for the current range.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`1.ToString">
            <summary>Returns string representation of the range.</summary>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`1.ToString(System.String)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`1.ToString(System.IFormatProvider)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="format">The format string.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="T:CodeJam.Ranges.Range`2">
            <typeparam name="T">
            The type of the value. Should implement <seealso cref="T:System.IComparable`1"/> or <seealso cref="T:System.IComparable"/>.
            </typeparam>
            <typeparam name="TKey">The type of the range key</typeparam>
            <summary>Describes a range of the values with a key attached.</summary>
        </member>
        <member name="M:CodeJam.Ranges.Range`2.op_Equality(CodeJam.Ranges.Range{`0,`1},CodeJam.Ranges.Range{`0,`1})">
            <summary>Implements the operator ==.</summary>
            <param name="range1">The range1.</param>
            <param name="range2">The range2.</param>
            <returns><c>True</c>, if ranges are equal.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`2.op_Inequality(CodeJam.Ranges.Range{`0,`1},CodeJam.Ranges.Range{`0,`1})">
            <summary>Implements the operator !=.</summary>
            <param name="range1">The range1.</param>
            <param name="range2">The range2.</param>
            <returns><c>True</c>, if ranges are not equal.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`2.#ctor(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0},`1)">
            <summary>Creates instance of <seealso cref="T:CodeJam.Ranges.Range`1"/></summary>
            <param name="from">Boundary From.</param>
            <param name="to">Boundary To.</param>
            <param name="key">The value of the range key.</param>
        </member>
        <member name="M:CodeJam.Ranges.Range`2.#ctor(`0,`0,`1)">
            <summary>Creates instance of <seealso cref="T:CodeJam.Ranges.Range`1"/></summary>
            <param name="from">Boundary From.</param>
            <param name="to">Boundary To.</param>
            <param name="key">The value of the range key.</param>
        </member>
        <member name="M:CodeJam.Ranges.Range`2.#ctor(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0},`1,CodeJam.Ranges.RangeInternal.UnsafeOverload)">
            <summary>
            Creates instance of <seealso cref="T:CodeJam.Ranges.Range`1"/>
            </summary>
            <param name="from">Boundary from</param>
            <param name="to">Boundary to</param>
            <param name="key">The value of the range key.</param>
            <param name="skipsArgValidation">Stub argument to mark unsafe (no validation) constructor overload.</param>
        </member>
        <member name="P:CodeJam.Ranges.Range`2.From">
            <summary>Boundary From. Limits the values from the left.</summary>
            <value>Boundary From.</value>
        </member>
        <member name="P:CodeJam.Ranges.Range`2.To">
            <summary>Boundary To. Limits the values from the right.</summary>
            <value>Boundary To.</value>
        </member>
        <member name="P:CodeJam.Ranges.Range`2.FromValue">
            <summary>The value of Boundary From.</summary>
            <value>The value of Boundary From or InvalidOperationException, if From.HasValue is <c>false</c>.</value>
            <exception cref="T:System.InvalidOperationException">Thrown if From.HasValue is <c>false</c>.</exception>
        </member>
        <member name="P:CodeJam.Ranges.Range`2.ToValue">
            <summary>The value of Boundary To.</summary>
            <value>The value of Boundary To or InvalidOperationException, if To.HasValue is <c>false</c>.</value>
            <exception cref="T:System.InvalidOperationException">Thrown if To.HasValue is <c>false</c>.</exception>
        </member>
        <member name="P:CodeJam.Ranges.Range`2.IsEmpty">
            <summary>The range is empty, ∅.</summary>
            <value><c>true</c> if the range is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.Range`2.IsNotEmpty">
            <summary>The range is NOT empty, ≠ ∅</summary>
            <value><c>true</c> if the range is not empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeJam.Ranges.Range`2.IsSinglePoint">
            <summary>
            The range is Zero length range (the values of the boundary From and the boundary To are the same).
            </summary>
            <value> <c>true</c> if the range is single point range; otherwise, <c>false</c>. </value>
        </member>
        <member name="P:CodeJam.Ranges.Range`2.IsInfinite">
            <summary>The range is Infinite range (-∞..+∞).</summary>
            <value><c>true</c> if the range is infinite; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:CodeJam.Ranges.Range`2.Empty">
            <summary>Empty range, ∅</summary>
        </member>
        <member name="F:CodeJam.Ranges.Range`2.Infinite">
            <summary>Infinite range, (-∞..+∞)</summary>
        </member>
        <member name="P:CodeJam.Ranges.Range`2.Key">
            <summary>The value associated with the range.</summary>
            <value>The value of the range key.</value>
        </member>
        <member name="M:CodeJam.Ranges.Range`2.CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T,TKey}}#CreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Creates a new instance of the range.</summary>
            <param name="from">Boundary From.</param>
            <param name="to">Boundary To.</param>
            <returns>A new instance of the range with specified From-To boundaries.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`2.CodeJam#Ranges#IRangeFactory{T,CodeJam#Ranges#Range{T,TKey}}#TryCreateRange(CodeJam.Ranges.RangeBoundaryFrom{`0},CodeJam.Ranges.RangeBoundaryTo{`0})">
            <summary>Creates a new instance of the range, if possible.</summary>
            <param name="from">Boundary From.</param>
            <param name="to">Boundary To.</param>
            <returns>
            A new instance of the range with specified From-To boundaries,
            or empty range, if from-to boundaries forms invalid range pair.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`2.Equals(CodeJam.Ranges.Range{`0,`1})">
            <summary>Indicates whether the current range is equal to another.</summary>
            <param name="other">An range to compare with this.</param>
            <returns>
            <c>True</c> if the current range is equal to the <paramref name="other"/> parameter;
            otherwise, false.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`2.Equals(System.Object)">
            <summary>Indicates whether the current range and a specified object are equal.</summary>
            <param name="obj">The object to compare with this. </param>
            <returns>
            <c>True</c> if <paramref name="obj"/> and the current range are the same type
            and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`2.GetHashCode">
            <summary>Returns a hash code for the current range.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`2.ToString">
            <summary>Returns string representation of the range.</summary>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`2.ToString(System.String)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="format">The format string.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`2.ToString(System.IFormatProvider)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="M:CodeJam.Ranges.Range`2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns string representation of the range using the specified format string.
            If <typeparamref name="T"/> does not implement <seealso cref="T:System.IFormattable"/> the format string is ignored.
            </summary>
            <param name="format">The format string.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>The string representation of the range.</returns>
        </member>
        <member name="T:CodeJam.Strings.CharExtensions">
            <summary>
            <see cref="T:System.Char"/> structure extensions.
            </summary>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.IsControl(System.Char)">
            <summary>
            Indicates whether a Unicode character is categorized as a control.
            </summary>
            <param name="chr">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="chr"/> is a control; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.IsHighSurrogate(System.Char)">
            <summary>
            Indicates whether a Unicode character is categorized as a highsurrogate.
            </summary>
            <param name="chr">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="chr"/> is a highsurrogate; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.IsLowSurrogate(System.Char)">
            <summary>
            Indicates whether a Unicode character is categorized as a lowsurrogate.
            </summary>
            <param name="chr">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="chr"/> is a lowsurrogate; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.IsDigit(System.Char)">
            <summary>
            Indicates whether a Unicode character is categorized as a digit.
            </summary>
            <param name="chr">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="chr"/> is a digit; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.IsLetter(System.Char)">
            <summary>
            Indicates whether a Unicode character is categorized as a letter.
            </summary>
            <param name="chr">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="chr"/> is a letter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.IsLetterOrDigit(System.Char)">
            <summary>
            Indicates whether a Unicode character is categorized as a letterordigit.
            </summary>
            <param name="chr">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="chr"/> is a letterordigit; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.IsLower(System.Char)">
            <summary>
            Indicates whether a Unicode character is categorized as a lower.
            </summary>
            <param name="chr">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="chr"/> is a lower; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.IsUpper(System.Char)">
            <summary>
            Indicates whether a Unicode character is categorized as a upper.
            </summary>
            <param name="chr">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="chr"/> is a upper; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.IsNumber(System.Char)">
            <summary>
            Indicates whether a Unicode character is categorized as a number.
            </summary>
            <param name="chr">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="chr"/> is a number; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.IsPunctuation(System.Char)">
            <summary>
            Indicates whether a Unicode character is categorized as a punctuation.
            </summary>
            <param name="chr">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="chr"/> is a punctuation; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.IsSeparator(System.Char)">
            <summary>
            Indicates whether a Unicode character is categorized as a separator.
            </summary>
            <param name="chr">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="chr"/> is a separator; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.IsSurrogate(System.Char)">
            <summary>
            Indicates whether a Unicode character is categorized as a surrogate.
            </summary>
            <param name="chr">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="chr"/> is a surrogate; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.IsSymbol(System.Char)">
            <summary>
            Indicates whether a Unicode character is categorized as a symbol.
            </summary>
            <param name="chr">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="chr"/> is a symbol; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.IsWhiteSpace(System.Char)">
            <summary>
            Indicates whether a Unicode character is categorized as a whitespace.
            </summary>
            <param name="chr">The Unicode character to evaluate.</param>
            <returns><c>true</c> if <paramref name="chr"/> is a whitespace; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.ToLower(System.Char)">
            <summary>
            Converts the value of a Unicode character to its lowercase equivalent.
            </summary>
            <param name="chr">The Unicode character to convert.</param>
            <returns>
            The lowercase equivalent of <paramref name="chr"/>, or the unchanged value of <paramref name="chr"/>,
            if <paramref name="chr"/> is already lowercase or not alphabetic.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.ToLower(System.Char,System.Globalization.CultureInfo)">
            <summary>
            Converts the value of a Unicode character to its lowercase equivalent.
            </summary>
            <param name="chr">The Unicode character to convert.</param>
            <param name="culture">An object that supplies culture-specific casing rules.</param>
            <returns>
            The lowercase equivalent of <paramref name="chr"/>, modified according to <paramref name="culture"/>,
            or the unchanged value of <paramref name="chr"/>, if <paramref name="chr"/> is already lowercase or not
            alphabetic.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.ToLowerInvariant(System.Char)">
            <summary>
            Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant
            culture.
            </summary>
            <param name="chr">The Unicode character to convert.</param>
            <returns>
            The lowercase equivalent of <paramref name="chr"/>, or the unchanged value of <paramref name="chr"/>,
            if <paramref name="chr"/> is already lowercase or not alphabetic.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.ToUpper(System.Char)">
            <summary>
            Converts the value of a Unicode character to its uppercase equivalent.
            </summary>
            <param name="chr">The Unicode character to convert.</param>
            <returns>
            The uppercase equivalent of <paramref name="chr"/>, or the unchanged value of <paramref name="chr"/>,
            if <paramref name="chr"/> is already uppercase or not alphabetic.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.ToUpper(System.Char,System.Globalization.CultureInfo)">
            <summary>
            Converts the value of a Unicode character to its uppercase equivalent.
            </summary>
            <param name="chr">The Unicode character to convert.</param>
            <param name="culture">An object that supplies culture-specific casing rules.</param>
            <returns>
            The uppercase equivalent of <paramref name="chr"/>, modified according to <paramref name="culture"/>,
            or the unchanged value of <paramref name="chr"/>,  if <paramref name="chr"/> is already uppercase or not
            alphabetic.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.CharExtensions.ToUpperInvariant(System.Char)">
            <summary>
            Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant
            culture.
            </summary>
            <param name="chr">The Unicode character to convert.</param>
            <returns>
            The uppercase equivalent of <paramref name="chr"/>, or the unchanged value of <paramref name="chr"/>,
            if <paramref name="chr"/> is already uppercase or not alphabetic.
            </returns>
        </member>
        <member name="T:CodeJam.Strings.StringExtensions">
            <summary>
            <see cref="T:System.String"/> class extensions.
            </summary>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsControl(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specified position in a specified string is categorized as a control.
            </summary>
            <param name="str">A string.</param>
            <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
            <returns>
            <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a control
            character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsHighSurrogate(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specified position in a specified string is categorized as a highsurrogate.
            </summary>
            <param name="str">A string.</param>
            <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
            <returns>
            <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a highsurrogate
            character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsLowSurrogate(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specified position in a specified string is categorized as a lowsurrogate.
            </summary>
            <param name="str">A string.</param>
            <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
            <returns>
            <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a lowsurrogate
            character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsDigit(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specified position in a specified string is categorized as a digit.
            </summary>
            <param name="str">A string.</param>
            <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
            <returns>
            <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a digit
            character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsDigit(System.String)">
            <summary>
            Indicates whether all characters in a specified string is categorized as a digit.
            </summary>
            <param name="str">A string</param>
            <returns>
            <c>true</c> if all character in <paramref name="str"/> is a digit; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsLetter(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specified position in a specified string is categorized as a letter.
            </summary>
            <param name="str">A string.</param>
            <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
            <returns>
            <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a letter
            character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsLetter(System.String)">
            <summary>
            Indicates whether all characters in a specified string is categorized as a letter.
            </summary>
            <param name="str">A string</param>
            <returns>
            <c>true</c> if all character in <paramref name="str"/> is a letter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsLetterOrDigit(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specified position in a specified string is categorized as a letterordigit.
            </summary>
            <param name="str">A string.</param>
            <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
            <returns>
            <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a letterordigit
            character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsLetterOrDigit(System.String)">
            <summary>
            Indicates whether all characters in a specified string is categorized as a letterordigit.
            </summary>
            <param name="str">A string</param>
            <returns>
            <c>true</c> if all character in <paramref name="str"/> is a letterordigit; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsLower(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specified position in a specified string is categorized as a lower.
            </summary>
            <param name="str">A string.</param>
            <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
            <returns>
            <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a lower
            character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsLower(System.String)">
            <summary>
            Indicates whether all characters in a specified string is categorized as a lower.
            </summary>
            <param name="str">A string</param>
            <returns>
            <c>true</c> if all character in <paramref name="str"/> is a lower; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsUpper(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specified position in a specified string is categorized as a upper.
            </summary>
            <param name="str">A string.</param>
            <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
            <returns>
            <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a upper
            character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsUpper(System.String)">
            <summary>
            Indicates whether all characters in a specified string is categorized as a upper.
            </summary>
            <param name="str">A string</param>
            <returns>
            <c>true</c> if all character in <paramref name="str"/> is a upper; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsNumber(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specified position in a specified string is categorized as a number.
            </summary>
            <param name="str">A string.</param>
            <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
            <returns>
            <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a number
            character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsNumber(System.String)">
            <summary>
            Indicates whether all characters in a specified string is categorized as a number.
            </summary>
            <param name="str">A string</param>
            <returns>
            <c>true</c> if all character in <paramref name="str"/> is a number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsPunctuation(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specified position in a specified string is categorized as a punctuation.
            </summary>
            <param name="str">A string.</param>
            <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
            <returns>
            <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a punctuation
            character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsPunctuation(System.String)">
            <summary>
            Indicates whether all characters in a specified string is categorized as a punctuation.
            </summary>
            <param name="str">A string</param>
            <returns>
            <c>true</c> if all character in <paramref name="str"/> is a punctuation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsSeparator(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specified position in a specified string is categorized as a separator.
            </summary>
            <param name="str">A string.</param>
            <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
            <returns>
            <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a separator
            character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsSeparator(System.String)">
            <summary>
            Indicates whether all characters in a specified string is categorized as a separator.
            </summary>
            <param name="str">A string</param>
            <returns>
            <c>true</c> if all character in <paramref name="str"/> is a separator; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsSurrogate(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specified position in a specified string is categorized as a surrogate.
            </summary>
            <param name="str">A string.</param>
            <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
            <returns>
            <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a surrogate
            character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsSurrogatePair(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specified position in a specified string is categorized as a surrogatepair.
            </summary>
            <param name="str">A string.</param>
            <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
            <returns>
            <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a surrogatepair
            character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsSymbol(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specified position in a specified string is categorized as a symbol.
            </summary>
            <param name="str">A string.</param>
            <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
            <returns>
            <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a symbol
            character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsSymbol(System.String)">
            <summary>
            Indicates whether all characters in a specified string is categorized as a symbol.
            </summary>
            <param name="str">A string</param>
            <returns>
            <c>true</c> if all character in <paramref name="str"/> is a symbol; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsWhiteSpace(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specified position in a specified string is categorized as a whitespace.
            </summary>
            <param name="str">A string.</param>
            <param name="index">The position of the character to evaluate in <paramref name="str"/>.</param>
            <returns>
            <c>true</c> if the character at position <paramref name="index"/> in <paramref name="str"/> is a whitespace
            character; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsWhiteSpace(System.String)">
            <summary>
            Indicates whether all characters in a specified string is categorized as a whitespace.
            </summary>
            <param name="str">A string</param>
            <returns>
            <c>true</c> if all character in <paramref name="str"/> is a whitespace; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.Substring(System.String,CodeJam.Strings.StringOrigin,System.Int32)">
            <summary>
            Retrieves a substring from <paramref name="str"/>.
            </summary>
            <param name="str">
            String to retrieve substring from.
            </param>
            <param name="origin">
            Specifies the beginning, or the end as a reference point for offset, using a value of type
            <see cref="T:CodeJam.Strings.StringOrigin"/>.
            </param>
            <param name="length">The number of characters in the substring.</param>
            <returns>
            A string that is equivalent to the substring of length <paramref name="length"/> that begins at
            <paramref name="origin"/> in  <paramref name="str"/>, or Empty if length of <paramref name="str"/>
            or <paramref name="length"/> is zero.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.Prefix(System.String,System.Int32)">
            <summary>
            Retrieves prefix of length <paramref name="length"/>.
            </summary>
            <param name="str">String to retrieve prefix from.</param>
            <param name="length">The number of characters in the substring.</param>
            <returns>
            Prefix of specified length, or <paramref name="str"/> itself, if total length less than required.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.Suffix(System.String,System.Int32)">
            <summary>
            Retrieves prefix of length <paramref name="length"/>.
            </summary>
            <param name="str">String to retrieve suffix from.</param>
            <param name="length">The number of characters in the substring.</param>
            <returns>
            Suffix of specified length, or <paramref name="str"/> itself, if total length less than required.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.TrimPrefix(System.String,System.String)">
            <summary>
            Trims <paramref name="str"/> prefix if it equals to <paramref name="prefix"/>.
            </summary>
            <param name="str">String to trim.</param>
            <param name="prefix">Prefix to trim.</param>
            <returns>Trimmed <paramref name="str"/>, or original <paramref name="str"/> if prefix not exists.</returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.TrimPrefix(System.String,System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Trims <paramref name="str"/> prefix if it equals to <paramref name="prefix"/>.
            </summary>
            <param name="str">String to trim.</param>
            <param name="prefix">Prefix to trim.</param>
            <param name="comparer">Comparer to compare value of prefix.</param>
            <returns>Trimmed <paramref name="str"/>, or original <paramref name="str"/> if prefix not exists.</returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.TrimSuffix(System.String,System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Trims <paramref name="str"/> suffix if it equals to <paramref name="suffix"/>.
            </summary>
            <param name="str">String to trim.</param>
            <param name="suffix">Suffix to trim.</param>
            <param name="comparer">Comparer to compare value of suffix.</param>
            <returns>
            Trimmed <paramref name="str"/>, or original <paramref name="str"/> if suffix does not exists.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.TrimSuffix(System.String,System.String)">
            <summary>
            Trims <paramref name="str"/> prefix if it equals to <paramref name="suffix"/>.
            </summary>
            <param name="str">String to trim.</param>
            <param name="suffix">Suffix to trim.</param>
            <returns>
            Trimmed <paramref name="str"/>, or original <paramref name="str"/> if suffix does not exists.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int64)">
            <summary>
            Returns size in bytes string representation.
            </summary>
            <param name="value">Value to represent.</param>
            <returns>Value as size in bytes</returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int32)">
            <summary>
            Returns size in bytes string representation.
            </summary>
            <param name="value">Value to represent.</param>
            <returns>Value as size in bytes</returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int64,System.IFormatProvider)">
            <summary>
            Returns size in bytes string representation.
            </summary>
            <param name="value">Value to represent.</param>
            <param name="provider">Format provider for number part of value</param>
            <returns>Value as size in bytes</returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.ToByteSizeString(System.Int32,System.IFormatProvider)">
            <summary>
            Returns size in bytes string representation.
            </summary>
            <param name="value">Value to represent.</param>
            <param name="provider">Format provider for number part of value</param>
            <returns>Value as size in bytes</returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.SplitWithTrim(System.String,System.Char[])">
            <summary>
            Splits <paramref name="source"/> and returns whitespace trimmed parts.
            </summary>
            <param name="source">Source string.</param>
            <param name="separators">Separator chars</param>
            <returns>Enumeration of parts.</returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.ToHexString(System.Byte[])">
            <summary>
            Creates hex representation of byte array.
            </summary>
            <param name="data">Byte array.</param>
            <returns>
            <paramref name="data"/> represented as a series of hexadecimal representations.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null.</exception>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.ToHexString(System.Byte[],System.String)">
            <summary>
            Creates hex representation of byte array.
            </summary>
            <param name="data">Byte array.</param>
            <param name="byteSeparator">Separator between bytes. If null - no separator used.</param>
            <returns>
            <paramref name="data"/> represented as a series of hexadecimal representations divided by separator.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null.</exception>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.Unquote(System.String)">
            <summary>
            Remove one set of leading and trailing double quote characters, if both are present.
            </summary>
            <param name="arg">String to unquote.</param>
            <returns>
            Unquoted <paramref name="arg"/>, if <paramref name="arg"/> is quoted, or <paramref name="arg"/> itself.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.Unquote(System.String,System.Boolean@)">
            <summary>
            Remove one set of leading and trailing double quote characters, if both are present.
            </summary>
            <param name="arg">String to unquote.</param>
            <param name="quoted">Set to true, if <paramref name="arg"/> was quoted.</param>
            <returns>
            Unquoted <paramref name="arg"/>, if <paramref name="arg"/> is quoted, or <paramref name="arg"/> itself.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.Unquote(System.String,System.Char,System.Boolean@)">
            <summary>
            Remove one set of leading and trailing d<paramref name="quotationChar"/>, if both are present.
            </summary>
            <param name="arg">String to unquote.</param>
            <param name="quotationChar">Quotation char</param>
            <param name="quoted">Set to true, if <paramref name="arg"/> was quoted.</param>
            <returns>
            Unquoted <paramref name="arg"/>, if <paramref name="arg"/> is quoted, or <paramref name="arg"/> itself.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.Remove(System.String,System.String[])">
            <summary>
            Removes substring from provided strings.
            </summary>
            <param name="str">String to remove.</param>
            <param name="toRemoveStrings">Substrings to remove.</param>
            <returns>New string without provided substrings.</returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Infix form of <see cref="M:System.String.IsNullOrEmpty(System.String)"/>.
            </summary>
            <param name="str">The string.</param>
            <returns><c>true</c> if <paramref name="str"/> is null or empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.NotNullNorEmpty(System.String)">
            <summary>
            Returns true if argument is not null nor empty.
            </summary>
            <param name="str">The string.</param>
            <returns><c>true</c> if <paramref name="str"/> is not null nor empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Infix form of string.IsNullOrWhiteSpace.
            </summary>
            <param name="str">The string.</param>
            <returns>
            <c>true</c> if <paramref name="str"/> is null, empty or contains only whitespaces; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.NotNullNorWhiteSpace(System.String)">
            <summary>
            Returns true if argument is not null nor whitespace.
            </summary>
            <param name="str">The string.</param>
            <returns>
            <c>true</c> if <paramref name="str"/> is not null, nor empty or contains not only whitespaces;
            otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.FormatWith(System.String,System.Object)">
            <summary>
            Replaces one or more format items in a specified string with the string representation of a specified object.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg">The object to format.</param>
            <returns>
            A copy of <paramref name="format"/> in which any format items are replaced by the string representation of
            <paramref name="arg"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.FormatWith(System.String,System.Object,System.Object)">
            <summary>
            Replaces the format items in a specified string with the string representation of two specified objects.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <returns>
            A copy of <paramref name="format"/> in which format items are replaced by the string representations
            of <paramref name="arg0"/> and <paramref name="arg1"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.FormatWith(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Replaces the format items in a specified string with the string representation of three specified objects.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to format.</param>
            <param name="arg1">The second object to format.</param>
            <param name="arg2">The third object to format.</param>
            <returns>
            A copy of <paramref name="format"/> in which the format items have been replaced by the string representations
            of <paramref name="arg0"/>, <paramref name="arg1"/>, and <paramref name="arg2"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            Replaces the format items in a specified string with the string representations
            of corresponding objects in a specified array.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>
            A copy of format in which the format items have been replaced by the string representation of the corresponding
            objects in args
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.Join(System.String[],System.String)">
            <summary>
            Concatenates all the elements of a string array, using the specified separator between each element.
            </summary>
            <remarks>
            Infix form of <see cref="M:System.String.Join(System.String,System.String[])"/>.
            </remarks>
            <param name="values">An array that contains the elements to concatenate.</param>
            <param name="separator">
            The string to use as a separator. <paramref name="separator"/> is included in the returned string only
            if <paramref name="values"/> has more than one element.
            </param>
            <returns>
            A string that consists of the members of <paramref name="values"/> delimited by the <paramref name="separator"/>
            string.
            If <paramref name="values"/> has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of type <see cref="T:System.String"/>,
            using the specified separator between each member.
            </summary>
            <remarks>
            Infix form of string.Join(string,IEnumerable{string}).
            </remarks>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <param name="separator">
            The string to use as a separator. <paramref name="separator"/> is included in the returned string only
            if <paramref name="values"/> has more than one element.
            </param>
            <returns>
            A string that consists of the members of <paramref name="values"/> delimited by the <paramref name="separator"/>
            string.
            If <paramref name="values"/> has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates the members of a collection, using the specified separator between each member.
            </summary>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <param name="separator">
            The string to use as a separator. <paramref name="separator"/> is included in the returned string only
            if <paramref name="values"/> has more than one element.
            </param>
            <returns>
            A string that consists of the members of <paramref name="values"/> delimited by the <paramref name="separator"/>
            string.
            If <paramref name="values"/> has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.Join``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the members of a collection.
            </summary>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <returns>
            A string that consists of the members of <paramref name="values"/>.
            If <paramref name="values"/> has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.Length(System.String)">
            <summary>
            Returns length of argument, even if argument is null.
            </summary>
            <param name="str">The string.</param>
            <returns>Length of the <paramref name="str"/> or 0, if <paramref name="str"/> is null.</returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0)">
            <summary>
            Culture invariant version of <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>
            </summary>
            <param name="s">Object to convert.</param>
            <returns>String representation of <paramref name="s"/> according to rules of invariant culture.</returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.ToInvariantString``1(``0,System.String)">
            <summary>
            Culture invariant version of <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>
            </summary>
            <param name="s">Object to convert.</param>
            <param name="format">Format string</param>
            <returns>String representation of <paramref name="s"/> according to rules of invariant culture.</returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.FromBase64(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as base-64 digits, to an equivalent byte array.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>An array of bytes that is equivalent to <paramref name="str"/>.</returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.ToBase64(System.Byte[],System.Base64FormattingOptions)">
            <summary>
            Converts an array of bytes to its equivalent string representation that is encoded with base-64 digits.
            A parameter specifies whether to insert line breaks in the return value.
            </summary>
            <param name="data">an array of bytes.</param>
            <param name="options">
            <see cref="F:System.Base64FormattingOptions.InsertLineBreaks"/> to insert a line break every 76 characters,
            or <see cref="F:System.Base64FormattingOptions.None"/> to not insert line breaks.
            </param>
            <returns>The string representation in base 64 of the elements in <paramref name="data"/>.</returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            Encodes all the characters in the specified string into a sequence of bytes.
            </summary>
            <param name="str">The string containing the characters to encode.</param>
            <param name="encoding">Encoding to convert.</param>
            <returns>A byte array containing the results of encoding the specified set of characters.</returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.ToBytes(System.String)">
            <summary>
            Encodes all the characters in the specified string into a sequence of bytes using UTF-8 encoding.
            </summary>
            <param name="str">The string containing the characters to encode.</param>
            <returns>A byte array containing the results of encoding the specified set of characters.</returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.ToInt(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its 32-bit
            signed integer equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="str">
            A string containing a number to convert. The string is interpreted using the style specified by
            <paramref name="numberStyle"/>.
            </param>
            <param name="numberStyle">
            A bitwise combination of enumeration values that indicates the style elements that can be present in
            <paramref name="str"/>. Default value is Integer.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="str"/>.
            </param>
            <returns>
            When this method returns, contains the 32-bit signed integer value equivalent of the number contained in
            <paramref name="str"/>, if the conversion succeeded, or null if the conversion failed. The conversion fails if
            the <paramref name="str"/> parameter is null or String.Empty, is not in a format compliant withstyle, or
            represents a number less than <see cref="F:System.Int32.MinValue"/> or greater than <see cref="F:System.Int32.MaxValue"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.StringExtensions.ToDouble(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number in a specified style and culture-specific format to its
            <see cref="T:System.Double"/> equivalent. A return value indicates whether the conversion succeeded.
            </summary>
            <param name="str">
            A string containing a number to convert. The string is interpreted using the style specified by
            <paramref name="numberStyle"/>.
            </param>
            <param name="numberStyle">
            A bitwise combination of enumeration values that indicates the style elements that can be present in
            <paramref name="str"/>. Default value is Float.
            </param>
            <param name="provider">
            An object that supplies culture-specific formatting information about <paramref name="str"/>.
            </param>
            <returns>
            When this method returns, contains the <see cref="T:System.Double"/> value equivalent of the number contained in
            <paramref name="str"/>, if the conversion succeeded, or null if the conversion failed. The conversion fails if
            the <paramref name="str"/> parameter is null or String.Empty, is not in a format compliant withstyle, or
            represents a number less than <see cref="F:System.Double.MinValue"/> or greater than <see cref="F:System.Double.MaxValue"/>.
            </returns>
        </member>
        <member name="T:CodeJam.Strings.NaturalOrderStringComparer">
            <summary>
            String comparisons using a "natural order" algorithm.
            </summary>
        </member>
        <member name="F:CodeJam.Strings.NaturalOrderStringComparer.Comparer">
            <summary>
            Gets a <see cref="T:CodeJam.Strings.NaturalOrderStringComparer"/> object
            that performs a string comparison using a "natural order" algorithm.
            </summary>
            <returns>
            A <see cref="T:CodeJam.Strings.NaturalOrderStringComparer"/> object
            that performs a string comparison using a "natural order" algorithm.
            </returns>
        </member>
        <member name="F:CodeJam.Strings.NaturalOrderStringComparer.IgnoreCaseComparer">
            <summary>
            Gets a <see cref="T:CodeJam.Strings.NaturalOrderStringComparer"/> object
            that performs a case-insensitive string comparison using a "natural order" algorithm.
            </summary>
            <returns>
            A <see cref="T:CodeJam.Strings.NaturalOrderStringComparer"/> object
            that performs a case-insensitive string comparison using a "natural order" algorithm.
            </returns>
        </member>
        <member name="F:CodeJam.Strings.NaturalOrderStringComparer.Comparison">
            <summary>
            Gets a <see cref="T:System.Comparison`1"/> delegate that performs a string comparison using a "natural order" algorithm.
            </summary>
            <returns>
            A <see cref="T:System.Comparison`1"/> delegate that performs a string comparison using a "natural order" algorithm.
            </returns>
        </member>
        <member name="F:CodeJam.Strings.NaturalOrderStringComparer.IgnoreCaseComparison">
            <summary>
            Gets a <see cref="T:System.Comparison`1"/> delegate that performs a case-insensitive
            string comparison using a "natural order" algorithm.
            </summary>
            <returns>
            A <see cref="T:System.Comparison`1"/> delegate that performs a case-insensitive
            string comparison using a "natural order" algorithm.
            </returns>
        </member>
        <member name="F:CodeJam.Strings.NaturalOrderStringComparer._ignoreCase">
            <summary>
            true to ignore case during the comparison; otherwise, false.
            </summary>
        </member>
        <member name="M:CodeJam.Strings.NaturalOrderStringComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.Strings.NaturalOrderStringComparer"/> class.
            </summary>
        </member>
        <member name="M:CodeJam.Strings.NaturalOrderStringComparer.Compare(System.String,System.String)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="a"/> and <paramref name="b"/>,
            as shown in the following table.
            Value Meaning Less than zero <paramref name="a"/> is less than <paramref name="b"/>.
            Zero <paramref name="a"/> equals <paramref name="b"/>.
            Greater than zero <paramref name="a"/> is greater than <paramref name="b"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.NaturalOrderStringComparer.Compare(System.String,System.String,System.Boolean)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <param name="ignoreCase">true to ignore case during the comparison; otherwise, false.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="a"/> and <paramref name="b"/>,
            as shown in the following table.
            Value Meaning Less than zero <paramref name="a"/> is less than <paramref name="b"/>.
            Zero <paramref name="a"/> equals <paramref name="b"/>.
            Greater than zero <paramref name="a"/> is greater than <paramref name="b"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Strings.NaturalOrderStringComparer.CompareNumerical(System.String,System.String,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Compares numerical strings starting from non-zeroes
            </summary>
        </member>
        <member name="M:CodeJam.Strings.NaturalOrderStringComparer.System#Collections#Generic#IComparer{System#String}#Compare(System.String,System.String)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>,
            as shown in the following table.
            Value Meaning Less than zero <paramref name="x"/> is less than <paramref name="y"/>.
            Zero <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="T:CodeJam.Strings.StringOrigin">
            <summary>
            String functions relative parameters origin
            </summary>
        </member>
        <member name="F:CodeJam.Strings.StringOrigin.Begin">
            <summary>
            Relative to string begin.
            </summary>
        </member>
        <member name="F:CodeJam.Strings.StringOrigin.End">
            <summary>
            Relative to string end.
            </summary>
        </member>
        <member name="T:CodeJam.IOption`1">
            <summary>
            <see cref="T:CodeJam.Option`1"/> and <see cref="T:CodeJam.ValueOption`1"/> common interface.
            </summary>
            <typeparam name="T">Type of optional value</typeparam>
        </member>
        <member name="P:CodeJam.IOption`1.HasValue">
            <summary>
            Gets a value indicating whether the current object has a value.
            </summary>
        </member>
        <member name="P:CodeJam.IOption`1.Value">
            <summary>
            Gets the value of the current object.
            </summary>
        </member>
        <member name="T:CodeJam.Option">
            <summary>
            Methods to work with <see cref="T:CodeJam.Option"/>
            </summary>
        </member>
        <member name="M:CodeJam.Option.Some``1(``0)">
            <summary>
            Creates instance of <see cref="T:CodeJam.Option"/> with specified value.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="value">Value</param>
            <returns>Instance of <see cref="T:CodeJam.Option"/>.</returns>
        </member>
        <member name="M:CodeJam.Option.SomeHasValue``1(``0)">
            <summary>
            Creates instance of <see cref="T:CodeJam.Option"/> with specified value, if value not null.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="value">Value</param>
            <returns>
            Instance of <see cref="T:CodeJam.Option"/> with <paramref name="value"/>, if <paramref name="value"/> not null,
            or instance without value.
            </returns>
        </member>
        <member name="M:CodeJam.Option.SomeHasValue``1(System.Nullable{``0})">
            <summary>
            Creates instance of <see cref="T:CodeJam.Option"/> with specified value, if <paramref name="value"/> has value.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="value">Value</param>
            <returns>
            Instance of <see cref="T:CodeJam.Option"/> with <paramref name="value"/>, if <paramref name="value"/> has value,
            or instance without value.
            </returns>
        </member>
        <member name="M:CodeJam.Option.None``1">
            <summary>
            Returns instance of <see cref="T:CodeJam.Option"/> without value.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <returns>Instance without value.</returns>
            <remarks>None value is singleton.</remarks>
        </member>
        <member name="M:CodeJam.Option.Do``1(CodeJam.IOption{``0},System.Action{CodeJam.IOption{``0}},System.Action)">
            <summary>
            Calls <paramref name="someAction"/> if <paramref name="option"/> has value,
            and <paramref name="noneAction"/> otherwise.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="option"><see cref="T:CodeJam.Option"/> instance to match.</param>
            <param name="someAction">Action if value exists.</param>
            <param name="noneAction">Action if no value.</param>
        </member>
        <member name="M:CodeJam.Option.GetValueOrDefault``2(CodeJam.IOption{``0},System.Func{CodeJam.IOption{``0},``1},System.Func{``1})">
            <summary>
            Calls <paramref name="someSelector"/> if <paramref name="option"/> has value,
            and <paramref name="noneSelector"/> otherwise.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="option"><see cref="T:CodeJam.Option"/> instance to match.</param>
            <param name="someSelector">Function if value exists.</param>
            <param name="noneSelector">Function if no value.</param>
            <returns>Result of matched function</returns>
        </member>
        <member name="M:CodeJam.Option.GetValueOrDefault``1(CodeJam.IOption{``0},``0)">
            <summary>
            Returns value of <paramref name="option"/>, or <paramref name="defaultValue"/> if <paramref name="option"/>
            hasn't it.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="option"><see cref="T:CodeJam.Option"/> instance.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Value, or <paramref name="defaultValue"/> if <paramref name="option"/> has no value.</returns>
        </member>
        <member name="M:CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1})">
            <summary>
            Converts <paramref name="option"/> value to another option with <paramref name="selectFunc"/>.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="option"><see cref="T:CodeJam.Option"/> instance to match.</param>
            <param name="selectFunc">Function to map value</param>
            <returns>
            Converted by <paramref name="selectFunc"/> value, or option with no value, if <paramref name="option"/>
            has no value.
            </returns>
        </member>
        <member name="M:CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},``1)">
            <summary>
            Converts <paramref name="option"/> value to another option with <paramref name="selectFunc"/>.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="option"><see cref="T:CodeJam.Option"/> instance to match.</param>
            <param name="selectFunc">Function to map value</param>
            <param name="defaultValue">Default value.</param>
            <returns>
            Converted by <paramref name="selectFunc"/> value, or option with <paramref name="defaultValue"/>, if
            <paramref name="option"/> has no value.
            </returns>
        </member>
        <member name="M:CodeJam.Option.With``2(CodeJam.Option{``0},System.Func{``0,``1},System.Func{``1})">
            <summary>
            Converts <paramref name="option"/> value to another option with <paramref name="selectFunc"/>.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="option"><see cref="T:CodeJam.Option"/> instance to match.</param>
            <param name="selectFunc">Function to map value</param>
            <param name="defaultFunc">Function to return default value.</param>
            <returns>
            Converted by <paramref name="selectFunc"/> value, or option with value returned by
            <paramref name="defaultFunc"/>, if <paramref name="option"/> has no value.
            </returns>
        </member>
        <member name="T:CodeJam.ValueOption">
            <summary>
            Methods to work with <see cref="T:CodeJam.ValueOption"/>
            </summary>
        </member>
        <member name="M:CodeJam.ValueOption.Some``1(``0)">
            <summary>
            Creates instance of <see cref="T:CodeJam.ValueOption"/> with specified value.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="value">Value</param>
            <returns>Instance of <see cref="T:CodeJam.ValueOption"/>.</returns>
        </member>
        <member name="M:CodeJam.ValueOption.SomeHasValue``1(``0)">
            <summary>
            Creates instance of <see cref="T:CodeJam.ValueOption"/> with specified value, if value not null.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="value">Value</param>
            <returns>
            Instance of <see cref="T:CodeJam.ValueOption"/> with <paramref name="value"/>, if <paramref name="value"/> not null,
            or instance without value.
            </returns>
        </member>
        <member name="M:CodeJam.ValueOption.SomeHasValue``1(System.Nullable{``0})">
            <summary>
            Creates instance of <see cref="T:CodeJam.ValueOption"/> with specified value, if <paramref name="value"/> has value.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="value">Value</param>
            <returns>
            Instance of <see cref="T:CodeJam.ValueOption"/> with <paramref name="value"/>, if <paramref name="value"/> has value,
            or instance without value.
            </returns>
        </member>
        <member name="M:CodeJam.ValueOption.None``1">
            <summary>
            Creates instance of <see cref="T:CodeJam.ValueOption"/> without value.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <returns>Instance without value.</returns>
        </member>
        <member name="M:CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1})">
            <summary>
            Converts <paramref name="option"/> value to another option with <paramref name="selectFunc"/>.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="option"><see cref="T:CodeJam.ValueOption"/> instance to match.</param>
            <param name="selectFunc">Function to map value</param>
            <returns>
            Converted by <paramref name="selectFunc"/> value, or option with no value, if <paramref name="option"/>
            has no value.
            </returns>
        </member>
        <member name="M:CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1},``1)">
            <summary>
            Converts <paramref name="option"/> value to another option with <paramref name="selectFunc"/>.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="option"><see cref="T:CodeJam.ValueOption"/> instance to match.</param>
            <param name="selectFunc">Function to map value</param>
            <param name="defaultValue">Default value.</param>
            <returns>
            Converted by <paramref name="selectFunc"/> value, or option with <paramref name="defaultValue"/>, if
            <paramref name="option"/> has no value.
            </returns>
        </member>
        <member name="M:CodeJam.ValueOption.With``2(CodeJam.ValueOption{``0},System.Func{``0,``1},System.Func{``1})">
            <summary>
            Converts <paramref name="option"/> value to another option with <paramref name="selectFunc"/>.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <typeparam name="TResult">Type of result</typeparam>
            <param name="option"><see cref="T:CodeJam.ValueOption"/> instance to match.</param>
            <param name="selectFunc">Function to map value</param>
            <param name="defaultFunc">Function to return default value.</param>
            <returns>
            Converted by <paramref name="selectFunc"/> value, or option with value returned by
            <paramref name="defaultFunc"/>, if <paramref name="option"/> has no value.
            </returns>
        </member>
        <member name="T:CodeJam.Reflection.InfoOf`1">
            <summary>
            Provides a helper class to get the property, field, ctor or method from an expression.
            </summary>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf`1.Member``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the property or field.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MemberInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the property.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf`1.Field``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the field.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.FieldInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf`1.Constructor(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Returns the constructor.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.ConstructorInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf`1.Method``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf`1.Method(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Returns the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> instance.
            </returns>
        </member>
        <member name="T:CodeJam.Reflection.ParamInfo">
            <summary>
            Parameter data for CreateInstance method.
            </summary>
        </member>
        <member name="M:CodeJam.Reflection.ParamInfo.#ctor(System.String,System.Object,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:CodeJam.Reflection.ParamInfo"/> class.</summary>
            <param name="name">Name of the parameter.</param>
            <param name="value">Value of the parameter.</param>
            <param name="required"><c>True</c> if parameter required.</param>
        </member>
        <member name="M:CodeJam.Reflection.ParamInfo.Param(System.String,System.Object,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:CodeJam.Reflection.ParamInfo"/> class.</summary>
            <param name="name">Name of the parameter.</param>
            <param name="value">Value of the parameter.</param>
            <param name="required"><c>True</c> if parameter required.</param>
            <returns>Instance of <see cref="T:CodeJam.Reflection.ParamInfo"/>.</returns>
        </member>
        <member name="P:CodeJam.Reflection.ParamInfo.Name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="P:CodeJam.Reflection.ParamInfo.Value">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="P:CodeJam.Reflection.ParamInfo.Required">
            <summary>
            True, if parameter required.
            </summary>
        </member>
        <member name="T:CodeJam.Reflection.AssemblyExtensions">
            <summary>
            The <see cref="T:System.Reflection.Assembly"/> extensions.
            </summary>
        </member>
        <member name="M:CodeJam.Reflection.AssemblyExtensions.GetRequiredResourceStream(System.Reflection.Assembly,System.String)">
            <summary>
            Loads the specified manifest resource from this assembly, and checks if it exists.
            </summary>
            <param name="assembly">Resource assembly.</param>
            <param name="name">The case-sensitive name of the manifest resource being requested.</param>
            <returns>The manifest resource.</returns>
            <exception cref="T:System.ArgumentNullException">The name parameter is null.</exception>
            <exception cref="T:System.ArgumentException">Resource with specified name not found</exception>
        </member>
        <member name="M:CodeJam.Reflection.AssemblyExtensions.GetAssemblyPath(System.Reflection.Assembly)">
            <summary>
            Returns path to the <paramref name="assembly"/> file.
            </summary>
            <param name="assembly">Assembly.</param>
            <returns>Path to <paramref name="assembly"/>.</returns>
        </member>
        <member name="M:CodeJam.Reflection.AssemblyExtensions.GetAssemblyDirectory(System.Reflection.Assembly)">
            <summary>
            Returns directory part of path to assembly <paramref name="assembly"/> file.
            </summary>
            <param name="assembly">Assembly.</param>
            <returns>Folder part of path to <paramref name="assembly"/>.</returns>
        </member>
        <member name="T:CodeJam.Reflection.ReflectionEnumHelper">
            <summary>
            Reflection helper methods for enumeration.
            </summary>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionEnumHelper.GetField``1(``0)">
            <summary>
            Searches for the public field with the specified enumeration value.
            </summary>
            <typeparam name="T">An enumeration type.</typeparam>
            <param name="value">An enumeration value.</param>
            <returns>
            An object representing the public field with the specified enumeration value, if found;
            otherwise, null.
            </returns>
        </member>
        <member name="T:CodeJam.Reflection.InfoOf">
            <summary>
                Provides a helper class to get the property, field, ctor or method from an expression.
            </summary>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Member``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Returns the <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MemberInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Member``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns the <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MemberInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Member``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MemberInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Property``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Returns the property.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Property``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns the property.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Property``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the property.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Field``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Returns the field.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.FieldInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Field``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns the field.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.FieldInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Field``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the field.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.FieldInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Constructor``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Returns the constructor.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.ConstructorInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Method``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Returns the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Method``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Method``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Method(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Returns the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.InfoOf.Method``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Returns the method.
            </summary>
            <param name="expression">The expression to analyze.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> instance.
            </returns>
        </member>
        <member name="T:CodeJam.Reflection.ReflectionExtensions">
            <summary>
            Reflection extension methods.
            </summary>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.IsInstantiable(System.Type)">
            <summary>
            Gets a value indicating whether the <paramref name="type"/> can be instantiated.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to test.</param>
            <returns>
            A value indicating whether the <paramref name="type"/> can be instantiated.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.IsStatic(System.Type)">
            <summary>
            Gets a value indicating whether the <paramref name="type"/> is declared static.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to test.</param>
            <returns>
            A value indicating whether the <paramref name="type"/> is declared static.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.IsNullable(System.Type)">
            <summary>
            Gets a value indicating whether the <paramref name="type"/> is Nullable&#60;&#62; type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to test.</param>
            <returns>
            A value indicating whether the <paramref name="type"/> is Nullable&#60;&#62;.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.IsNumeric(System.Type)">
            <summary>
            Checks if <paramref name="type"/> is numeric type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True, if <paramref name="type"/> is numeric.</returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.IsInteger(System.Type)">
            <summary>
            Checks if <paramref name="type"/> is integer type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True, if <paramref name="type"/> is integer type.</returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.IsNullableNumeric(System.Type)">
            <summary>
            Checks if <paramref name="type" /> is nullable numeric type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True, if <paramref name="type" /> is nullable numeric.</returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.IsNullableInteger(System.Type)">
            <summary>
            Checks if <paramref name="type"/> is nullable integer type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True, if <paramref name="type"/> is nullable integer type.</returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.IsNullableEnum(System.Type)">
            <summary>
            Checks if <paramref name="type"/> is nullable enum type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True, if <paramref name="type"/> is nullable enum type.</returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.IsSubClass(System.Type,System.Type)">
            <summary>
            Determines whether the <paramref name="type"/> derives from the specified <paramref name="check"/>.
            </summary>
            <remarks>
            This method also returns false if <paramref name="type"/> and the <paramref name="check"/> are equal.
            </remarks>
            <param name="type">The type to test.</param>
            <param name="check">The type to compare with. </param>
            <returns>
            true if the <paramref name="type"/> derives from <paramref name="check"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.GetDelegateParams(System.Type)">
            <summary>
            Returns delegate parameter infos.
            </summary>
            <param name="delegateType">Type of delegate</param>
            <returns>Array of <see cref="T:System.Reflection.ParameterInfo"/>.</returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.ToUnderlying(System.Type)">
            <summary>
            Returns the underlying type argument of the specified type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <returns><list>
            <item>The type argument of the type parameter,
            if the type parameter is a closed generic nullable type.</item>
            <item>The underlying Type if the type parameter is an enum type.</item>
            <item>Otherwise, the type itself.</item>
            </list>
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.ToNullableUnderlying(System.Type)">
            <summary>
            Returns the underlying type argument of the specified nullable type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <returns><list>
            <item>The type argument of the type parameter,
            if the type parameter is a closed generic nullable type.</item>
            </list>
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.ToEnumUnderlying(System.Type)">
            <summary>
            Returns the underlying type argument of the specified enum type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <returns><list>
            <item>The underlying Type if the type parameter is an enum type.</item>
            <item>Otherwise, the type itself.</item>
            </list>
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Gets the type of this member.
            </summary>
            <param name="memberInfo">A <see cref="T:System.Reflection.MemberInfo"/> instance. </param>
            <returns>
            <list>
            <item>If the member is a property, returns <see cref="P:System.Reflection.PropertyInfo.PropertyType"/>.</item>
            <item>If the member is a field, returns <see cref="P:System.Reflection.FieldInfo.FieldType"/>.</item>
            <item>If the member is a method, returns <see cref="P:System.Reflection.MethodInfo.ReturnType"/>.</item>
            <item>If the member is a constructor, returns <see cref="P:System.Reflection.MemberInfo.DeclaringType"/>.</item>
            <item>If the member is an event, returns <see cref="P:System.Reflection.EventInfo.EventHandlerType"/>.</item>
            </list>
            </returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.IsAnonymous(System.Type)">
            <summary>
            Checks if <paramref name="type"/> is an anonymous type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True, if <paramref name="type"/> is an anonymous type.</returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.GetDefaultConstructor(System.Type,System.Boolean)">
            <summary>
            Returns default constructor.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <param name="exceptionIfNotExists">if true, throws an exception if type does not exists default constructor.
            Otherwise returns null.</param>
            <returns>Returns <see cref="T:System.Reflection.ConstructorInfo"/> or null.</returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.GetItemType(System.Type)">
            <summary>
            Gets a value indicating whether the current <i>Type</i> encompasses or refers to another type;
            that is, whether the provided Type is an array, a pointer, or is passed by reference.
            </summary>
            <param name="type">Type to get item type.</param>
            <returns>Returns item type or null.</returns>
        </member>
        <member name="M:CodeJam.Reflection.ReflectionExtensions.CreateInstance(System.Type,CodeJam.Reflection.ParamInfo[])">
            <summary>
            Creates instance of <paramref name="type"/> with specified <paramref name="parameters"/>.
            </summary>
            <param name="type">Type to create instance.</param>
            <param name="parameters">Constructor parameters</param>
            <returns>Instance of type</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null</exception>
            <exception cref="T:System.ArgumentException">No suitable constructors found</exception>
        </member>
        <member name="T:CodeJam.Services.IServicePublisher">
            <summary>
            Service publisher interface.
            </summary>
        </member>
        <member name="M:CodeJam.Services.IServicePublisher.Publish(System.Type,System.Object)">
            <summary>
            Publish service.
            </summary>
            <param name="serviceType">Type of service object to publish.</param>
            <param name="serviceInstance">Instance of service of type <paramref name="serviceType"/>.</param>
            <returns>Disposable cookie to conceal published service</returns>
        </member>
        <member name="M:CodeJam.Services.IServicePublisher.Publish(System.Type,System.Func{CodeJam.Services.IServicePublisher,System.Object})">
            <summary>
            Publish service.
            </summary>
            <param name="serviceType">Type of service object to publish.</param>
            <param name="instanceFactory">Factory to create service instance</param>
            <returns>Disposable cookie to conceal published service</returns>
        </member>
        <member name="T:CodeJam.Services.ServiceContainer">
            <summary>
            Service container.
            </summary>
        </member>
        <member name="M:CodeJam.Services.ServiceContainer.#ctor(System.IServiceProvider,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
            <param name="parentProvider">The parent provider.</param>
            <param name="publishSelf">
            if set to <c>true</c> container publish itself as <see cref="T:CodeJam.Services.IServicePublisher"/> service.
            </param>
        </member>
        <member name="M:CodeJam.Services.ServiceContainer.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
            <param name="publishSelf">
            if set to <c>true</c> container publish itself as <see cref="T:CodeJam.Services.IServicePublisher"/> service.
            </param>
        </member>
        <member name="M:CodeJam.Services.ServiceContainer.GetService(System.Type)">
            <summary>Gets the service object of the specified type.</summary>
            <returns>A service object of type <paramref name="serviceType" />.-or- null if there is no service object of type <paramref name="serviceType" />.</returns>
            <param name="serviceType">An object that specifies the type of service object to get. </param>
        </member>
        <member name="M:CodeJam.Services.ServiceContainer.Publish(System.Type,System.Object)">
            <summary>
            Publish service.
            </summary>
            <param name="serviceType">Type of service object to publish.</param>
            <param name="serviceInstance">Instance of service of type <paramref name="serviceType"/>.</param>
            <returns>Disposable cookie to conceal published service</returns>
        </member>
        <member name="M:CodeJam.Services.ServiceContainer.Publish(System.Type,System.Func{CodeJam.Services.IServicePublisher,System.Object})">
            <summary>
            Publish service.
            </summary>
            <param name="serviceType">Type of service object to publish.</param>
            <param name="instanceFactory">Factory to create service instance</param>
            <returns>Disposable cookie to conceal published service</returns>
        </member>
        <member name="M:CodeJam.Services.ServiceContainer.FactoryBag.#ctor(System.Func{CodeJam.Services.IServicePublisher,System.Object})">
            <summary>Initializes a new instance of the <see cref="T:System.Object" /> class.</summary>
        </member>
        <member name="M:CodeJam.Services.ServiceContainer.Dispose">
            <summary>
            Calls <see cref="M:System.IDisposable.Dispose"/> methods in all created service instances, that implements
            <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="T:CodeJam.Services.ServiceProviderHelper">
            <summary>
            <see cref="T:System.IServiceProvider"/> and <see cref="T:CodeJam.Services.IServicePublisher"/> helper methods.
            </summary>
        </member>
        <member name="M:CodeJam.Services.ServiceProviderHelper.GetRequiredService(System.IServiceProvider,System.Type)">
            <summary>
            Gets the service object of the specified type, or throws an exception if service not registered.
            </summary>
            <param name="provider">Instance of <see cref="T:System.IServiceProvider"/>.</param>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Services.ServiceProviderHelper.GetService``1(System.IServiceProvider)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <typeparam name="T">An object that specifies the type of service object to get.</typeparam>
            <param name="provider">Instance of <see cref="T:System.IServiceProvider"/>.</param>
            <returns>A service object of type serviceType.</returns>
        </member>
        <member name="M:CodeJam.Services.ServiceProviderHelper.GetRequiredService``1(System.IServiceProvider)">
            <summary>
            Gets the service object of the specified type, or throws an exception if service not registered.
            </summary>
            <param name="provider">Instance of <see cref="T:System.IServiceProvider"/>.</param>
            <typeparam name="T">An object that specifies the type of service object to get.</typeparam>
            <returns>
            A service object of type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Services.ServiceProviderHelper.Publish``1(CodeJam.Services.IServicePublisher,``0)">
            <summary>
            Publish service.
            </summary>
            <typeparam name="T">Type of service object to publish.</typeparam>
            <param name="publisher">Service publisher.</param>
            <param name="serviceInstance">Instance of service of type <typeparamref name="T"/></param>
            <returns>Disposable cookie to conceal published service</returns>
        </member>
        <member name="M:CodeJam.Services.ServiceProviderHelper.Publish``1(CodeJam.Services.IServicePublisher,System.Func{CodeJam.Services.IServicePublisher,``0})">
            <summary>
            Publish service.
            </summary>
            <typeparam name="T">Type of service object to publish.</typeparam>
            <param name="publisher">Service publisher.</param>
            <param name="instanceFactory">Factory to create service instance</param>
            <returns>Disposable cookie to conceal published service</returns>
        </member>
        <member name="T:CodeJam.Option`1">
            <summary>
            Represents an optional value.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:CodeJam.Option`1.HasValue">
            <summary>
            Gets a value indicating whether the current object has a value.
            </summary>
        </member>
        <member name="P:CodeJam.Option`1.IsSome">
            <summary>
            Gets a value indicating whether the current object has a value.
            </summary>
        </member>
        <member name="P:CodeJam.Option`1.IsNone">
            <summary>
            Gets a value indicating whether the current object does not have a value.
            </summary>
        </member>
        <member name="P:CodeJam.Option`1.Value">
            <summary>
            Gets the value of the current object.
            </summary>
        </member>
        <member name="M:CodeJam.Option`1.op_Implicit(`0)~CodeJam.Option{`0}">
            <summary>
            Creates a new object initialized to a specified value.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Instance of <see cref="T:CodeJam.Option`1.Some"/>.</returns>
        </member>
        <member name="M:CodeJam.Option`1.op_Explicit(CodeJam.Option{`0})~`0">
            <summary>
            Extracts value from <paramref name="option"/>
            </summary>
            <param name="option"></param>
            <returns>Value of <paramref name="option"/></returns>
        </member>
        <member name="M:CodeJam.Option`1.op_Equality(CodeJam.Option{`0},CodeJam.Option{`0})">
            <summary>
            Equality operator.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>True</c>, if <paramref name="left"/> equals <paramref name="right"/>.</returns>
        </member>
        <member name="M:CodeJam.Option`1.op_Inequality(CodeJam.Option{`0},CodeJam.Option{`0})">
            <summary>
            Unequality operator.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>True</c>, if <paramref name="left"/> not equals <paramref name="right"/>.</returns>
        </member>
        <member name="M:CodeJam.Option`1.Equals(CodeJam.Option{`0})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:CodeJam.Option`1.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value;
            otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current instance. </param>
        </member>
        <member name="M:CodeJam.Option`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:CodeJam.Option`1.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
        </member>
        <member name="T:CodeJam.Option`1.Some">
            <summary>
            Represents an Option with value.
            </summary>
        </member>
        <member name="M:CodeJam.Option`1.Some.#ctor(`0)">
            <summary>
            Initializes a new instance to the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:CodeJam.Option`1.Some.Value">
            <summary>
            Gets the value of the current object.
            </summary>
        </member>
        <member name="M:CodeJam.Option`1.Some.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:CodeJam.Option`1.None">
            <summary>
            Represents an Option without value.
            </summary>
        </member>
        <member name="M:CodeJam.Option`1.None.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:CodeJam.TableData.CsvFormat">
            <summary>
            CSV format support.
            </summary>
        </member>
        <member name="M:CodeJam.TableData.CsvFormat.EscapeValue(System.String)">
            <summary>Escapes csv value.</summary>
            <param name="value">The value.</param>
            <returns>Escaped value.</returns>
        </member>
        <member name="M:CodeJam.TableData.CsvFormat.CreateParser(System.Boolean,System.Char)">
            <summary>
            Creates RFC4180 compliant CSV parser.
            </summary>
            <param name="allowEscaping">If true, allows values escaping.</param>
            <param name="columnSeparator">Char to use as column separator</param>
            <returns>Parser to use with <see cref="M:CodeJam.TableData.TableDataParser.Parse(CodeJam.TableData.Parser,System.String)"/></returns>
        </member>
        <member name="M:CodeJam.TableData.CsvFormat.Parse(System.IO.TextReader,System.Boolean,System.Char)">
            <summary>Parses CSV data.</summary>
            <param name="reader">Text to parse</param>
            <param name = "allowEscaping" > If true, allows values escaping.</param>
            <param name="columnSeparator">Char to use as column separator</param>
            <returns>Enumeration of <see cref="T:CodeJam.TableData.DataLine" /> contained parsed data.</returns>
        </member>
        <member name="M:CodeJam.TableData.CsvFormat.Print(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.String[]},System.String,System.Boolean)">
            <summary>
            Prints full data table
            </summary>
            <param name="writer">Instance of <see cref="T:System.IO.TextWriter"/> to write to.</param>
            <param name="data">Data to write.</param>
            <param name="indent">The indent.</param>
            <param name="allowEscaping">If true, allows values escaping.</param>
        </member>
        <member name="T:CodeJam.TableData.CsvFormat.ITableDataFormatter">
            <summary>
            Formatter interface.
            </summary>
        </member>
        <member name="M:CodeJam.TableData.CsvFormat.ITableDataFormatter.FormatLine(System.String[],System.Int32[])">
            <summary>
            Prints line of table data.
            </summary>
            <param name="values">Line values.</param>
            <param name="columnWidths">Array of column widths.</param>
            <returns>String representation of values</returns>
        </member>
        <member name="M:CodeJam.TableData.CsvFormat.CsvNoEscapeFormatter.GetValueLength(System.String)">
            <summary>
            Returns length of formatted value.
            </summary>
            <param name="value">Value.</param>
            <returns>Length of formatted value representation.</returns>
        </member>
        <member name="M:CodeJam.TableData.CsvFormat.CsvNoEscapeFormatter.FormatLine(System.String[],System.Int32[])">
            <summary>
            Prints line of table data.
            </summary>
            <param name="values">Line values.</param>
            <param name="columnWidths">Array of column widths. If null - value is ignored.</param>
            <returns>String representation of values</returns>
        </member>
        <member name="T:CodeJam.TableData.DataLine">
            <summary>
            Line of data.
            </summary>
        </member>
        <member name="M:CodeJam.TableData.DataLine.#ctor(System.Int32,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object" /> class.
            </summary>
            <param name="lineNum">The line number.</param>
            <param name="values">Line values.</param>
        </member>
        <member name="P:CodeJam.TableData.DataLine.LineNum">
            <summary>
            Line number.
            </summary>
        </member>
        <member name="P:CodeJam.TableData.DataLine.Values">
            <summary>
            Line values.
            </summary>
        </member>
        <member name="M:CodeJam.TableData.DataLine.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
        </member>
        <member name="T:CodeJam.TableData.FixedWidthFormat">
            <summary>
            Fixed width format support.
            </summary>
        </member>
        <member name="M:CodeJam.TableData.FixedWidthFormat.CreateParser(System.Int32[])">
            <summary>
            Creates fixed width format parser.
            </summary>
            <param name="widths">Array of column widths</param>
            <returns>Parser to use with <see cref="M:CodeJam.TableData.TableDataParser.Parse(CodeJam.TableData.Parser,System.String)"/></returns>
        </member>
        <member name="M:CodeJam.TableData.FixedWidthFormat.Parse(System.IO.TextReader,System.Int32[])">
            <summary>
            Parses table data.
            </summary>
            <param name="reader">Text to parse</param>
            <param name="widths">Array of column widths</param>
            <returns>Enumeration of <see cref="T:CodeJam.TableData.DataLine" /> contained parsed data.</returns>
        </member>
        <member name="M:CodeJam.TableData.FixedWidthFormat.Print(System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.String[]},System.Int32[],System.String)">
            <summary>
            Prints full data table
            </summary>
            <param name="writer">Instance of <see cref="T:System.IO.TextWriter"/> to write to.</param>
            <param name="data">Data to write.</param>
            <param name="widths">Array of column widths</param>
            <param name="indent">The indent.</param>
        </member>
        <member name="T:CodeJam.TableData.TableDataParser">
            <summary>
            Contains methods for table data parsing.
            </summary>
        </member>
        <member name="M:CodeJam.TableData.TableDataParser.Parse(CodeJam.TableData.Parser,System.String)">
            <summary>
            Parses table data.
            </summary>
            <param name="parser">Instance of specific parser.</param>
            <param name="text">Text to parse</param>
            <returns>Enumeration of <see cref="T:CodeJam.TableData.DataLine" /> contained parsed data.</returns>
        </member>
        <member name="M:CodeJam.TableData.TableDataParser.Parse(CodeJam.TableData.Parser,System.IO.TextReader)">
            <summary>
            Parses table data.
            </summary>
            <param name="parser">Instance of specific parser.</param>
            <param name="reader">Text to parse</param>
            <returns>Enumeration of <see cref="T:CodeJam.TableData.DataLine" /> contained parsed data.</returns>
        </member>
        <member name="T:CodeJam.TableData.Parser">
            <summary>
            Reads single line from table data and parses it.
            </summary>
            <param name="reader"><see cref="T:System.IO.TextReader"/> to read data from</param>
            <param name="lineNum">current number of line</param>
            <returns>
            Null, if end of file reached, string[0] if line contains no valued, or array of values.
            </returns>
        </member>
        <member name="T:CodeJam.Targeting.EnumerableTargeting">
            <summary>
            Targeting methods for <see cref="T:System.Linq.Enumerable"/>
            </summary>
        </member>
        <member name="M:CodeJam.Targeting.EnumerableTargeting.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.
            </summary>
            <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
            <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
            <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
            <param name="first">The first input sequence.</param>
            <param name="second">The second input sequence.</param>
            <param name="resultSelector">
            A function that specifies how to combine the corresponding elements of the two sequences.
            </param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains elements of the two input sequences, combined by
            <paramref name="resultSelector"/>.
            </returns>
        </member>
        <member name="T:CodeJam.Targeting.EnumTargeting">
            <summary>
            Targeting methods for <see cref="T:System.Enum"/> class.
            </summary>
        </member>
        <member name="M:CodeJam.Targeting.EnumTargeting.TryParse``1(System.String,System.Boolean,``0@)">
            <summary>
            Converts the string representation of the name or numeric value of one or more enumerated constants to an
            equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value
            indicates whether the conversion succeeded.
            </summary>
            <typeparam name="TEnum">The enumeration type to which to convert <paramref name="value"/>.</typeparam>
            <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
            <param name="ignoreCase"><c>true</c> to ignore case; <c>false</c> to consider case.</param>
            <param name="result">
            When this method returns, <paramref name="result"/> contains an object of type <typeparamref name="TEnum"/>
            whose value is represented by <paramref name="value"/> if the parse operation succeeds. If the parse operation
            fails, <paramref name="result"/> contains the default value of the underlying type of
            <typeparamref name="TEnum"/>. Note that this value need not be a member of the <typeparamref name="TEnum"/>
            enumeration. This parameter is passed uninitialized.
            </param>
            <returns></returns>
        </member>
        <member name="T:CodeJam.Targeting.StringTargeting">
            <summary>
            Targeting methods for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:CodeJam.Targeting.StringTargeting.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is <c>null</c>, empty, or consists only of white-space characters.
            </summary>
            <param name="value">The string to test.</param>
            <returns>
            <c>true</c> if the <paramref name="value"/> parameter is null or <see cref="F:System.String.Empty"/>,
            or if <paramref name="value"/> consists exclusively of white-space characters.
            </returns>
        </member>
        <member name="M:CodeJam.Targeting.StringTargeting.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of type <see cref="T:System.String"/>,
            using the specified separator between each member.
            </summary>
            <param name="separator">
            The string to use as a separator. <paramref name="separator"/> is included in the returned string only if
            <paramref name="values"/> has more than one element.
            </param>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <returns>
            A string that consists of the members of <paramref name="values"/> delimited by the <paramref name="separator"/>
            string. If values has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Targeting.StringTargeting.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of type <see cref="T:System.String"/>,
            using the specified separator between each member.
            </summary>
            <param name="separator">
            The string to use as a separator. <paramref name="separator"/> is included in the returned string only if
            <paramref name="values"/> has more than one element.
            </param>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <returns>
            A string that consists of the members of <paramref name="values"/> delimited by the <paramref name="separator"/>
            string. If values has no members, the method returns <see cref="F:System.String.Empty"/>.
            </returns>
        </member>
        <member name="T:CodeJam.PlatformDependent">
            <summary>Switches for features depending on platform targeting</summary>
        </member>
        <member name="F:CodeJam.PlatformDependent.AggressiveInlining">
            <summary>MethodImplOptions.AggressiveInlining or 0, if not supported by target platform</summary>
        </member>
        <member name="T:CodeJam.IO.TempData">
            <summary>Methods to work with temporary data.</summary>
        </member>
        <member name="T:CodeJam.IO.TempData.TempBase">
            <summary>
            Base class for temp file|directory objects.
            Contains logic to proof the removal will be performed even on resource leak.
            </summary>
        </member>
        <member name="M:CodeJam.IO.TempData.TempBase.DebugAssertValidPath(System.String)">
            <summary>Checks that the path is valid.</summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:CodeJam.IO.TempData.TempBase.AssertNotDisposed">
            <summary>Assertion on object dispose</summary>
        </member>
        <member name="M:CodeJam.IO.TempData.TempBase.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:CodeJam.IO.TempData.TempBase"/> class.</summary>
            <param name="path">The path.</param>
        </member>
        <member name="P:CodeJam.IO.TempData.TempBase.Path">
            <summary>Temp path.</summary>
            <value>The path.</value>
        </member>
        <member name="M:CodeJam.IO.TempData.TempBase.Finalize">
            <summary>Finalize instance</summary>
        </member>
        <member name="M:CodeJam.IO.TempData.TempBase.Dispose">
            <summary>Delete the temp file|directory</summary>
        </member>
        <member name="M:CodeJam.IO.TempData.TempBase.Dispose(System.Boolean)">
            <summary>Dispose pattern implementation - overridable part</summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:CodeJam.IO.TempData.TempBase.DisposePath(System.String,System.Boolean)">
            <summary>Temp path disposal</summary>
            <param name="path">The path.</param>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:CodeJam.IO.TempData.TempDirectory">
            <summary>Wraps reference on a temp directory meant to be deleted on dispose</summary>
        </member>
        <member name="M:CodeJam.IO.TempData.TempDirectory.#ctor">
            <summary>Create an instance using an automatically constructed temp directory path.</summary>
        </member>
        <member name="M:CodeJam.IO.TempData.TempDirectory.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:CodeJam.IO.TempData.TempDirectory"/> class.</summary>
            <param name="path">The path.</param>
        </member>
        <member name="P:CodeJam.IO.TempData.TempDirectory.Info">
            <summary>DirectoryInfo object</summary>
            <value>The DirectoryInfo object.</value>
        </member>
        <member name="M:CodeJam.IO.TempData.TempDirectory.DisposePath(System.String,System.Boolean)">
            <summary>Temp path disposal</summary>
            <param name="path">The path.</param>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:CodeJam.IO.TempData.TempFile">
            <summary>Wraps reference on a temp file meant to be deleted on dispose</summary>
            <seealso cref="T:CodeJam.IO.TempData.TempBase"/>
        </member>
        <member name="M:CodeJam.IO.TempData.TempFile.#ctor">
            <summary>Create an instance using an automatically constructed temp file path.</summary>
        </member>
        <member name="M:CodeJam.IO.TempData.TempFile.#ctor(System.String)">
            <summary>Initialize instance.</summary>
            <param name="path">The path.</param>
        </member>
        <member name="P:CodeJam.IO.TempData.TempFile.Info">
            <summary>FileInfo object</summary>
            <value>The FileInfo object.</value>
        </member>
        <member name="M:CodeJam.IO.TempData.TempFile.DisposePath(System.String,System.Boolean)">
            <summary>Temp path disposal</summary>
            <param name="path">The path.</param>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:CodeJam.IO.TempData.GetTempName">
            <summary>Returns a random name for a temp file or directory.</summary>
            <returns>A random name</returns>
            <remarks>The resulting name is a local name (does not include a base path)</remarks>
        </member>
        <member name="M:CodeJam.IO.TempData.CreateDirectory">
            <summary>Creates temp directory and returns <see cref="T:System.IDisposable"/> to free it.</summary>
            <returns>Temp directory to be freed on dispose.</returns>
        </member>
        <member name="M:CodeJam.IO.TempData.CreateDirectory(System.String)">
            <summary>Creates temp directory and returns <see cref="T:System.IDisposable"/> to free it.</summary>
            <param name="dirPath">The dir path.</param>
            <returns>Temp directory to be freed on dispose.</returns>
        </member>
        <member name="M:CodeJam.IO.TempData.CreateDirectory(System.String,System.String)">
            <summary>Creates temp directory and returns <see cref="T:System.IDisposable"/> to free it.</summary>
            <param name="dirPath">The dir path.</param>
            <param name="directoryName">Name of the temp directory.</param>
            <returns>Temp directory to be freed on dispose.</returns>
        </member>
        <member name="M:CodeJam.IO.TempData.CreateFile">
            <summary>Creates temp file and return disposable handle.</summary>
            <returns>Temp file to be freed on dispose.</returns>
        </member>
        <member name="M:CodeJam.IO.TempData.CreateFile(System.String)">
            <summary>Creates temp file and return disposable handle.</summary>
            <param name="dirPath">The dir path.</param>
            <returns>Temp file to be freed on dispose.</returns>
        </member>
        <member name="M:CodeJam.IO.TempData.CreateFile(System.String,System.String)">
            <summary>Creates temp file and return disposable handle.</summary>
            <param name="dirPath">The dir path.</param>
            <param name="fileName">Name of the temp file.</param>
            <returns>Temp file to be freed on dispose.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dirPath"/> is null.</exception>
        </member>
        <member name="M:CodeJam.IO.TempData.CreateFileStream">
            <summary>Creates stream and returns disposable handler.</summary>
            <returns>Temp stream to be freed on dispose.</returns>
        </member>
        <member name="M:CodeJam.IO.TempData.CreateFileStream(System.IO.FileAccess)">
            <summary>Creates stream and returns disposable handler.</summary>
            <param name="fileAccess">The file access.</param>
            <returns>Temp stream to be freed on dispose.</returns>
        </member>
        <member name="M:CodeJam.IO.TempData.CreateFileStream(System.String,System.String,System.IO.FileAccess)">
            <summary> Creates stream and returns disposable handler.</summary>
            <param name="dirPath">The dir path.</param>
            <param name="fileName">Name of the temp file.</param>
            <param name="fileAccess">The file access.</param>
            <returns>Temp stream to be freed on dispose.</returns>
        </member>
        <member name="T:CodeJam.Threading.AsyncOperationHelper">
            <summary>
            Extension and utility methods for <see cref="T:System.ComponentModel.AsyncOperationManager"/> and <see cref="T:System.ComponentModel.AsyncOperation"/>
            </summary>
        </member>
        <member name="M:CodeJam.Threading.AsyncOperationHelper.CreateOperation">
            <summary>
            Returns an <see cref="T:System.ComponentModel.AsyncOperation"/> for tracking the duration of a particular asynchronous operation.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.AsyncOperation"/> that you can use to track the duration of an asynchronous method invocation.
            </returns>
        </member>
        <member name="M:CodeJam.Threading.AsyncOperationHelper.Post(System.ComponentModel.AsyncOperation,System.Action)">
            <summary>
            Invokes a <paramref name="runner"/> on the thread or context appropriate for the application model.
            </summary>
            <param name="asyncOp"></param>
            <param name="runner">
            A <see cref="T:System.Action"/> that wraps the delegate to be called when the operation ends.
            </param>
        </member>
        <member name="M:CodeJam.Threading.AsyncOperationHelper.PostOperationCompleted(System.ComponentModel.AsyncOperation,System.Action)">
            <summary>
            Ends the lifetime of an asynchronous operation.
            </summary>
            <param name="asyncOp"></param>
            <param name="runner">A <see cref="T:System.Action"/> that wraps the delegate to be called when the operation ends.</param>
        </member>
        <member name="M:CodeJam.Threading.AsyncOperationHelper.Send(System.ComponentModel.AsyncOperation,System.Action)">
            <summary>
            Invokes a <paramref name="runner"/> on the thread or context appropriate for the application model and waits for
            it completion.
            </summary>
            <param name="asyncOp"></param>
            <param name="runner">
            A <see cref="T:System.Action"/> that wraps the delegate to be called when the operation ends.
            </param>
        </member>
        <member name="M:CodeJam.Threading.AsyncOperationHelper.Send``1(System.ComponentModel.AsyncOperation,System.Func{``0})">
            <summary>
            Invokes a <paramref name="runner"/> on the thread or context appropriate for the application model and returns
            result.
            </summary>
            <param name="asyncOp"></param>
            <param name="runner">
            A <see cref="T:System.Func`1"/> that wraps the delegate to be called when the operation ends.
            </param>
            <returns>Result of <paramref name="runner"/> execution.</returns>
        </member>
        <member name="M:CodeJam.Threading.AsyncOperationHelper.RunAsync(System.Action{System.ComponentModel.AsyncOperation})">
            <summary>
            Gets thread from pool and run <paramref name="runner"/> inside it.
            </summary>
            <param name="runner">Action to run inside created thread</param>
        </member>
        <member name="M:CodeJam.Threading.AsyncOperationHelper.RunAsync(System.Action{System.ComponentModel.AsyncOperation},System.Action)">
            <summary>
            Gets thread from pool and run <paramref name="runner"/> inside it.
            </summary>
            <param name="runner">Action to run inside created thread</param>
            <param name="completeHandler">
            Action called after <paramref name="runner"/> complete execution. Synchronized with method calling thread.
            </param>
        </member>
        <member name="T:CodeJam.Threading.ConcurrentLazyDictionary`2">
            <summary>
            Dictionary with lazy values initialization.
            </summary>
            <remarks>
            Thread safe.
            </remarks>
        </member>
        <member name="M:CodeJam.Threading.ConcurrentLazyDictionary`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialize instance.
            </summary>
            <param name="valueFactory">Function to create value on demand.</param>
            <param name="comparer">Key comparer.</param>
        </member>
        <member name="M:CodeJam.Threading.ConcurrentLazyDictionary`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initialize instance.
            </summary>
            <param name="valueFactory">Function to create value on demand.</param>
        </member>
        <member name="M:CodeJam.Threading.ConcurrentLazyDictionary`2.Clear">
            <summary>
            Clears all created values
            </summary>
        </member>
        <member name="M:CodeJam.Threading.ConcurrentLazyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether the read-only dictionary contains an element that has the specified key.</summary>
            <returns>true if the read-only dictionary contains an element that has the specified key; otherwise, false.</returns>
            <param name="key">The key to locate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Threading.ConcurrentLazyDictionary`2.TryGetValue(`0,`1@)">
            <summary>Gets the value that is associated with the specified key.</summary>
            <returns>true if the object that implements the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> interface contains an element that has the specified key; otherwise, false.</returns>
            <param name="key">The key to locate.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is null.</exception>
        </member>
        <member name="P:CodeJam.Threading.ConcurrentLazyDictionary`2.Item(`0)">
            <summary>Gets the element that has the specified key in the read-only dictionary.</summary>
            <returns>The element that has the specified key in the read-only dictionary.</returns>
            <param name="key">The key to locate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found. </exception>
        </member>
        <member name="P:CodeJam.Threading.ConcurrentLazyDictionary`2.Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary. </summary>
            <returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
        </member>
        <member name="P:CodeJam.Threading.ConcurrentLazyDictionary`2.Values">
            <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary>
            <returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
        </member>
        <member name="T:CodeJam.Threading.ExecSyncConcurrentLazyDictionary`2">
            <summary>
            Dictionary with lazy values initialization.
            </summary>
            <remarks>
            Thread safe.
            </remarks>
        </member>
        <member name="M:CodeJam.Threading.ExecSyncConcurrentLazyDictionary`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initialize instance.
            </summary>
            <param name="valueFactory">Function to create value on demand.</param>
            <param name="comparer">Key comparer.</param>
        </member>
        <member name="M:CodeJam.Threading.ExecSyncConcurrentLazyDictionary`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initialize instance.
            </summary>
            <param name="valueFactory">Function to create value on demand.</param>
        </member>
        <member name="M:CodeJam.Threading.ExecSyncConcurrentLazyDictionary`2.Clear">
            <summary>
            Clears all created values
            </summary>
        </member>
        <member name="M:CodeJam.Threading.ExecSyncConcurrentLazyDictionary`2.ContainsKey(`0)">
            <summary>Determines whether the read-only dictionary contains an element that has the specified key.</summary>
            <returns>true if the read-only dictionary contains an element that has the specified key; otherwise, false.</returns>
            <param name="key">The key to locate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is null.</exception>
        </member>
        <member name="M:CodeJam.Threading.ExecSyncConcurrentLazyDictionary`2.TryGetValue(`0,`1@)">
            <summary>Gets the value that is associated with the specified key.</summary>
            <returns>true if the object that implements the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> interface contains an element that has the specified key; otherwise, false.</returns>
            <param name="key">The key to locate.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is null.</exception>
        </member>
        <member name="P:CodeJam.Threading.ExecSyncConcurrentLazyDictionary`2.Item(`0)">
            <summary>Gets the element that has the specified key in the read-only dictionary.</summary>
            <returns>The element that has the specified key in the read-only dictionary.</returns>
            <param name="key">The key to locate.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key" /> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found. </exception>
        </member>
        <member name="P:CodeJam.Threading.ExecSyncConcurrentLazyDictionary`2.Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary. </summary>
            <returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
        </member>
        <member name="P:CodeJam.Threading.ExecSyncConcurrentLazyDictionary`2.Values">
            <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary>
            <returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
        </member>
        <member name="T:CodeJam.Threading.InterlockedOperations">
            <summary>
            Provides a helper class for initializing a values in a thread-safe manner.
            </summary>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Initialize(System.Double@,System.Double)">
            <summary>
            Initialize the value referenced by <paramref name="target"/> in a thread-safe manner.
            The value is changed to <paramref name="value"/> only if the current value is default(double).
            </summary>
            <param name="target">Reference to the target location.</param>
            <param name="value">The value to use if the target is equal to default(double).</param>
            <returns>
            The new value referenced by <paramref name="target"/>.
            Note that this is nearly always more useful than the usual
            return from <see cref="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)"/>
            because it saves another read to <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Initialize(System.Double@,System.Double,System.Double)">
            <summary>
            Initialize the value referenced by <paramref name="target"/> in a thread-safe manner.
            The value is changed to <paramref name="initializedValue"/> only if the current value
            is <paramref name="uninitializedValue"/>.
            </summary>
            <param name="target">Reference to the target location.</param>
            <param name="initializedValue">The value to use if the target is currently uninitialized.</param>
            <param name="uninitializedValue">The uninitialized value.</param>
            <returns>
            The new value referenced by <paramref name="target"/>.
            Note that this is nearly always more useful than the usual
            return from <see cref="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)"/>
            because it saves another read to <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Update(System.Double@,System.Func{System.Double,System.Double})">
            <summary>
            Implements lock-free update pattern implementation based on compare-and-swap loop
            </summary>
            <param name="value">Value to change.</param>
            <param name="updateCallback">Function to calculate new value.</param>
            <returns>New value.</returns>
            <remarks>
            Uses the same approach that used by c# compiler in event subscription methods
            </remarks>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Update(System.Double@,System.Double,System.Func{System.Double,System.Double,System.Double})">
            <summary>
            Implements lock-free update pattern implementation based on compare-and-swap loop
            </summary>
            <param name="value">Value to change.</param>
            <param name="newValue">Precalculated new value.</param>
            <param name="updateCallback">Function to calculate new value.</param>
            <returns>New value.</returns>
            <remarks>
            Uses the same approach that used by c# compiler in event subscription methods
            </remarks>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Initialize(System.Single@,System.Single)">
            <summary>
            Initialize the value referenced by <paramref name="target"/> in a thread-safe manner.
            The value is changed to <paramref name="value"/> only if the current value is default(float).
            </summary>
            <param name="target">Reference to the target location.</param>
            <param name="value">The value to use if the target is equal to default(float).</param>
            <returns>
            The new value referenced by <paramref name="target"/>.
            Note that this is nearly always more useful than the usual
            return from <see cref="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)"/>
            because it saves another read to <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Initialize(System.Single@,System.Single,System.Single)">
            <summary>
            Initialize the value referenced by <paramref name="target"/> in a thread-safe manner.
            The value is changed to <paramref name="initializedValue"/> only if the current value
            is <paramref name="uninitializedValue"/>.
            </summary>
            <param name="target">Reference to the target location.</param>
            <param name="initializedValue">The value to use if the target is currently uninitialized.</param>
            <param name="uninitializedValue">The uninitialized value.</param>
            <returns>
            The new value referenced by <paramref name="target"/>.
            Note that this is nearly always more useful than the usual
            return from <see cref="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)"/>
            because it saves another read to <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Update(System.Single@,System.Func{System.Single,System.Single})">
            <summary>
            Implements lock-free update pattern implementation based on compare-and-swap loop
            </summary>
            <param name="value">Value to change.</param>
            <param name="updateCallback">Function to calculate new value.</param>
            <returns>New value.</returns>
            <remarks>
            Uses the same approach that used by c# compiler in event subscription methods
            </remarks>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Update(System.Single@,System.Single,System.Func{System.Single,System.Single,System.Single})">
            <summary>
            Implements lock-free update pattern implementation based on compare-and-swap loop
            </summary>
            <param name="value">Value to change.</param>
            <param name="newValue">Precalculated new value.</param>
            <param name="updateCallback">Function to calculate new value.</param>
            <returns>New value.</returns>
            <remarks>
            Uses the same approach that used by c# compiler in event subscription methods
            </remarks>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Initialize(System.Int32@,System.Int32)">
            <summary>
            Initialize the value referenced by <paramref name="target"/> in a thread-safe manner.
            The value is changed to <paramref name="value"/> only if the current value is default(int).
            </summary>
            <param name="target">Reference to the target location.</param>
            <param name="value">The value to use if the target is equal to default(int).</param>
            <returns>
            The new value referenced by <paramref name="target"/>.
            Note that this is nearly always more useful than the usual
            return from <see cref="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)"/>
            because it saves another read to <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Initialize(System.Int32@,System.Int32,System.Int32)">
            <summary>
            Initialize the value referenced by <paramref name="target"/> in a thread-safe manner.
            The value is changed to <paramref name="initializedValue"/> only if the current value
            is <paramref name="uninitializedValue"/>.
            </summary>
            <param name="target">Reference to the target location.</param>
            <param name="initializedValue">The value to use if the target is currently uninitialized.</param>
            <param name="uninitializedValue">The uninitialized value.</param>
            <returns>
            The new value referenced by <paramref name="target"/>.
            Note that this is nearly always more useful than the usual
            return from <see cref="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)"/>
            because it saves another read to <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Update(System.Int32@,System.Func{System.Int32,System.Int32})">
            <summary>
            Implements lock-free update pattern implementation based on compare-and-swap loop
            </summary>
            <param name="value">Value to change.</param>
            <param name="updateCallback">Function to calculate new value.</param>
            <returns>New value.</returns>
            <remarks>
            Uses the same approach that used by c# compiler in event subscription methods
            </remarks>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Update(System.Int32@,System.Int32,System.Func{System.Int32,System.Int32,System.Int32})">
            <summary>
            Implements lock-free update pattern implementation based on compare-and-swap loop
            </summary>
            <param name="value">Value to change.</param>
            <param name="newValue">Precalculated new value.</param>
            <param name="updateCallback">Function to calculate new value.</param>
            <returns>New value.</returns>
            <remarks>
            Uses the same approach that used by c# compiler in event subscription methods
            </remarks>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Initialize(System.Int64@,System.Int64)">
            <summary>
            Initialize the value referenced by <paramref name="target"/> in a thread-safe manner.
            The value is changed to <paramref name="value"/> only if the current value is default(long).
            </summary>
            <param name="target">Reference to the target location.</param>
            <param name="value">The value to use if the target is equal to default(long).</param>
            <returns>
            The new value referenced by <paramref name="target"/>.
            Note that this is nearly always more useful than the usual
            return from <see cref="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)"/>
            because it saves another read to <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Initialize(System.Int64@,System.Int64,System.Int64)">
            <summary>
            Initialize the value referenced by <paramref name="target"/> in a thread-safe manner.
            The value is changed to <paramref name="initializedValue"/> only if the current value
            is <paramref name="uninitializedValue"/>.
            </summary>
            <param name="target">Reference to the target location.</param>
            <param name="initializedValue">The value to use if the target is currently uninitialized.</param>
            <param name="uninitializedValue">The uninitialized value.</param>
            <returns>
            The new value referenced by <paramref name="target"/>.
            Note that this is nearly always more useful than the usual
            return from <see cref="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)"/>
            because it saves another read to <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Update(System.Int64@,System.Func{System.Int64,System.Int64})">
            <summary>
            Implements lock-free update pattern implementation based on compare-and-swap loop
            </summary>
            <param name="value">Value to change.</param>
            <param name="updateCallback">Function to calculate new value.</param>
            <returns>New value.</returns>
            <remarks>
            Uses the same approach that used by c# compiler in event subscription methods
            </remarks>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Update(System.Int64@,System.Int64,System.Func{System.Int64,System.Int64,System.Int64})">
            <summary>
            Implements lock-free update pattern implementation based on compare-and-swap loop
            </summary>
            <param name="value">Value to change.</param>
            <param name="newValue">Precalculated new value.</param>
            <param name="updateCallback">Function to calculate new value.</param>
            <returns>New value.</returns>
            <remarks>
            Uses the same approach that used by c# compiler in event subscription methods
            </remarks>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Initialize``1(``0@,``0)">
            <summary>
            Initialize the value referenced by <paramref name="target"/> in a thread-safe manner.
            The value is changed to <paramref name="value"/> only if the current value is default(T).
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <param name="target">Reference to the target location.</param>
            <param name="value">The value to use if the target is equal to default(T).</param>
            <returns>
            The new value referenced by <paramref name="target"/>.
            Note that this is nearly always more useful than the usual
            return from <see cref="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)"/>
            because it saves another read to <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Initialize``1(``0@,``0,``0)">
            <summary>
            Initialize the value referenced by <paramref name="target"/> in a thread-safe manner.
            The value is changed to <paramref name="initializedValue"/> only if the current value
            is <paramref name="uninitializedValue"/>.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
            <param name="target">Reference to the target location.</param>
            <param name="initializedValue">The value to use if the target is currently uninitialized.</param>
            <param name="uninitializedValue">The uninitialized value.</param>
            <returns>
            The new value referenced by <paramref name="target"/>.
            Note that this is nearly always more useful than the usual
            return from <see cref="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)"/>
            because it saves another read to <paramref name="target"/>.
            </returns>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Update``1(``0@,System.Func{``0,``0})">
            <summary>
            Implements lock-free update pattern implementation based on compare-and-swap loop
            </summary>
            <param name="value">Value to change.</param>
            <param name="updateCallback">Function to calculate new value.</param>
            <returns>New value.</returns>
            <remarks>
            Uses the same approach that used by c# compiler in event subscription methods
            </remarks>
        </member>
        <member name="M:CodeJam.Threading.InterlockedOperations.Update``1(``0@,``0,System.Func{``0,``0,``0})">
            <summary>
            Implements lock-free update pattern implementation based on compare-and-swap loop
            </summary>
            <param name="value">Value to change.</param>
            <param name="newValue">Precalculated new value.</param>
            <param name="updateCallback">Function to calculate new value.</param>
            <returns>New value.</returns>
            <remarks>
            Uses the same approach that used by c# compiler in event subscription methods
            </remarks>
        </member>
        <member name="T:CodeJam.Threading.ParallelExtensions">
            <summary>
            Parallel extensions.
            </summary>
        </member>
        <member name="M:CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Int32,System.Action{``1},System.String)">
            <summary>
            Implements Provider-Consumer pattern.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="source">Incoming data.</param>
            <param name="providerCount">Number of provider threads.</param>
            <param name="providerFunc">Provider function</param>
            <param name="consumerCount">Number of consumer threads.</param>
            <param name="consumerAction">Consumer action.</param>
            <param name="processName">Process name pattern.</param>
        </member>
        <member name="M:CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Int32,System.Action{``1},System.String)">
            <summary>
            Implements Provider-Consumer pattern.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="source">Incoming data.</param>
            <param name="providerFunc">Provider function</param>
            <param name="consumerCount">Number of consumer threads.</param>
            <param name="consumerAction">Consumer action.</param>
            <param name="processName">Process name pattern.</param>
        </member>
        <member name="M:CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1},System.Action{``1},System.String)">
            <summary>
            Implements Provider-Consumer pattern.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="source">Incoming data.</param>
            <param name="providerCount">Number of provider threads.</param>
            <param name="providerFunc">Provider function</param>
            <param name="consumerAction">Consumer action.</param>
            <param name="processName">Process name pattern.</param>
        </member>
        <member name="M:CodeJam.Threading.ParallelExtensions.RunInParallel``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Action{``1},System.String)">
            <summary>
            Implements Provider-Consumer pattern.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="source">Incoming data.</param>
            <param name="providerFunc">Provider function</param>
            <param name="consumerAction">Consumer action.</param>
            <param name="processName">Process name pattern.</param>
        </member>
        <member name="M:CodeJam.Threading.ParallelExtensions.RunInParallel(System.Collections.Generic.IEnumerable{System.Action},System.Int32,System.String)">
            <summary>
            Runs in parallel provided source of actions.
            </summary>
            <param name="source">Actions to run.</param>
            <param name="parallelCount">number of threads to use.</param>
            <param name="processName">Process name pattern.</param>
        </member>
        <member name="M:CodeJam.Threading.ParallelExtensions.RunInParallel(System.Collections.Generic.IEnumerable{System.Action},System.String)">
            <summary>
            Runs in parallel provided source of actions.
            </summary>
            <param name="source">Actions to run.</param>
            <param name="processName">Process name pattern.</param>
        </member>
        <member name="M:CodeJam.Threading.ParallelExtensions.RunInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{``0},System.String)">
            <summary>
            Runs in parallel actions for provided data source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">Source to run.</param>
            <param name="parallelCount">number of threads to use.</param>
            <param name="action">Action to run.</param>
            <param name="processName">Process name.</param>
        </member>
        <member name="M:CodeJam.Threading.ParallelExtensions.RunInParallel``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.String)">
            <summary>
            Runs in parallel actions for provided data source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">Source to run.</param>
            <param name="action">Action to run.</param>
            <param name="processName">Process name.</param>
        </member>
        <member name="T:CodeJam.Threading.ReaderWriterLockSlimExtensions">
            <summary>
            Represents the extension methods for <see cref="T:System.Threading.ReaderWriterLockSlim"/>.
            </summary>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.GetReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Tries to enter the lock in read mode.
            </summary>
            <param name="readerWriterLock">The <see cref="T:System.Threading.ReaderWriterLockSlim"/> instance.</param>
            <returns>
            The <see cref="T:System.IDisposable"/> object that reduce the recursion count for read mode, and exits read mode if the
            resulting count is 0 (zero).
            </returns>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.GetWriteLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Tries to enter the lock in write mode.
            </summary>
            <param name="readerWriterLock">The <see cref="T:System.Threading.ReaderWriterLockSlim"/> instance.</param>
            <returns>
            The <see cref="T:System.IDisposable"/> object that reduce the recursion count for write mode, and exits write mode if the
            resulting count is 0 (zero).
            </returns>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.GetUpgradeableReadLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Tries to enter the lock in upgradeable mode.
            </summary>
            <param name="readerWriterLock">The <see cref="T:System.Threading.ReaderWriterLockSlim"/> instance.</param>
            <returns>
            The <see cref="T:System.IDisposable"/> object that reduce the recursion count for upgradeable mode, and exits upgradeable
            mode if the resulting count is 0 (zero).
            </returns>
        </member>
        <member name="T:CodeJam.Threading.ReaderWriterLockSlimExtensions.ReadLockScope">
            <summary>
            The <see cref="T:System.Threading.ReaderWriterLockSlim"/> wrapper.
            </summary>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.ReadLockScope.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.Threading.ReaderWriterLockSlimExtensions.ReadLockScope"/> class.
            </summary>
            <param name="readerWriterLock">The <see cref="T:System.Threading.ReaderWriterLockSlim"/> instance.</param>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.ReadLockScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:CodeJam.Threading.ReaderWriterLockSlimExtensions.WriteLockScope">
            <summary>
            The <see cref="T:System.Threading.ReaderWriterLockSlim"/> wrapper.
            </summary>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.WriteLockScope.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.Threading.ReaderWriterLockSlimExtensions.WriteLockScope"/> class.
            </summary>
            <param name="readerWriterLock">The <see cref="T:System.Threading.ReaderWriterLockSlim"/> instance.</param>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.WriteLockScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:CodeJam.Threading.ReaderWriterLockSlimExtensions.UpgradeableReadLockScope">
            <summary>
            The <see cref="T:System.Threading.ReaderWriterLockSlim"/> wrapper.
            </summary>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.UpgradeableReadLockScope.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.Threading.ReaderWriterLockSlimExtensions.UpgradeableReadLockScope"/> class.
            </summary>
            <param name="readerWriterLock">The <see cref="T:System.Threading.ReaderWriterLockSlim"/> instance.</param>
        </member>
        <member name="M:CodeJam.Threading.ReaderWriterLockSlimExtensions.UpgradeableReadLockScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:CodeJam.DisposableExtensions">
            <summary>The <see cref="T:System.IDisposable"/> extensions.</summary>
        </member>
        <member name="M:CodeJam.DisposableExtensions.DisposeAll(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>Invokes the dispose for each item in the <paramref name="disposables"/>.</summary>
            <param name="disposables">The multiple <see cref="T:System.IDisposable"/> instances.</param>
            <exception cref="T:System.AggregateException"></exception>
        </member>
        <member name="M:CodeJam.DisposableExtensions.DisposeAll(System.Collections.Generic.IEnumerable{System.IDisposable},System.Func{System.Exception,System.Boolean})">
            <summary>Invokes the dispose for each item in the <paramref name="disposables"/>.</summary>
            <param name="disposables">The multiple <see cref="T:System.IDisposable"/> instances.</param>
            <param name="exceptionHandler">The exception handler.</param>
        </member>
        <member name="T:CodeJam.Disposable">
            <summary>Helper methods for <see cref="T:System.IDisposable"/></summary>
        </member>
        <member name="T:CodeJam.Disposable.EmptyDisposable">
            <summary>
            The <see cref="T:System.IDisposable"/> implementation with no action on <see cref="M:CodeJam.Disposable.EmptyDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:CodeJam.Disposable.EmptyDisposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:CodeJam.Disposable.AnonymousDisposable">
            <summary>
            The <see cref="T:System.IDisposable"/> implementation that calls supplied action on <see cref="M:CodeJam.Disposable.AnonymousDisposable.Dispose"/>.
            </summary>
            DONTTOUCH: DO NOT make it a struct, passing the structure by value will result in multiple Dispose() calls.
            SEALSO: https://blogs.msdn.microsoft.com/ericlippert/2011/03/14/to-box-or-not-to-box-that-is-the-question/
        </member>
        <member name="M:CodeJam.Disposable.AnonymousDisposable.#ctor(System.Action)">
            <summary>Initialize instance.</summary>
            <param name="disposeAction">The dispose action.</param>
        </member>
        <member name="M:CodeJam.Disposable.AnonymousDisposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:CodeJam.Disposable.Empty">
            <summary><see cref="T:System.IDisposable"/> instance without any code in <see cref="M:System.IDisposable.Dispose"/>.</summary>
        </member>
        <member name="M:CodeJam.Disposable.Create(System.Action)">
            <summary>
            Creates <see cref="T:System.IDisposable"/> instance that calls <paramref name="disposeAction"/> on disposing.
            </summary>
            <param name="disposeAction">The dispose action.</param>
            <returns>
            Instance of <see cref="T:System.IDisposable"/> that calls <paramref name="disposeAction"/> on disposing.
            </returns>
        </member>
        <member name="M:CodeJam.Disposable.Merge(System.IDisposable[])">
            <summary>Combine multiple <see cref="T:System.IDisposable"/> instances into single one.</summary>
            <param name="disposables">The disposables.</param>
            <returns>Instance of <see cref="T:System.IDisposable"/> that will dispose the specified disposables.</returns>
        </member>
        <member name="M:CodeJam.Disposable.Merge(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>Combine multiple <see cref="T:System.IDisposable"/> instances into single one.</summary>
            <param name="disposables">The disposables.</param>
            <returns>Instance of <see cref="T:System.IDisposable"/> that will dispose the specified disposables.</returns>
        </member>
        <member name="T:CodeJam.Fn`1">
            <summary>
            Helper methods for <see cref="T:System.Func`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:CodeJam.Fn`1.True">
            <summary>
            The function that always returns true.
            </summary>
        </member>
        <member name="F:CodeJam.Fn`1.False">
            <summary>
            The function that returns false.
            </summary>
        </member>
        <member name="F:CodeJam.Fn`1.TruePredicate">
            <summary>
            The function that returns true.
            </summary>
        </member>
        <member name="F:CodeJam.Fn`1.FalsePredicate">
            <summary>
            The function that always returns false.
            </summary>
        </member>
        <member name="F:CodeJam.Fn`1.Self">
            <summary>
            The function that returns the same object which was passed as parameter.
            </summary>
        </member>
        <member name="F:CodeJam.Fn`1.SelfConverter">
            <summary>
            The function that returns the same object which was passed as parameter.
            </summary>
        </member>
        <member name="F:CodeJam.Fn`1.IsNull">
            <summary>
            The function that returns true if an object is null.
            </summary>
        </member>
        <member name="F:CodeJam.Fn`1.IsNotNull">
            <summary>
            The function that returns true if an object is not null.
            </summary>
        </member>
        <member name="T:CodeJam.ObjectPools.SharedPools">
            <summary>
            Shared object pool for roslyn
            
            Use this shared pool if only concern is reducing object allocations.
            if perf of an object pool itself is also a concern, use ObjectPool directly.
            
            For example, if you want to create a million of small objects within a second, 
            use the ObjectPool directly. it should have much less overhead than using this.
            </summary>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPools.BigDefault``1">
            <summary>
            The pool that uses default constructor with 100 elements pooled
            </summary>
            <returns><see cref="T:CodeJam.ObjectPools.ObjectPool`1"/> instance.</returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPools.Default``1">
            <summary>
            The pool that uses default constructor with 20 elements pooled
            </summary>
            <returns><see cref="T:CodeJam.ObjectPools.ObjectPool`1"/> instance.</returns>
        </member>
        <member name="T:CodeJam.ObjectPools.SharedPoolExtensions">
            <summary>
            The <see cref="T:CodeJam.ObjectPools.ObjectPool`1"/> extension.
            </summary>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.GetPooledObject(CodeJam.ObjectPools.ObjectPool{System.Text.StringBuilder})">
            <summary>
            Gets an <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> from the specified pool that can be released automatically.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.GetPooledObject``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Stack{``0}})">
            <summary>
            Gets an <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> from the specified pool that can be released automatically.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.GetPooledObject``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Queue{``0}})">
            <summary>
            Gets an <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> from the specified pool that can be released automatically.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.GetPooledObject``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.HashSet{``0}})">
            <summary>
            Gets an <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> from the specified pool that can be released automatically.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.GetPooledObject``2(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Dictionary{``0,``1}})">
            <summary>
            Gets an <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> from the specified pool that can be released automatically.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.GetPooledObject``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.List{``0}})">
            <summary>
            Gets an <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> from the specified pool that can be released automatically.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.GetPooledObject``1(CodeJam.ObjectPools.ObjectPool{``0})">
            <summary>
            Gets an <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> from the specified pool that can be released automatically.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.GetPooledObject``1(CodeJam.ObjectPools.ObjectPool{``0},System.Action{CodeJam.ObjectPools.ObjectPool{``0},``0})">
            <summary>
            Gets an <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> from the specified pool that can be released automatically.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <param name="releaser">The function to release object.</param>
            <returns>
            The <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.AllocateAndClear(CodeJam.ObjectPools.ObjectPool{System.Text.StringBuilder})">
            <summary>
            Allocates a <see cref="T:System.Text.StringBuilder"/> and clears a wrapped <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:System.Text.StringBuilder"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.AllocateAndClear``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Stack{``0}})">
            <summary>
            Allocates a <see cref="T:System.Collections.Generic.Stack`1"/> and clears a wrapped <see cref="T:System.Collections.Generic.Stack`1"/> instance.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:System.Collections.Generic.Stack`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.AllocateAndClear``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Queue{``0}})">
            <summary>
            Allocates a <see cref="T:System.Collections.Generic.Queue`1"/> and clears a wrapped <see cref="T:System.Collections.Generic.Queue`1"/> instance.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:System.Collections.Generic.Queue`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.AllocateAndClear``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.HashSet{``0}})">
            <summary>
            Allocates a <see cref="T:System.Collections.Generic.HashSet`1"/> and clears a wrapped <see cref="T:System.Collections.Generic.HashSet`1"/> instance.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:System.Collections.Generic.HashSet`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.AllocateAndClear``2(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Dictionary{``0,``1}})">
            <summary>
            Allocates a <see cref="T:System.Collections.Generic.Dictionary`2"/> and clears a wrapped <see cref="T:System.Collections.Generic.Dictionary`2"/> instance.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:System.Collections.Generic.Dictionary`2"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.AllocateAndClear``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.List{``0}})">
            <summary>
            Allocates a <see cref="T:System.Collections.Generic.List`1"/> and clears a wrapped <see cref="T:System.Collections.Generic.List`1"/> instance.
            </summary>
            <param name="pool">The object pool to allocate from.</param>
            <returns>
            The <see cref="T:System.Collections.Generic.List`1"/> instance.
            </returns>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.ClearAndFree(CodeJam.ObjectPools.ObjectPool{System.Text.StringBuilder},System.Text.StringBuilder)">
            <summary>
            Clears and returns objects to the pool.
            </summary>
            <param name="pool">The object pool to return to.</param>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to release.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.ClearAndFree``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.HashSet{``0}},System.Collections.Generic.HashSet{``0})">
            <summary>
            Clears and returns objects to the pool.
            </summary>
            <param name="pool">The object pool to return to.</param>
            <param name="set">The <see cref="T:System.Collections.Generic.HashSet`1"/> to release.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.ClearAndFree``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Stack{``0}},System.Collections.Generic.Stack{``0})">
            <summary>
            Clears and returns objects to the pool.
            </summary>
            <param name="pool">The object pool to return to.</param>
            <param name="stack">The <see cref="T:System.Collections.Generic.Stack`1"/> to release.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.ClearAndFree``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Queue{``0}},System.Collections.Generic.Queue{``0})">
            <summary>
            Clears and returns objects to the pool.
            </summary>
            <param name="pool">The object pool to return to.</param>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> to release.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.ClearAndFree``2(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.Dictionary{``0,``1}},System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Clears and returns objects to the pool.
            </summary>
            <param name="pool">The object pool to return to.</param>
            <param name="map">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to release.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.SharedPoolExtensions.ClearAndFree``1(CodeJam.ObjectPools.ObjectPool{System.Collections.Generic.List{``0}},System.Collections.Generic.List{``0})">
            <summary>
            Clears and returns objects to the pool.
            </summary>
            <param name="pool">The object pool to return to.</param>
            <param name="list">The <see cref="T:System.Collections.Generic.List`1"/> to release.</param>
        </member>
        <member name="T:CodeJam.ObjectPools.PooledObject`1">
            <summary>
            The RAII object to automatically release pooled object when its owning pool.
            </summary>
        </member>
        <member name="P:CodeJam.ObjectPools.PooledObject`1.Object">
            <summary>
            Gets the object instance.
            </summary>
        </member>
        <member name="M:CodeJam.ObjectPools.PooledObject`1.#ctor(CodeJam.ObjectPools.ObjectPool{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> class.
            </summary>
            <param name="pool">The object pool.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.PooledObject`1.#ctor(CodeJam.ObjectPools.ObjectPool{`0},System.Action{CodeJam.ObjectPools.ObjectPool{`0},`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> class.
            </summary>
            <param name="pool">The object pool.</param>
            <param name="releaser">The function to release object.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.PooledObject`1.#ctor(CodeJam.ObjectPools.ObjectPool{`0},System.Func{CodeJam.ObjectPools.ObjectPool{`0},`0},System.Action{CodeJam.ObjectPools.ObjectPool{`0},`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.ObjectPools.PooledObject`1"/> class.
            </summary>
            <param name="pool">The object pool.</param>
            <param name="allocator">Th function to allocate object from the specified pool.</param>
            <param name="releaser">The function to release object.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.PooledObject`1.Dispose">
            <summary>
            Returns object to the pool.
            </summary>
        </member>
        <member name="T:CodeJam.ObjectPools.ObjectPool`1">
            <summary>
            Generic implementation of object pooling pattern with predefined pool size limit. The main
            purpose is that limited number of frequently used objects can be kept in the pool for
            further recycling.
            
            Notes: 
            1) it is not the goal to keep all returned objects. Pool is not meant for storage. If there
               is no space in the pool, extra returned objects will be dropped.
            
            2) it is implied that if object was obtained from a pool, the caller will return it back in
               a relatively short time. Keeping checked out objects for long durations is ok, but 
               reduces usefulness of pooling. Just new up your own.
            
            Not returning objects to the pool in not detrimental to the pool's work, but is a bad practice. 
            Rationale: 
               If there is no intent for reusing the object, do not use pool - just use "new". 
            </summary>
        </member>
        <member name="M:CodeJam.ObjectPools.ObjectPool`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.ObjectPools.ObjectPool`1"/> class.
            </summary>
            <param name="factory">The instance factory.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.ObjectPool`1.#ctor(System.Func{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeJam.ObjectPools.ObjectPool`1"/> class with the specified pool size.
            </summary>
            <param name="factory">The instance factory.</param>
            <param name="size">The pool size.</param>
        </member>
        <member name="M:CodeJam.ObjectPools.ObjectPool`1.Allocate">
            <summary>
            Produces an instance.
            </summary>
            <returns>Allocated instance.</returns>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically 
            reducing how far we will typically search.
            </remarks>
        </member>
        <member name="M:CodeJam.ObjectPools.ObjectPool`1.Free(`0)">
            <summary>
            Returns objects to the pool.
            </summary>
            <param name="obj">The object</param>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically 
            reducing how far we will typically search in Allocate.
            </remarks>
        </member>
        <member name="T:CodeJam.ValueOption`1">
            <summary>
            Represents a value type that can be assigned null.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CodeJam.ValueOption`1.#ctor(`0)">
            <summary>
            Initializes a new instance to the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:CodeJam.ValueOption`1.HasValue">
            <summary>
            Gets a value indicating whether the current object has a value.
            </summary>
        </member>
        <member name="P:CodeJam.ValueOption`1.Value">
            <summary>
            Gets the value of the current object.
            </summary>
        </member>
        <member name="M:CodeJam.ValueOption`1.op_Implicit(`0)~CodeJam.ValueOption{`0}">
            <summary>
            Creates a new object initialized to a specified value.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Instance of <see cref="T:CodeJam.ValueOption"/>.</returns>
        </member>
        <member name="M:CodeJam.ValueOption`1.op_Explicit(CodeJam.ValueOption{`0})~`0">
            <summary>
            Extracts value from <paramref name="option"/>
            </summary>
            <param name="option"></param>
            <returns>Value of <paramref name="option"/></returns>
        </member>
        <member name="M:CodeJam.ValueOption`1.op_Equality(CodeJam.ValueOption{`0},CodeJam.ValueOption{`0})">
            <summary>
            Equality operator.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>True</c>, if <paramref name="left"/> equals <paramref name="right"/>.</returns>
        </member>
        <member name="M:CodeJam.ValueOption`1.op_Inequality(CodeJam.ValueOption{`0},CodeJam.ValueOption{`0})">
            <summary>
            Unequality operator.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>True</c>, if <paramref name="left"/> not equals <paramref name="right"/>.</returns>
        </member>
        <member name="M:CodeJam.ValueOption`1.Equals(CodeJam.ValueOption{`0})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:CodeJam.ValueOption`1.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false. </returns>
            <param name="obj">The object to compare with the current instance. </param>
        </member>
        <member name="M:CodeJam.ValueOption`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:CodeJam.ValueOption`1.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
        </member>
        <member name="T:CodeJam.HGlobal">
            <summary>
            HGlobal wrapper.
            </summary>
        </member>
        <member name="M:CodeJam.HGlobal.Create(System.Int32)">
            <summary>
            Create a new HGlobal with given size.
            </summary>
            <param name="cb">The required number of bytes in memory.</param>
            <returns><see cref="T:CodeJam.HGlobalScope"/> instance</returns>
        </member>
        <member name="M:CodeJam.HGlobal.Create``1">
            <summary>
            Create a new HGlobal with sizeof(<typeparam name="T"/>).
            </summary>
            <returns><see cref="T:CodeJam.HGlobalScope`1"/> instance</returns>
        </member>
        <member name="M:CodeJam.HGlobal.Create``1(System.Int32)">
            <summary>
            Create a new HGlobal with given size.
            </summary>
            <param name="cb">The required number of bytes in memory.</param>
            <returns><see cref="T:CodeJam.HGlobalScope`1"/> instance</returns>
        </member>
        <member name="T:CodeJam.HGlobalScope">
            <summary>
            Wraps <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)"/> and <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)"/>.
            </summary>
        </member>
        <member name="F:CodeJam.HGlobalScope._ptr">
            <summary>
            Internal pointer.
            </summary>
        </member>
        <member name="M:CodeJam.HGlobalScope.#ctor(System.Int32)">
            <summary>
            Allocates memory from the unmanaged memory of the process by using the specified number of bytes.
            </summary>
            <param name="cb">The required number of bytes in memory.</param>
        </member>
        <member name="M:CodeJam.HGlobalScope.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:CodeJam.HGlobalScope.Dispose">
            <summary>
            Dispose method to free all resources.
            </summary>
        </member>
        <member name="P:CodeJam.HGlobalScope.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="P:CodeJam.HGlobalScope.Data">
            <summary>
            Pointer to data.
            </summary>
        </member>
        <member name="M:CodeJam.HGlobalScope.DisposeInternal">
            <summary>
            Internal Dispose method.
            </summary>
        </member>
        <member name="T:CodeJam.HGlobalScope`1">
            <summary>
            Wraps Mashal.AllocHGlobal and Marshal.FreeHGlobal using generic.
            </summary>
        </member>
        <member name="M:CodeJam.HGlobalScope`1.#ctor">
            <summary>
            Default constructor, allocates memory with the size of <typeparamref name="T"/>
            </summary>
        </member>
        <member name="M:CodeJam.HGlobalScope`1.#ctor(System.Int32)">
            <summary>
            Allocates memory from the unmanaged memory of the process by using the specified number of bytes.
            </summary>
            <param name="cb">The required number of bytes in memory.</param>
        </member>
        <member name="P:CodeJam.HGlobalScope`1.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="F:CodeJam.HGlobalScope`1._size">
            <summary>
            Size of the of the generic parameter <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:CodeJam.HGlobalScope`1.CheckSize(System.Int32)">
            <summary>
            Validate <paramref name="cb" /> is at least as the size of <typeparamref name="T"/>.
            </summary>
            <param name="cb">The required number of bytes in memory.</param>
            <returns><paramref name="cb" /></returns>
        </member>
        <member name="T:CodeJam.Memory">
            <summary>
            The utility class for working with arrays of primitive types.
            </summary>
        </member>
        <member name="M:CodeJam.Memory.Compare(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Determines whether the first count of bytes of the <paramref name="p1"/> is equal to the <paramref name="p2"/>.
            </summary>
            <param name="p1">The first buffer to compare.</param>
            <param name="p2">The second buffer to compare.</param>
            <param name="count">The number of bytes to compare.</param>
            <returns>
            true if all count bytes of the <paramref name="p1"/> and <paramref name="p2"/> are equal; otherwise, false.
            </returns>
        </member>
        <member name="T:CodeJam.Xml.XNodeExtensions">
            <summary>
            Extensions for XLinq.
            </summary>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.RequiredRoot(System.Xml.Linq.XDocument)">
            <summary>
            Returns <paramref name="document"/> root, or throw an exception, if root is null.
            </summary>
            <param name="document">The document.</param>
            <returns>Document root</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="document"/> is null</exception>
            <exception cref="T:System.Xml.XmlException">Document has no root.</exception>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.RequiredRoot(System.Xml.Linq.XDocument,System.Xml.Linq.XName)">
            <summary>
            Returns <paramref name="document"/> root, or throws an exception, if root is null or has another name.
            </summary>
            <param name="document">The document.</param>
            <param name="rootName">Name of the root tag</param>
            <returns>Document root</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="document"/> is null</exception>
            <exception cref="T:System.Xml.XmlException">Document has no root with specified name.</exception>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.RequiredElement(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Returns child element with name <paramref name="name"/>, or throws an exception if element does not exists.
            </summary>
            <param name="parent">Parent element.</param>
            <param name="name">Name of the element.</param>
            <returns>First element with specified name.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="parent"/> or <paramref name="name"/> is null.</exception>
            <exception cref="T:System.Xml.XmlException">Element with specified name does not exists.</exception>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.RequiredElement(System.Xml.Linq.XElement,System.Xml.Linq.XName[])">
            <summary>
            Returns child element with one of names in <paramref name="names"/>,
            or throws an exception if element does not exists.
            </summary>
            <param name="parent">Parent element.</param>
            <param name="names">Possible names of the element.</param>
            <returns>First element that match one of specified names.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parent"/> or <paramref name="names"/> is null.
            </exception>
            <exception cref="T:System.Xml.XmlException">Element with one of specified names does not exists.</exception>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.RequiredAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Returns attribute with name <paramref name="name"/>, or throws an exception if attribute does not exists.
            </summary>
            <param name="element">The <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <param name="name">Name of the attribute.</param>
            <returns>Attribute with specified name.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> or <paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.Xml.XmlException">Attribute with specified name not found.</exception>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.AttributeValueOrDefault``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.String,``0},``0)">
            <summary>
            Returns value of optional attribute.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="element">Element with attribute</param>
            <param name="attrName">Attribute name.</param>
            <param name="parser">Value parser</param>
            <param name="defaultValue">Default value.</param>
            <returns>Parsed value or <paramref name="defaultValue"/> if attribute not exists.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> or <paramref name="attrName"/> or <paramref name="parser"/> is null.
            </exception>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.AttributeValueOrDefault(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Returns string value of optional attribute.
            </summary>
            <param name="element">Element with attribute</param>
            <param name="attrName">Attribute name.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Parsed value or <paramref name="defaultValue"/> if attribute does not exist.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> or <paramref name="attrName"/> is null.
            </exception>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.ElementAltValueOrDefault``1(System.Xml.Linq.XElement,System.Func{System.Xml.Linq.XElement,``0},``0,System.Xml.Linq.XName[])">
            <summary>
            Returns value of optional element.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="parent">Parent element.</param>
            <param name="valueSelector">Function to select element value</param>
            <param name="defaultValue">Default value.</param>
            <param name="names">Array of possible element names.</param>
            <returns>Selected element value or <paramref name="defaultValue"/> if element does not exist.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parent"/> or <paramref name="valueSelector"/> or <paramref name="names"/> is null.
            </exception>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.ElementValueOrDefault``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.Xml.Linq.XElement,``0},``0)">
            <summary>
            Returns value of optional element.
            </summary>
            <typeparam name="T">Type of value</typeparam>
            <param name="parent">Parent element.</param>
            <param name="name">Element name.</param>
            <param name="valueSelector">Function to select element value</param>
            <param name="defaultValue">Default value.</param>
            <returns>Selected element value or <paramref name="defaultValue"/> if element does not exist</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parent"/> or <paramref name="valueSelector"/> is null.
            </exception>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.ElementValueOrDefault``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.String,``0},``0)">
            <summary>
            Returns value of optional element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parent">Parent element.</param>
            <param name="name">Element name.</param>
            <param name="valueSelector">Function to parse element value</param>
            <param name="defaultValue">Default value.</param>
            <returns>Selected element value or <paramref name="defaultValue"/> if element does not exist</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parent"/> or <paramref name="name"/> or <paramref name="valueSelector"/> is null.
            </exception>
        </member>
        <member name="M:CodeJam.Xml.XNodeExtensions.ElementValueOrDefault(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Returns string value of optional element.
            </summary>
            <param name="parent">Parent element.</param>
            <param name="name">Element name.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Selected element value or <paramref name="defaultValue"/> if element does not exist</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="parent"/> or <paramref name="name"/> is null.
            </exception>
        </member>
        <member name="T:System.ITuple">
            <summary>
            Helper so we can call some tuple methods recursively without knowing the underlying types.
            </summary>
        </member>
        <member name="T:System.Tuple">
            <summary>
            Provides static methods for creating tuple objects.
            </summary>
        </member>
        <member name="M:System.Tuple.Create``1(``0)">
            <summary>
            Creates a new 1-tuple, or singleton.
            </summary>
            <typeparam name="T1">The type of the only component of the tuple.</typeparam>
            <param name="item1">The value of the only component of the tuple.</param>
            <returns>A tuple whose value is (<paramref name="item1"/>).</returns>
        </member>
        <member name="M:System.Tuple.Create``2(``0,``1)">
            <summary>
            Creates a new 2-tuple, or pair.
            </summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <returns>A tuple whose value is (<paramref name="item1"/>, <paramref name="item2"/>).</returns>
        </member>
        <member name="M:System.Tuple.Create``3(``0,``1,``2)">
            <summary>
            Creates a new 3-tuple, or triple.
            </summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <returns>
            A tuple whose value is (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>).
            </returns>
        </member>
        <member name="M:System.Tuple.Create``4(``0,``1,``2,``3)">
            <summary>
            Creates a new 4-tuple, or quadruple.
            </summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <returns>
            A tuple whose value is (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>,
            <paramref name="item4"/>).
            </returns>
        </member>
        <member name="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
            <summary>
            Creates a new 5-tuple, or quintuple.
            </summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <returns>
            A tuple whose value is (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>,
            <paramref name="item4"/>, <paramref name="item5"/>).
            </returns>
        </member>
        <member name="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates a new 6-tuple, or sextuple.
            </summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <param name="item6">The value of the sixth component of the tuple.</param>
            <returns>
            A tuple whose value is (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>,
            <paramref name="item4"/>, <paramref name="item5"/>, <paramref name="item6"/>).
            </returns>
        </member>
        <member name="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Creates a new 7-tuple, or septuple.
            </summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <param name="item6">The value of the sixth component of the tuple.</param>
            <param name="item7">The value of the seventh component of the tuple.</param>
            <returns>
            A tuple whose value is (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>,
            <paramref name="item4"/>, <paramref name="item5"/>, <paramref name="item6"/>, <paramref name="item7"/>).
            </returns>
        </member>
        <member name="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Creates a new 8-tuple, or octuple.
            </summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <param name="item6">The value of the sixth component of the tuple.</param>
            <param name="item7">The value of the seventh component of the tuple.</param>
            <param name="item8">The value of the eighth component of the tuple.</param>
            <returns>
            A tuple whose value is (<paramref name="item1"/>, <paramref name="item2"/>, <paramref name="item3"/>,
            <paramref name="item4"/>, <paramref name="item5"/>, <paramref name="item6"/>, <paramref name="item7"/>,
            <paramref name="item8"/>).
            </returns>
        </member>
        <member name="T:System.Tuple`1">
            <summary>
            Represents a 1-tuple, or singleton.
            </summary>
            <typeparam name="T1">The type of the tuple's only component.</typeparam>
        </member>
        <member name="P:System.Tuple`1.Item1">
            <summary>
            Gets the value of the <see cref="T:System.Tuple`1"/> object's single component.
            </summary>
        </member>
        <member name="M:System.Tuple`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Tuple`1"/> class.
            </summary>
            <param name="item1">The value of the tuple's only component.</param>
        </member>
        <member name="M:System.Tuple`1.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current<see cref="T:System.Tuple`1"/> object is equal to a specified object.
            </summary>
            <param name="obj"> The object to compare with this instance.</param>
            <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
        </member>
        <member name="M:System.Tuple`1.GetHashCode">
            <summary>Returns the hash code for the current <see cref="T:System.Tuple`1"/> object.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.Tuple`1.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.Tuple`1"/> instance.
            </summary>
            <returns> The string representation of this <see cref="T:System.Tuple`1"/> object.</returns>
        </member>
        <member name="T:System.Tuple`2">
            <summary>
            Represents a 2-tuple, or pair.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
        </member>
        <member name="P:System.Tuple`2.Item1">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`2"/> object's first component.
            </summary>
        </member>
        <member name="P:System.Tuple`2.Item2">
            <summary>
            Gets the value of the current <see cref="T:System.Tuple`2"/> object's second component.
            </summary>
        </member>
        <member name="M:System.Tuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Tuple`2"/> class.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
        </member>
        <member name="M:System.Tuple`2.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current<see cref="T:System.Tuple`2"/> object is equal to a specified object.
            </summary>
            <param name="obj"> The object to compare with this instance.</param>
            <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
        </member>
        <member name="M:System.Tuple`2.GetHashCode">
            <summary>Returns the hash code for the current<see cref="T:System.Tuple`2"/> object.</summary>
            <returns> A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.Tuple`2.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.Tuple`2"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.Tuple`2"/> object.</returns>
        </member>
        <member name="T:System.Tuple`3">
            <summary>Represents a 3-tuple, or triple. </summary>
            <typeparam name="T1"> The type of the tuple's first component.</typeparam>
            <typeparam name="T2"> The type of the tuple's second component.</typeparam>
            <typeparam name="T3"> The type of the tuple's third component.</typeparam>
        </member>
        <member name="P:System.Tuple`3.Item1">
            <summary>Gets the value of the current<see cref="T:System.Tuple`3"/> object's first component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`3"/> object's first component.</returns>
        </member>
        <member name="P:System.Tuple`3.Item2">
            <summary>Gets the value of the current<see cref="T:System.Tuple`3"/> object's second component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`3"/> object's second component.</returns>
        </member>
        <member name="P:System.Tuple`3.Item3">
            <summary>Gets the value of the current <see cref="T:System.Tuple`3"/> object's third component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`3"/> object's third component.</returns>
        </member>
        <member name="M:System.Tuple`3.#ctor(`0,`1,`2)">
            <summary>Initializes a new instance of the<see cref="T:System.Tuple`3"/> class.</summary>
            <param name="item1"> The value of the tuple's first component.</param>
            <param name="item2"> The value of the tuple's second component.</param>
            <param name="item3"> The value of the tuple's third component.</param>
        </member>
        <member name="M:System.Tuple`3.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.Tuple`3"/> object is equal to a specified object.
            </summary>
            <param name="obj"> The object to compare with this instance.</param>
            <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
        </member>
        <member name="M:System.Tuple`3.GetHashCode">
            <summary>Returns the hash code for the current <see cref="T:System.Tuple`3"/> object.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.Tuple`3.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.Tuple`3"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.Tuple`3"/> object.</returns>
        </member>
        <member name="T:System.Tuple`4">
            <summary>Represents a 4-tuple, or quadruple. </summary>
            <typeparam name="T1"> The type of the tuple's first component.</typeparam>
            <typeparam name="T2"> The type of the tuple's second component.</typeparam>
            <typeparam name="T3"> The type of the tuple's third component.</typeparam>
            <typeparam name="T4"> The type of the tuple's fourth component.</typeparam>
        </member>
        <member name="P:System.Tuple`4.Item1">
            <summary>Gets the value of the current<see cref="T:System.Tuple`4"/> object's first component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`4"/> object's first component.</returns>
        </member>
        <member name="P:System.Tuple`4.Item2">
            <summary>Gets the value of the current<see cref="T:System.Tuple`4"/> object's second component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`4"/> object's second component.</returns>
        </member>
        <member name="P:System.Tuple`4.Item3">
            <summary>Gets the value of the current<see cref="T:System.Tuple`4"/> object's third component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`4"/> object's third component.</returns>
        </member>
        <member name="P:System.Tuple`4.Item4">
            <summary>Gets the value of the current<see cref="T:System.Tuple`4"/> object's fourth component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`4"/> object's fourth component.</returns>
        </member>
        <member name="M:System.Tuple`4.#ctor(`0,`1,`2,`3)">
            <summary>Initializes a new instance of the<see cref="T:System.Tuple`4"/> class.</summary>
            <param name="item1"> The value of the tuple's first component.</param>
            <param name="item2"> The value of the tuple's second component.</param>
            <param name="item3"> The value of the tuple's third component.</param>
            <param name="item4"> The value of the tuple's fourth component</param>
        </member>
        <member name="M:System.Tuple`4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current<see cref="T:System.Tuple`4"/> object is equal to a specified object.
            </summary>
            <param name="obj"> The object to compare with this instance.</param>
            <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
        </member>
        <member name="M:System.Tuple`4.GetHashCode">
            <summary>Returns the hash code for the current <see cref="T:System.Tuple`4"/> object.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.Tuple`4.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.Tuple`4"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.Tuple`4"/> object.</returns>
        </member>
        <member name="M:System.Tuple`4.System#ITuple#ToString(System.Text.StringBuilder)">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.Tuple`4"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.Tuple`4"/> object.</returns>
        </member>
        <member name="T:System.Tuple`5">
            <summary>Represents a 5-tuple, or quintuple. </summary>
            <typeparam name="T1"> The type of the tuple's first component.</typeparam>
            <typeparam name="T2"> The type of the tuple's second component.</typeparam>
            <typeparam name="T3"> The type of the tuple's third component.</typeparam>
            <typeparam name="T4"> The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5"> The type of the tuple's fifth component.</typeparam>
        </member>
        <member name="P:System.Tuple`5.Item1">
            <summary>Gets the value of the current<see cref="T:System.Tuple`5"/> object's first component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`5"/> object's first component.</returns>
        </member>
        <member name="P:System.Tuple`5.Item2">
            <summary>Gets the value of the current<see cref="T:System.Tuple`5"/> object's second component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`5"/> object's second component.</returns>
        </member>
        <member name="P:System.Tuple`5.Item3">
            <summary>Gets the value of the current<see cref="T:System.Tuple`5"/> object's third component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`5"/> object's third component.</returns>
        </member>
        <member name="P:System.Tuple`5.Item4">
            <summary>Gets the value of the current<see cref="T:System.Tuple`5"/> object's fourth component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`5"/> object's fourth component.</returns>
        </member>
        <member name="P:System.Tuple`5.Item5">
            <summary>Gets the value of the current<see cref="T:System.Tuple`5"/> object's fifth component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`5"/> object's fifth component.</returns>
        </member>
        <member name="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>Initializes a new instance of the<see cref="T:System.Tuple`5"/> class.</summary>
            <param name="item1"> The value of the tuple's first component.</param>
            <param name="item2"> The value of the tuple's second component.</param>
            <param name="item3"> The value of the tuple's third component.</param>
            <param name="item4"> The value of the tuple's fourth component</param>
            <param name="item5"> The value of the tuple's fifth component.</param>
        </member>
        <member name="M:System.Tuple`5.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current<see cref="T:System.Tuple`5"/> object is equal to a specified object.
            </summary>
            <param name="obj"> The object to compare with this instance.</param>
            <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
        </member>
        <member name="M:System.Tuple`5.GetHashCode">
            <summary>Returns the hash code for the current <see cref="T:System.Tuple`5"/> object.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.Tuple`5.ToString">
            <summary>Returns a string that represents the value of this <see cref="T:System.Tuple`5" /> instance.</summary>
            <returns>The string representation of this <see cref="T:System.Tuple`5" /> object.</returns>
        </member>
        <member name="M:System.Tuple`5.System#ITuple#ToString(System.Text.StringBuilder)">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.Tuple`5"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.Tuple`5"/> object.</returns>
        </member>
        <member name="T:System.Tuple`6">
            <summary>Represents a 6-tuple, or sextuple. </summary>
            <typeparam name="T1"> The type of the tuple's first component.</typeparam>
            <typeparam name="T2"> The type of the tuple's second component.</typeparam>
            <typeparam name="T3"> The type of the tuple's third component.</typeparam>
            <typeparam name="T4"> The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5"> The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6"> The type of the tuple's sixth component.</typeparam>
        </member>
        <member name="P:System.Tuple`6.Item1">
            <summary>Gets the value of the current<see cref="T:System.Tuple`6"/> object's first component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`6"/> object's first component.</returns>
        </member>
        <member name="P:System.Tuple`6.Item2">
            <summary>Gets the value of the current<see cref="T:System.Tuple`6"/> object's second component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`6"/> object's second component.</returns>
        </member>
        <member name="P:System.Tuple`6.Item3">
            <summary>Gets the value of the current<see cref="T:System.Tuple`6"/> object's third component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`6"/> object's third component.</returns>
        </member>
        <member name="P:System.Tuple`6.Item4">
            <summary>Gets the value of the current<see cref="T:System.Tuple`6"/> object's fourth component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`6"/> object's fourth component.</returns>
        </member>
        <member name="P:System.Tuple`6.Item5">
            <summary>Gets the value of the current<see cref="T:System.Tuple`6"/> object's fifth component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`6"/> object's fifth  component.</returns>
        </member>
        <member name="P:System.Tuple`6.Item6">
            <summary>Gets the value of the current<see cref="T:System.Tuple`6"/> object's sixth component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`6"/> object's sixth component.</returns>
        </member>
        <member name="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>Initializes a new instance of the<see cref="T:System.Tuple`6"/> class.</summary>
            <param name="item1"> The value of the tuple's first component.</param>
            <param name="item2"> The value of the tuple's second component.</param>
            <param name="item3"> The value of the tuple's third component.</param>
            <param name="item4"> The value of the tuple's fourth component</param>
            <param name="item5"> The value of the tuple's fifth component.</param>
            <param name="item6"> The value of the tuple's sixth component.</param>
        </member>
        <member name="M:System.Tuple`6.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current<see cref="T:System.Tuple`6"/> object is equal to a specified object.
            </summary>
            <param name="obj"> The object to compare with this instance.</param>
            <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
        </member>
        <member name="M:System.Tuple`6.GetHashCode">
            <summary>Returns the hash code for the current <see cref="T:System.Tuple`6"/> object.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.Tuple`6.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.Tuple`6"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.Tuple`6"/> object.</returns>
        </member>
        <member name="T:System.Tuple`7">
            <summary>Represents a 7-tuple, or septuple. </summary>
            <typeparam name="T1"> The type of the tuple's first component.</typeparam>
            <typeparam name="T2"> The type of the tuple's second component.</typeparam>
            <typeparam name="T3"> The type of the tuple's third component.</typeparam>
            <typeparam name="T4"> The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5"> The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6"> The type of the tuple's sixth component.</typeparam>
            <typeparam name="T7"> The type of the tuple's seventh component.</typeparam>
        </member>
        <member name="P:System.Tuple`7.Item1">
            <summary>Gets the value of the current<see cref="T:System.Tuple`7"/> object's first component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`7"/> object's first component.</returns>
        </member>
        <member name="P:System.Tuple`7.Item2">
            <summary>Gets the value of the current<see cref="T:System.Tuple`7"/> object's second component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`7"/> object's second component.</returns>
        </member>
        <member name="P:System.Tuple`7.Item3">
            <summary>Gets the value of the current<see cref="T:System.Tuple`7"/> object's third component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`7"/> object's third component.</returns>
        </member>
        <member name="P:System.Tuple`7.Item4">
            <summary>Gets the value of the current<see cref="T:System.Tuple`7"/> object's fourth component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`7"/> object's fourth component.</returns>
        </member>
        <member name="P:System.Tuple`7.Item5">
            <summary>Gets the value of the current<see cref="T:System.Tuple`7"/> object's fifth component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`7"/> object's fifth component.</returns>
        </member>
        <member name="P:System.Tuple`7.Item6">
            <summary>Gets the value of the current<see cref="T:System.Tuple`7"/> object's sixth component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`7"/> object's sixth component.</returns>
        </member>
        <member name="P:System.Tuple`7.Item7">
            <summary>Gets the value of the current<see cref="T:System.Tuple`7"/> object's seventh component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`7"/> object's seventh component.</returns>
        </member>
        <member name="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>Initializes a new instance of the<see cref="T:System.Tuple`7"/> class.</summary>
            <param name="item1"> The value of the tuple's first component.</param>
            <param name="item2"> The value of the tuple's second component.</param>
            <param name="item3"> The value of the tuple's third component.</param>
            <param name="item4"> The value of the tuple's fourth component</param>
            <param name="item5"> The value of the tuple's fifth component.</param>
            <param name="item6"> The value of the tuple's sixth component.</param>
            <param name="item7"> The value of the tuple's seventh component.</param>
        </member>
        <member name="M:System.Tuple`7.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current<see cref="T:System.Tuple`7"/> object is equal to a specified object.
            </summary>
            <param name="obj"> The object to compare with this instance.</param>
            <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
        </member>
        <member name="M:System.Tuple`7.GetHashCode">
            <summary>Returns the hash code for the current <see cref="T:System.Tuple`7"/> object.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.Tuple`7.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.Tuple`7"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.Tuple`7"/> object.</returns>
        </member>
        <member name="T:System.Tuple`8">
            <summary>Represents an n-tuple, where n is 8 or greater.</summary>
            <typeparam name="T1"> The type of the tuple's first component.</typeparam>
            <typeparam name="T2"> The type of the tuple's second component.</typeparam>
            <typeparam name="T3"> The type of the tuple's third component.</typeparam>
            <typeparam name="T4"> The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5"> The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6"> The type of the tuple's sixth component.</typeparam>
            <typeparam name="T7"> The type of the tuple's seventh component.</typeparam>
            <typeparam name="TRest"> Any generic Tuple object that defines the types of the tuple's remaining components.</typeparam>
        </member>
        <member name="P:System.Tuple`8.Item1">
            <summary>Gets the value of the current<see cref="T:System.Tuple`8"/> object's first component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`8"/> object's first component.</returns>
        </member>
        <member name="P:System.Tuple`8.Item2">
            <summary>Gets the value of the current<see cref="T:System.Tuple`8"/> object's second component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`8"/> object's second component.</returns>
        </member>
        <member name="P:System.Tuple`8.Item3">
            <summary>Gets the value of the current<see cref="T:System.Tuple`8"/> object's third component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`8"/> object's third component.</returns>
        </member>
        <member name="P:System.Tuple`8.Item4">
            <summary>Gets the value of the current<see cref="T:System.Tuple`8"/> object's fourth component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`8"/> object's fourth component.</returns>
        </member>
        <member name="P:System.Tuple`8.Item5">
            <summary>Gets the value of the current<see cref="T:System.Tuple`8"/> object's fifth component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`8"/> object's fifth component.</returns>
        </member>
        <member name="P:System.Tuple`8.Item6">
            <summary>Gets the value of the current<see cref="T:System.Tuple`8"/> object's sixth component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`8"/> object's sixth component.</returns>
        </member>
        <member name="P:System.Tuple`8.Item7">
            <summary>Gets the value of the current<see cref="T:System.Tuple`8"/> object's seventh component.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`8"/> object's seventh component.</returns>
        </member>
        <member name="P:System.Tuple`8.Rest">
            <summary>Gets the current<see cref="T:System.Tuple`8"/> object's remaining components.</summary>
            <returns>The value of the current<see cref="T:System.Tuple`8"/> object's remaining components.</returns>
        </member>
        <member name="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>Initializes a new instance of the<see cref="T:System.Tuple`8"/> class.</summary>
            <param name="item1"> The value of the tuple's first component.</param>
            <param name="item2"> The value of the tuple's second component.</param>
            <param name="item3"> The value of the tuple's third component.</param>
            <param name="item4"> The value of the tuple's fourth component</param>
            <param name="item5"> The value of the tuple's fifth component.</param>
            <param name="item6"> The value of the tuple's sixth component.</param>
            <param name="item7"> The value of the tuple's seventh component.</param>
            <param name="rest"> Any generic Tuple object that contains the values of the tuple's remaining components.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="rest"/> is not a generic Tuple object.
            </exception>
        </member>
        <member name="M:System.Tuple`8.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current<see cref="T:System.Tuple`8"/> object is equal to a specified object.
            </summary>
            <param name="obj"> The object to compare with this instance.</param>
            <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
        </member>
        <member name="M:System.Tuple`8.GetHashCode">
            <summary>Calculates the hash code for the current <see cref="T:System.Tuple`8"/> object.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.Tuple`8.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.Tuple`8"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.Tuple`8"/> object.</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.TupleElementNamesAttribute">
            <summary>
            Indicates that the use of <see cref="T:System.ValueTuple"/> on a member is meant to be treated as a tuple with element names.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.TupleElementNamesAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see
            cref="T:System.Runtime.CompilerServices.TupleElementNamesAttribute"/> class.
            </summary>
            <param name="transformNames">
            Specifies, in a pre-order depth-first traversal of a type's
            construction, which <see cref="T:System.ValueType"/> occurrences are
            meant to carry element names.
            </param>
            <remarks>
            This constructor is meant to be used on types that contain an
            instantiation of <see cref="T:System.ValueType"/> that contains
            element names.  For instance, if <c>C</c> is a generic type with
            two type parameters, then a use of the constructed type <c>C{<see
            cref="T:System.ValueTuple`2"/>, <see
            cref="T:System.ValueTuple`3"/></c> might be intended to
            treat the first type argument as a tuple with element names and the
            second as a tuple without element names. In which case, the
            appropriate attribute specification should use a
            <c>transformNames</c> value of <c>{ "name1", "name2", null, null,
            null }</c>.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.TupleElementNamesAttribute.TransformNames">
            <summary>
            Specifies, in a pre-order depth-first traversal of a type's
            construction, which <see cref="T:System.ValueTuple"/> elements are
            meant to carry element names.
            </summary>
        </member>
        <member name="T:System.Reflection.CustomAttributeExtensions">
            <summary>
            Contains static methods for retrieving custom attributes.
            </summary>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a specified assembly.
            </summary>
            <param name="element">The assembly to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>
            A custom attribute that matches <paramref name="attributeType"/>, or null if no such attribute is found.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a <paramref name="element"/>.
            </summary>
            <param name="element">The <paramref name="element"/> to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>
            A custom attribute that matches <paramref name="attributeType"/>, or null if no such attribute is found.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a <paramref name="element"/>.
            </summary>
            <param name="element">The <paramref name="element"/> to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>
            A custom attribute that matches <paramref name="attributeType"/>, or null if no such attribute is found.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a <paramref name="element"/>.
            </summary>
            <param name="element">The <paramref name="element"/> to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>
            A custom attribute that matches <paramref name="attributeType"/>, or null if no such attribute is found.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a <paramref name="element"/>.
            </summary>
            <param name="element">The <paramref name="element"/> to inspect.</param>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <returns>
            A custom attribute that matches <typeparamref name="T"/>, or null if no such attribute is found.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a <paramref name="element"/>.
            </summary>
            <param name="element">The <paramref name="element"/> to inspect.</param>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <returns>
            A custom attribute that matches <typeparamref name="T"/>, or null if no such attribute is found.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a <paramref name="element"/>.
            </summary>
            <param name="element">The <paramref name="element"/> to inspect.</param>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <returns>
            A custom attribute that matches <typeparamref name="T"/>, or null if no such attribute is found.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a <paramref name="element"/>.
            </summary>
            <param name="element">The <paramref name="element"/> to inspect.</param>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <returns>
            A custom attribute that matches <typeparamref name="T"/>, or null if no such attribute is found.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a <paramref name="element"/>.
            </summary>
            <param name="element">The <paramref name="element"/> to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <param name="inherit">true to inspect the ancestors of element; otherwise, false.</param>
            <returns>
            A custom attribute that matches <paramref name="attributeType"/>, or null if no such attribute is found.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a <paramref name="element"/>.
            </summary>
            <param name="element">The <paramref name="element"/> to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <param name="inherit">true to inspect the ancestors of element; otherwise, false.</param>
            <returns>
            A custom attribute that matches <paramref name="attributeType"/>, or null if no such attribute is found.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a <paramref name="element"/>.
            </summary>
            <param name="element">The <paramref name="element"/> to inspect.</param>
            <param name="inherit">true to inspect the ancestors of element; otherwise, false.</param>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <returns>
            A custom attribute that matches <typeparamref name="T"/>, or null if no such attribute is found.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Retrieves a custom attribute of a specified type that is applied to a <paramref name="element"/>.
            </summary>
            <param name="element">The <paramref name="element"/> to inspect.</param>
            <param name="inherit">true to inspect the ancestors of element; otherwise, false.</param>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <returns>
            A custom attribute that matches <typeparamref name="T"/>, or null if no such attribute is found.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="inherit">true to inspect the ancestors of element; otherwise, false.</param>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="inherit">true to inspect the ancestors of element; otherwise, false.</param>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <param name="inherit">true to inspect the ancestors of element; otherwise, false.</param>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of attribute to search for.</param>
            <param name="inherit">true to inspect the ancestors of element; otherwise, false.</param>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="inherit">true to inspect the ancestors of element; otherwise, false.</param>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Retrieves a collection of custom attributes that are applied to a specified member, and optionally inspects the
            ancestors of that member.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="inherit">true to inspect the ancestors of element; otherwise, false.</param>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <returns>
            A collection of the custom attributes that are applied to element that match the specified criteria, or an empty
            collection if no such attributes exist.
            </returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)">
            <summary>
            Indicates whether custom attributes of a specified type are applied to a specified member, and, optionally,
            applied to its ancestors.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of the attribute to search for.</param>
            <returns>true if an attribute of the specified type is applied to element; otherwise, false.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)">
            <summary>
            Indicates whether custom attributes of a specified type are applied to a specified member, and, optionally,
            applied to its ancestors.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of the attribute to search for.</param>
            <returns>true if an attribute of the specified type is applied to element; otherwise, false.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Indicates whether custom attributes of a specified type are applied to a specified member, and, optionally,
            applied to its ancestors.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of the attribute to search for.</param>
            <returns>true if an attribute of the specified type is applied to element; otherwise, false.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type)">
            <summary>
            Indicates whether custom attributes of a specified type are applied to a specified member, and, optionally,
            applied to its ancestors.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of the attribute to search for.</param>
            <returns>true if an attribute of the specified type is applied to element; otherwise, false.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Indicates whether custom attributes of a specified type are applied to a specified member, and, optionally,
            applied to its ancestors.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of the attribute to search for.</param>
            <param name="inherit">true to inspect the ancestors of element; otherwise, false.</param>
            <returns>true if an attribute of the specified type is applied to element; otherwise, false.</returns>
        </member>
        <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
            Indicates whether custom attributes of a specified type are applied to a specified member, and, optionally,
            applied to its ancestors.
            </summary>
            <param name="element">The member to inspect.</param>
            <param name="attributeType">The type of the attribute to search for.</param>
            <param name="inherit">true to inspect the ancestors of element; otherwise, false.</param>
            <returns>true if an attribute of the specified type is applied to element; otherwise, false.</returns>
        </member>
        <member name="T:System.Action`5">
            <summary>
            Encapsulates a method that has five parameters.
            </summary>
            <typeparam name="TArg1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg4">The type of the forth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The forth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:System.Action`6">
            <summary>
            Encapsulates a method that has five parameters.
            </summary>
            <typeparam name="TArg1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg4">The type of the forth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The forth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:System.Action`7">
            <summary>
            Encapsulates a method that has five parameters.
            </summary>
            <typeparam name="TArg1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg4">The type of the forth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The forth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:System.Action`8">
            <summary>
            Encapsulates a method that has five parameters.
            </summary>
            <typeparam name="TArg1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg4">The type of the forth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The forth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:System.Func`6">
            <summary>
            Encapsulates a method that has five parameters and returns a value of the type specified
            by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="TArg1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg4">The type of the forth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The forth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <returns></returns>
        </member>
        <member name="T:System.Func`7">
            <summary>
            Encapsulates a method that has five parameters and returns a value of the type specified
            by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="TArg1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg4">The type of the forth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The forth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <returns></returns>
        </member>
        <member name="T:System.Func`8">
            <summary>
            Encapsulates a method that has five parameters and returns a value of the type specified
            by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="TArg1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg4">The type of the forth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The forth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
            <returns></returns>
        </member>
        <member name="T:System.Func`9">
            <summary>
            Encapsulates a method that has five parameters and returns a value of the type specified
            by the <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="TArg1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg4">The type of the forth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TArg8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
            <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
            <param name="arg4">The forth parameter of the method that this delegate encapsulates.</param>
            <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
            <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
            <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
            <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
            <returns></returns>
        </member>
        <member name="T:System.Collections.IStructuralComparable">
            <summary>
            Supports the structural comparison of collection objects.
            </summary>
        </member>
        <member name="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)">
            <summary>
            Determines whether the current collection object precedes, occurs in the same position as,
            or follows another object in the sort order.
            </summary>
            <param name="other">The object to compare with the current instance.</param>
            <param name="comparer">
            An object that compares members of the current collection object with the corresponding members of
            <paramref name="other"/>.
            </param>
            <returns>
            An integer that indicates the relationship of the current collection object to <paramref name="other"/>.
            </returns>
        </member>
        <member name="T:System.Collections.IStructuralEquatable">
            <summary>
            Defines methods to support the comparison of objects for structural equality.
            </summary>
        </member>
        <member name="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)">
            <summary>
            Determines whether an object is structurally equal to the current instance.
            </summary>
            <param name="other">The object to compare with the current instance.</param>
            <param name="comparer">
            An object that determines whether the current instance and <paramref name="other"/> are equal.
            </param>
            <returns><c>true</c> if the two objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)">
            <summary>
            Returns a hash code for the current instance.
            </summary>
            <param name="comparer">An object that computes the hash code of the current object.</param>
            <returns>The hash code for the current instance.</returns>
        </member>
        <member name="T:System.Collections.Generic.DictionaryWithReadOnly`2">
            <summary>
            <see cref="T:System.Collections.Generic.Dictionary`2"/> that implements <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>.
            </summary>
            <typeparam name="TKey">Key type.</typeparam>
            <typeparam name="TValue">Value type.</typeparam>
            <remarks>For FW40 targeting purposes only.</remarks>
        </member>
        <member name="M:System.Collections.Generic.DictionaryWithReadOnly`2.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.</summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryWithReadOnly`2.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.</summary>
            <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity" /> is less than 0.</exception>
        </member>
        <member name="M:System.Collections.Generic.DictionaryWithReadOnly`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
        </member>
        <member name="M:System.Collections.Generic.DictionaryWithReadOnly`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
            <param name="capacity">The initial number of elements that the <see cref="T:System.Collections.Generic.Dictionary`2" /> can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity" /> is less than 0.</exception>
        </member>
        <member name="M:System.Collections.Generic.DictionaryWithReadOnly`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> and uses the default equality comparer for the key type.</summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dictionary" /> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:System.Collections.Generic.DictionaryWithReadOnly`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="dictionary" /> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:System.Collections.Generic.DictionaryWithReadOnly`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.Dictionary`2" /> class with serialized data.</summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyList`1">
            <summary>
            Represents a read-only collection of elements that can be accessed by index.
            </summary>
            <typeparam name="T">The type of elements in the read-only list.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index in the read-only list.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element at the specified index in the read-only list.</returns>
        </member>
        <member name="T:System.Collections.Generic.ListWithReadOnly`1">
            <summary>
            <see cref="T:System.Collections.Generic.List`1"/> with <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> implemented.
            </summary>
            <typeparam name="T">Type of element</typeparam>
        </member>
        <member name="M:System.Collections.Generic.ListWithReadOnly`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1"/> class that is empty and has
            the default initial capacity.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListWithReadOnly`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.ListWithReadOnly`1"/> class that is empty and
            has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="capacity"/> is less than 0.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.ListWithReadOnly`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1"/> class that contains
            elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is null.
            </exception>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
            <summary>
            Represents a strongly-typed, read-only collection of elements.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
            <summary>
            Represents a generic read-only collection of key/value pairs.
            </summary>
            <typeparam name="TKey">The type of keys in the read-only dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the read-only dictionary.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the read-only dictionary contains an element that has the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>
            true if the read-only dictionary contains an element that has the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value that is associated with the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <param name="value">
            When this method returns, the value associated with the specified key, if the key is found; otherwise,
            the default value for the type of the value parameter. This parameter is passed uninitialized.
            </param>
            <returns>
            true if the object that implements the <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> interface contains
            an element that has the specified key; otherwise, false.
            </returns>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the element that has the specified key in the read-only dictionary.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>The element that has the specified key in the read-only dictionary.</returns>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
            <summary>
            Gets an enumerable collection that contains the keys in the read-only dictionary.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
            <summary>
            Gets an enumerable collection that contains the values in the read-only dictionary.
            </summary>
        </member>
        <member name="T:System.Collections.ObjectModel.ReadOnlyCollectionWithReadOnly`1">
            <summary>
            Provides the base class for a generic read-only collection.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyCollectionWithReadOnly`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollectionWithReadOnly`1"/> class that is a read-only
            wrapper around the specified list.
            </summary>
            <param name="list">The list to wrap.</param>
        </member>
        <member name="T:System.Threading.Volatile">
            <summary>
            Contains methods for performing volatile memory operations.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.Boolean@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the
            processor from reordering memory operations as follows: If a read or write appears after this method in the code,
            the processor cannot move it before this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.SByte@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the
            processor from reordering memory operations as follows: If a read or write appears after this method in the code,
            the processor cannot move it before this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.Byte@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the
            processor from reordering memory operations as follows: If a read or write appears after this method in the code,
            the processor cannot move it before this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.Int16@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the
            processor from reordering memory operations as follows: If a read or write appears after this method in the code,
            the processor cannot move it before this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.UInt16@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the
            processor from reordering memory operations as follows: If a read or write appears after this method in the code,
            the processor cannot move it before this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.Int32@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the
            processor from reordering memory operations as follows: If a read or write appears after this method in the code,
            the processor cannot move it before this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.UInt32@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the
            processor from reordering memory operations as follows: If a read or write appears after this method in the code,
            the processor cannot move it before this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.Int64@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the
            processor from reordering memory operations as follows: If a read or write appears after this method in the code,
            the processor cannot move it before this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.UInt64@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the
            processor from reordering memory operations as follows: If a read or write appears after this method in the code,
            the processor cannot move it before this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.IntPtr@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the
            processor from reordering memory operations as follows: If a read or write appears after this method in the code,
            the processor cannot move it before this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.UIntPtr@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the
            processor from reordering memory operations as follows: If a read or write appears after this method in the code,
            the processor cannot move it before this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.Single@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the
            processor from reordering memory operations as follows: If a read or write appears after this method in the code,
            the processor cannot move it before this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Read(System.Double@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the
            processor from reordering memory operations as follows: If a read or write appears after this method in the code,
            the processor cannot move it before this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Read``1(``0@)">
            <summary>
            Reads the value of the specified field. On systems that require it, inserts a memory barrier that prevents the
            processor from reordering memory operations as follows: If a read or write appears after this method in the code,
            the processor cannot move it before this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.Boolean@,System.Boolean)">
            <summary>
            Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that
            prevents the processor from reordering memory operations as follows: If a read or write appears before this
            method in the code, the processor cannot move it after this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.SByte@,System.SByte)">
            <summary>
            Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that
            prevents the processor from reordering memory operations as follows: If a read or write appears before this
            method in the code, the processor cannot move it after this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.Byte@,System.Byte)">
            <summary>
            Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that
            prevents the processor from reordering memory operations as follows: If a read or write appears before this
            method in the code, the processor cannot move it after this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)">
            <summary>
            Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that
            prevents the processor from reordering memory operations as follows: If a read or write appears before this
            method in the code, the processor cannot move it after this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.UInt16@,System.UInt16)">
            <summary>
            Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that
            prevents the processor from reordering memory operations as follows: If a read or write appears before this
            method in the code, the processor cannot move it after this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)">
            <summary>
            Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that
            prevents the processor from reordering memory operations as follows: If a read or write appears before this
            method in the code, the processor cannot move it after this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.UInt32@,System.UInt32)">
            <summary>
            Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that
            prevents the processor from reordering memory operations as follows: If a read or write appears before this
            method in the code, the processor cannot move it after this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)">
            <summary>
            Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that
            prevents the processor from reordering memory operations as follows: If a read or write appears before this
            method in the code, the processor cannot move it after this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.UInt64@,System.UInt64)">
            <summary>
            Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that
            prevents the processor from reordering memory operations as follows: If a read or write appears before this
            method in the code, the processor cannot move it after this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)">
            <summary>
            Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that
            prevents the processor from reordering memory operations as follows: If a read or write appears before this
            method in the code, the processor cannot move it after this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)">
            <summary>
            Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that
            prevents the processor from reordering memory operations as follows: If a read or write appears before this
            method in the code, the processor cannot move it after this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.Single@,System.Single)">
            <summary>
            Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that
            prevents the processor from reordering memory operations as follows: If a read or write appears before this
            method in the code, the processor cannot move it after this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Write(System.Double@,System.Double)">
            <summary>
            Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that
            prevents the processor from reordering memory operations as follows: If a read or write appears before this
            method in the code, the processor cannot move it after this method.
            </summary>
        </member>
        <member name="M:System.Threading.Volatile.Write``1(``0@,``0)">
            <summary>
            Writes the specified value to the specified field. On systems that require it, inserts a memory barrier that
            prevents the processor from reordering memory operations as follows: If a read or write appears before this
            method in the code, the processor cannot move it after this method.
            </summary>
        </member>
        <member name="T:System.TupleExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Tuple"/> instances to interop with C# tuples features (deconstruction syntax, converting from and to <see cref="T:System.ValueTuple"/>).
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``1(System.Tuple{``0},``0@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 1 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``2(System.Tuple{``0,``1},``0@,``1@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 2 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``3(System.Tuple{``0,``1,``2},``0@,``1@,``2@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 3 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``4(System.Tuple{``0,``1,``2,``3},``0@,``1@,``2@,``3@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 4 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``5(System.Tuple{``0,``1,``2,``3,``4},``0@,``1@,``2@,``3@,``4@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 5 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``6(System.Tuple{``0,``1,``2,``3,``4,``5},``0@,``1@,``2@,``3@,``4@,``5@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 6 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 7 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 8 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 9 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 10 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 11 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 12 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 13 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 14 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 15 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 16 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 17 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``18(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 18 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``19(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 19 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``20(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 20 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.Deconstruct``21(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19,``20}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@)">
            <summary>
            Deconstruct a properly nested <see cref="T:System.Tuple"/> with 21 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``1(System.Tuple{``0})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 1 element.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``2(System.Tuple{``0,``1})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 2 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``3(System.Tuple{``0,``1,``2})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 3 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``4(System.Tuple{``0,``1,``2,``3})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 4 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``5(System.Tuple{``0,``1,``2,``3,``4})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 5 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 6 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 7 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 8 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 9 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 10 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 11 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 12 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 13 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 14 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 15 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 16 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 17 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``18(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 18 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``19(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 19 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``20(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 20 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToValueTuple``21(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19,``20}}})">
            <summary>
            Make a properly nested <see cref="T:System.ValueTuple"/> from a properly nested <see cref="T:System.Tuple"/> with 21 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``1(System.ValueTuple{``0})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 1 element.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``2(System.ValueTuple{``0,``1})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 2 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``3(System.ValueTuple{``0,``1,``2})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 3 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``4(System.ValueTuple{``0,``1,``2,``3})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 4 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``5(System.ValueTuple{``0,``1,``2,``3,``4})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 5 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``6(System.ValueTuple{``0,``1,``2,``3,``4,``5})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 6 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``7(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 7 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``8(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 8 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``9(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 9 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``10(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 10 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``11(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 11 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``12(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 12 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``13(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 13 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``14(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 14 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``15(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 15 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``16(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 16 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``17(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 17 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``18(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 18 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``19(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 19 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``20(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18,``19}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 20 elements.
            </summary>
        </member>
        <member name="M:System.TupleExtensions.ToTuple``21(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18,``19,``20}}})">
            <summary>
            Make a properly nested <see cref="T:System.Tuple"/> from a properly nested <see cref="T:System.ValueTuple"/> with 21 elements.
            </summary>
        </member>
        <member name="T:System.ITupleInternal">
            <summary>
            Helper so we can call some tuple methods recursively without knowing the underlying types.
            </summary>
        </member>
        <member name="T:System.ValueTuple">
            <summary>
            The ValueTuple types (from arity 0 to 8) comprise the runtime implementation that underlies tuples in C# and struct tuples in F#.
            Aside from created via language syntax, they are most easily created via the ValueTuple.Create factory methods.
            The System.ValueTuple types differ from the System.Tuple types in that:
            - they are structs rather than classes,
            - they are mutable rather than readonly, and
            - their members (such as Item1, Item2, etc) are fields rather than properties.
            </summary>
        </member>
        <member name="M:System.ValueTuple.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is a <see cref="T:System.ValueTuple"/>.</returns>
        </member>
        <member name="M:System.ValueTuple.Equals(System.ValueTuple)">
            <summary>Returns a value indicating whether this instance is equal to a specified value.</summary>
            <param name="other">An instance to compare to this instance.</param>
            <returns>true if <paramref name="other"/> has the same value as this instance; otherwise, false.</returns>
        </member>
        <member name="M:System.ValueTuple.CompareTo(System.ValueTuple)">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>()</c>.
            </remarks>
        </member>
        <member name="M:System.ValueTuple.Create">
            <summary>Creates a new struct 0-tuple.</summary>
            <returns>A 0-tuple.</returns>
        </member>
        <member name="M:System.ValueTuple.Create``1(``0)">
            <summary>Creates a new struct 1-tuple, or singleton.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <returns>A 1-tuple (singleton) whose value is (item1).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``2(``0,``1)">
            <summary>Creates a new struct 2-tuple, or pair.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <returns>A 2-tuple (pair) whose value is (item1, item2).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``3(``0,``1,``2)">
            <summary>Creates a new struct 3-tuple, or triple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <returns>A 3-tuple (triple) whose value is (item1, item2, item3).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``4(``0,``1,``2,``3)">
            <summary>Creates a new struct 4-tuple, or quadruple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <returns>A 4-tuple (quadruple) whose value is (item1, item2, item3, item4).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``5(``0,``1,``2,``3,``4)">
            <summary>Creates a new struct 5-tuple, or quintuple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <returns>A 5-tuple (quintuple) whose value is (item1, item2, item3, item4, item5).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``6(``0,``1,``2,``3,``4,``5)">
            <summary>Creates a new struct 6-tuple, or sextuple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <param name="item6">The value of the sixth component of the tuple.</param>
            <returns>A 6-tuple (sextuple) whose value is (item1, item2, item3, item4, item5, item6).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>Creates a new struct 7-tuple, or septuple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <param name="item6">The value of the sixth component of the tuple.</param>
            <param name="item7">The value of the seventh component of the tuple.</param>
            <returns>A 7-tuple (septuple) whose value is (item1, item2, item3, item4, item5, item6, item7).</returns>
        </member>
        <member name="M:System.ValueTuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>Creates a new struct 8-tuple, or octuple.</summary>
            <typeparam name="T1">The type of the first component of the tuple.</typeparam>
            <typeparam name="T2">The type of the second component of the tuple.</typeparam>
            <typeparam name="T3">The type of the third component of the tuple.</typeparam>
            <typeparam name="T4">The type of the fourth component of the tuple.</typeparam>
            <typeparam name="T5">The type of the fifth component of the tuple.</typeparam>
            <typeparam name="T6">The type of the sixth component of the tuple.</typeparam>
            <typeparam name="T7">The type of the seventh component of the tuple.</typeparam>
            <typeparam name="T8">The type of the eighth component of the tuple.</typeparam>
            <param name="item1">The value of the first component of the tuple.</param>
            <param name="item2">The value of the second component of the tuple.</param>
            <param name="item3">The value of the third component of the tuple.</param>
            <param name="item4">The value of the fourth component of the tuple.</param>
            <param name="item5">The value of the fifth component of the tuple.</param>
            <param name="item6">The value of the sixth component of the tuple.</param>
            <param name="item7">The value of the seventh component of the tuple.</param>
            <param name="item8">The value of the eighth component of the tuple.</param>
            <returns>An 8-tuple (octuple) whose value is (item1, item2, item3, item4, item5, item6, item7, item8).</returns>
        </member>
        <member name="T:System.ValueTuple`1">
            <summary>Represents a 1-tuple, or singleton, as a value type.</summary>
            <typeparam name="T1">The type of the tuple's only component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`1.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`1"/> instance's first component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`1"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
        </member>
        <member name="M:System.ValueTuple`1.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`1"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`1"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`1.Equals(System.ValueTuple{`0})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`1"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`1"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its field
            is equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`1.CompareTo(System.ValueTuple{`0})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`1.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`1"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`1.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`1"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`1"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1)</c>,
            where <c>Item1</c> represents the value of <see cref="F:System.ValueTuple`1.Item1"/>. If the field is <see langword="null"/>,
            it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="T:System.ValueTuple`2">
            <summary>
            Represents a 2-tuple, or pair, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`2.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`2"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`2.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`2"/> instance's first component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`2"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
        </member>
        <member name="M:System.ValueTuple`2.Equals(System.Object)">
             <summary>
             Returns a value that indicates whether the current <see cref="T:System.ValueTuple`2"/> instance is equal to a specified object.
             </summary>
             <param name="obj">The object to compare with this instance.</param>
             <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            
             <remarks>
             The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
             <list type="bullet">
                 <item><description>It is a <see cref="T:System.ValueTuple`2"/> value type.</description></item>
                 <item><description>Its components are of the same types as those of the current instance.</description></item>
                 <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
             </list>
             </remarks>
        </member>
        <member name="M:System.ValueTuple`2.Equals(System.ValueTuple{`0,`1})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`2"/> instance is equal to a specified <see cref="T:System.ValueTuple`2"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
             <summary>
             Returns a value that indicates whether the current <see cref="T:System.ValueTuple`2"/> instance is equal to a specified object based on a specified comparison method.
             </summary>
             <param name="other">The object to compare with this instance.</param>
             <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
             <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            
             <remarks>
             This member is an explicit interface member implementation. It can be used only when the
              <see cref="T:System.ValueTuple`2"/> instance is cast to an <see cref="T:System.Collections.IStructuralEquatable"/> interface.
            
             The <see cref="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)"/> implementation is called only if <c>other</c> is not <see langword="null"/>,
              and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <see cref="T:System.ValueTuple`2"/>
              whose components are of the same types as those of the current instance. The IStructuralEquatable.Equals(Object, IEqualityComparer) method
              first passes the <see cref="F:System.ValueTuple`2.Item1"/> values of the <see cref="T:System.ValueTuple`2"/> objects to be compared to the
              <see cref="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)"/> implementation. If this method call returns <see langword="true"/>, the method is
              called again and passed the <see cref="F:System.ValueTuple`2.Item2"/> values of the two <see cref="T:System.ValueTuple`2"/> instances.
             </remarks>
        </member>
        <member name="M:System.ValueTuple`2.CompareTo(System.ValueTuple{`0,`1})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`2.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`2"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`2.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`2"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`2"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2)</c>,
            where <c>Item1</c> and <c>Item2</c> represent the values of the <see cref="F:System.ValueTuple`2.Item1"/>
            and <see cref="F:System.ValueTuple`2.Item2"/> fields. If either field value is <see langword="null"/>,
            it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="T:System.ValueTuple`3">
            <summary>
            Represents a 3-tuple, or triple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`3.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`3"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`3.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`3"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`3.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`3"/> instance's third component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`3.#ctor(`0,`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`3"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
        </member>
        <member name="M:System.ValueTuple`3.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`3"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`3"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`3.Equals(System.ValueTuple{`0,`1,`2})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`3"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`3"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`3.CompareTo(System.ValueTuple{`0,`1,`2})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`3.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`3"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`3.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`3"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`3"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="T:System.ValueTuple`4">
            <summary>
            Represents a 4-tuple, or quadruple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`4.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`4"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`4.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`4"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`4.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`4"/> instance's third component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`4.Item4">
            <summary>
            The current <see cref="T:System.ValueTuple`4"/> instance's fourth component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`4"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
            <param name="item4">The value of the tuple's fourth component.</param>
        </member>
        <member name="M:System.ValueTuple`4.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`4"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`4"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`4.Equals(System.ValueTuple{`0,`1,`2,`3})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`4"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`4"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`4.CompareTo(System.ValueTuple{`0,`1,`2,`3})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`4.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`4"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`4.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`4"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`4"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3, Item4)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="T:System.ValueTuple`5">
            <summary>
            Represents a 5-tuple, or quintuple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`5.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`5"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`5.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`5"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`5.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`5"/> instance's third component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`5.Item4">
            <summary>
            The current <see cref="T:System.ValueTuple`5"/> instance's fourth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`5.Item5">
            <summary>
            The current <see cref="T:System.ValueTuple`5"/> instance's fifth component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`5"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
            <param name="item4">The value of the tuple's fourth component.</param>
            <param name="item5">The value of the tuple's fifth component.</param>
        </member>
        <member name="M:System.ValueTuple`5.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`5"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`5"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`5.Equals(System.ValueTuple{`0,`1,`2,`3,`4})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`5"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`5"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`5.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`5.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`5"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`5.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`5"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`5"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3, Item4, Item5)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="T:System.ValueTuple`6">
            <summary>
            Represents a 6-tuple, or sixtuple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`6.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`6.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`6.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's third component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`6.Item4">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's fourth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`6.Item5">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's fifth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`6.Item6">
            <summary>
            The current <see cref="T:System.ValueTuple`6"/> instance's sixth component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`6"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
            <param name="item4">The value of the tuple's fourth component.</param>
            <param name="item5">The value of the tuple's fifth component.</param>
            <param name="item6">The value of the tuple's sixth component.</param>
        </member>
        <member name="M:System.ValueTuple`6.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`6"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`6"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`6.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`6"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`6"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`6.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`6.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`6"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`6.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`6"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`6"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3, Item4, Item5, Item6)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="T:System.ValueTuple`7">
            <summary>
            Represents a 7-tuple, or sentuple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
            <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`7.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's third component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item4">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's fourth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item5">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's fifth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item6">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's sixth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`7.Item7">
            <summary>
            The current <see cref="T:System.ValueTuple`7"/> instance's seventh component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`7"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
            <param name="item4">The value of the tuple's fourth component.</param>
            <param name="item5">The value of the tuple's fifth component.</param>
            <param name="item6">The value of the tuple's sixth component.</param>
            <param name="item7">The value of the tuple's seventh component.</param>
        </member>
        <member name="M:System.ValueTuple`7.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`7"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`7"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`7.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`7"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`7"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`7.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`7.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`7"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`7.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`7"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`7"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3, Item4, Item5, Item6, Item7)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="T:System.ValueTuple`8">
            <summary>
            Represents an 8-tuple, or octuple, as a value type.
            </summary>
            <typeparam name="T1">The type of the tuple's first component.</typeparam>
            <typeparam name="T2">The type of the tuple's second component.</typeparam>
            <typeparam name="T3">The type of the tuple's third component.</typeparam>
            <typeparam name="T4">The type of the tuple's fourth component.</typeparam>
            <typeparam name="T5">The type of the tuple's fifth component.</typeparam>
            <typeparam name="T6">The type of the tuple's sixth component.</typeparam>
            <typeparam name="T7">The type of the tuple's seventh component.</typeparam>
            <typeparam name="TRest">The type of the tuple's eighth component.</typeparam>
        </member>
        <member name="F:System.ValueTuple`8.Item1">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's first component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item2">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's second component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item3">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's third component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item4">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's fourth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item5">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's fifth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item6">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's sixth component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Item7">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's seventh component.
            </summary>
        </member>
        <member name="F:System.ValueTuple`8.Rest">
            <summary>
            The current <see cref="T:System.ValueTuple`8"/> instance's eighth component.
            </summary>
        </member>
        <member name="M:System.ValueTuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ValueTuple`8"/> value type.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
            <param name="item3">The value of the tuple's third component.</param>
            <param name="item4">The value of the tuple's fourth component.</param>
            <param name="item5">The value of the tuple's fifth component.</param>
            <param name="item6">The value of the tuple's sixth component.</param>
            <param name="item7">The value of the tuple's seventh component.</param>
            <param name="rest">The value of the tuple's eight component.</param>
        </member>
        <member name="M:System.ValueTuple`8.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`8"/> instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified object; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="obj"/> parameter is considered to be equal to the current instance under the following conditions:
            <list type="bullet">
                <item><description>It is a <see cref="T:System.ValueTuple`8"/> value type.</description></item>
                <item><description>Its components are of the same types as those of the current instance.</description></item>
                <item><description>Its components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:System.ValueTuple`8.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>
            Returns a value that indicates whether the current <see cref="T:System.ValueTuple`8"/>
            instance is equal to a specified <see cref="T:System.ValueTuple`8"/>.
            </summary>
            <param name="other">The tuple to compare with this instance.</param>
            <returns><see langword="true"/> if the current instance is equal to the specified tuple; otherwise, <see langword="false"/>.</returns>
            <remarks>
            The <paramref name="other"/> parameter is considered to be equal to the current instance if each of its fields
            are equal to that of the current instance, using the default comparer for that field's type.
            </remarks>
        </member>
        <member name="M:System.ValueTuple`8.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,`7})">
            <summary>Compares this instance to a specified instance and returns an indication of their relative values.</summary>
            <param name="other">An instance to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and <paramref name="other"/>.
            Returns less than zero if this instance is less than <paramref name="other"/>, zero if this
            instance is equal to <paramref name="other"/>, and greater than zero if this instance is greater 
            than <paramref name="other"/>.
            </returns>
        </member>
        <member name="M:System.ValueTuple`8.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:System.ValueTuple`8"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:System.ValueTuple`8.ToString">
            <summary>
            Returns a string that represents the value of this <see cref="T:System.ValueTuple`8"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:System.ValueTuple`8"/> instance.</returns>
            <remarks>
            The string returned by this method takes the form <c>(Item1, Item2, Item3, Item4, Item5, Item6, Item7, Rest)</c>.
            If any field value is <see langword="null"/>, it is represented as <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
    </members>
</doc>
