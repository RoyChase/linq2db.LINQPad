//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace LinqToDB.LINQPad
{
	public partial class ConnectionViewModel : INotifyPropertyChanged
	{
		#region Name : string

		private string _name;
		public  string  Name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					BeforeNameChanged(value);
					_name = value;
					AfterNameChanged();

					OnNameChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeNameChanged(string newValue);
		partial void AfterNameChanged ();

		public const string NameOfName = "Name";

		private static readonly PropertyChangedEventArgs _nameChangedEventArgs = new PropertyChangedEventArgs(NameOfName);

		private void OnNameChanged()
		{
			OnPropertyChanged(_nameChangedEventArgs);
		}

		#endregion

		#endregion

		#region SelectedProvider : int

		private int _selectedProvider;
		public  int  SelectedProvider
		{
			get { return _selectedProvider; }
			set
			{
				if (_selectedProvider != value)
				{
					BeforeSelectedProviderChanged(value);
					_selectedProvider = value;
					AfterSelectedProviderChanged();

					OnSelectedProviderChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeSelectedProviderChanged(int newValue);
		partial void AfterSelectedProviderChanged ();

		public const string NameOfSelectedProvider = "SelectedProvider";

		private static readonly PropertyChangedEventArgs _selectedProviderChangedEventArgs = new PropertyChangedEventArgs(NameOfSelectedProvider);

		private void OnSelectedProviderChanged()
		{
			OnPropertyChanged(_selectedProviderChangedEventArgs);
		}

		#endregion

		#endregion

		#region Providers : ObservableCollection<string>

		private ObservableCollection<string> _providers;
		public  ObservableCollection<string>  Providers
		{
			get { return _providers; }
			set
			{
				if (_providers != value)
				{
					BeforeProvidersChanged(value);
					_providers = value;
					AfterProvidersChanged();

					OnProvidersChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeProvidersChanged(ObservableCollection<string> newValue);
		partial void AfterProvidersChanged ();

		public const string NameOfProviders = "Providers";

		private static readonly PropertyChangedEventArgs _providersChangedEventArgs = new PropertyChangedEventArgs(NameOfProviders);

		private void OnProvidersChanged()
		{
			OnPropertyChanged(_providersChangedEventArgs);
		}

		#endregion

		#endregion

		#region ConnectionString : string

		private string _connectionString;
		public  string  ConnectionString
		{
			get { return _connectionString; }
			set
			{
				if (_connectionString != value)
				{
					BeforeConnectionStringChanged(value);
					_connectionString = value;
					AfterConnectionStringChanged();

					OnConnectionStringChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeConnectionStringChanged(string newValue);
		partial void AfterConnectionStringChanged ();

		public const string NameOfConnectionString = "ConnectionString";

		private static readonly PropertyChangedEventArgs _connectionStringChangedEventArgs = new PropertyChangedEventArgs(NameOfConnectionString);

		private void OnConnectionStringChanged()
		{
			OnPropertyChanged(_connectionStringChangedEventArgs);
		}

		#endregion

		#endregion

		#region IncludeSchemas : string

		private string _includeSchemas;
		public  string  IncludeSchemas
		{
			get { return _includeSchemas; }
			set
			{
				if (_includeSchemas != value)
				{
					BeforeIncludeSchemasChanged(value);
					_includeSchemas = value;
					AfterIncludeSchemasChanged();

					OnIncludeSchemasChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeIncludeSchemasChanged(string newValue);
		partial void AfterIncludeSchemasChanged ();

		public const string NameOfIncludeSchemas = "IncludeSchemas";

		private static readonly PropertyChangedEventArgs _includeSchemasChangedEventArgs = new PropertyChangedEventArgs(NameOfIncludeSchemas);

		private void OnIncludeSchemasChanged()
		{
			OnPropertyChanged(_includeSchemasChangedEventArgs);
		}

		#endregion

		#endregion

		#region ExcludeSchemas : string

		private string _excludeSchemas;
		public  string  ExcludeSchemas
		{
			get { return _excludeSchemas; }
			set
			{
				if (_excludeSchemas != value)
				{
					BeforeExcludeSchemasChanged(value);
					_excludeSchemas = value;
					AfterExcludeSchemasChanged();

					OnExcludeSchemasChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeExcludeSchemasChanged(string newValue);
		partial void AfterExcludeSchemasChanged ();

		public const string NameOfExcludeSchemas = "ExcludeSchemas";

		private static readonly PropertyChangedEventArgs _excludeSchemasChangedEventArgs = new PropertyChangedEventArgs(NameOfExcludeSchemas);

		private void OnExcludeSchemasChanged()
		{
			OnPropertyChanged(_excludeSchemasChangedEventArgs);
		}

		#endregion

		#endregion

		#region INotifyPropertyChanged support

#if !SILVERLIGHT
		[field : NonSerialized]
#endif
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
#if SILVERLIGHT
				if (System.Windows.Deployment.Current.Dispatcher.CheckAccess())
					propertyChanged(this, new PropertyChangedEventArgs(propertyName));
				else
					System.Windows.Deployment.Current.Dispatcher.BeginInvoke(
						() =>
						{
							var pc = PropertyChanged;
							if (pc != null)
								pc(this, new PropertyChangedEventArgs(propertyName));
						});
#else
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
#endif
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
#if SILVERLIGHT
				if (System.Windows.Deployment.Current.Dispatcher.CheckAccess())
					propertyChanged(this, arg);
				else
					System.Windows.Deployment.Current.Dispatcher.BeginInvoke(
						() =>
						{
							var pc = PropertyChanged;
							if (pc != null)
								pc(this, arg);
						});
#else
				propertyChanged(this, arg);
#endif
			}
		}

		#endregion
	}
}
